// Generated by CoffeeScript 1.6.3
var Author, Category, News, Tag, apns, async, config, db, moment, processWordpressAuthors, processWordpressCategories, processWordpressTags, request, synchronize, synchronizeWordpressAuthor, synchronizeWordpressCategory, synchronizeWordpressTag, utils, _;

async = require('async');

moment = require("moment");

_ = require('underscore')._;

request = require("request");

config = require("../conf/config");

utils = require('../lib/utils');

db = require("../db");

apns = require("../lib/apns");

News = require("../model/news");

Tag = require("../model/tag");

Category = require("../model/category");

Author = require("../model/author");

synchronize = function() {
  var callback;
  callback = function(err, results) {
    if (err) {
      return console.log("Wordpress Synchronization ended with error: " + err.message + " - Error: " + err);
    } else {
      return console.log("Wordpress Synchronization ended with success !");
    }
  };
  if (config.feature.stopWatch) {
    callback = utils.stopWatchCallbak(callback);
  }
  console.log("Start synchronizing Wordpress data ...");
  return async.parallel([processWordpressTags, processWordpressCategories, processWordpressAuthors], callback);
};

processWordpressTags = function(callback) {
  console.log("Start synchronizing Wordpress tags ...");
  return request.get({
    url: "http://blog.xebia.fr/wp-json-api/get_tag_index",
    json: true
  }, function(error, data, response) {
    return async.map(response.tags, synchronizeWordpressTag, function(err, results) {
      return console.log("Synchronized " + results.length + " Wordpress tags");
    });
  });
};

processWordpressCategories = function(callback) {
  console.log("Start synchronizing Wordpress categories ...");
  return request.get({
    url: "http://blog.xebia.fr/wp-json-api/get_category_index",
    json: true
  }, function(error, data, response) {
    return async.map(response.categories, synchronizeWordpressCategory, function(err, results) {
      return console.log("Synchronized " + results.length + " Wordpress categories");
    });
  });
};

processWordpressAuthors = function(callback) {
  console.log("Start synchronizing Wordpress authors ...");
  return request.get({
    url: "http://blog.xebia.fr/wp-json-api/get_author_index",
    json: true
  }, function(error, data, response) {
    return async.map(response.authors, synchronizeWordpressAuthor, function(err, results) {
      return console.log("Synchronized " + results.length + " Wordpress authors");
    });
  });
};

synchronizeWordpressTag = function(tag, callback) {
  return Tag.findOne({
    id: tag.id
  }, function(err, tagFound) {
    var tagEntry;
    if (err) {
      return callback(err);
    } else if (!tagFound) {
      tagEntry = new Tag(tag);
      return tagEntry.save(function(err) {
        callback(err, tagEntry.id);
        return console.log("New tag synchronised: " + tagEntry.title);
      });
    } else {
      return callback(err, tagFound.id);
    }
  });
};

synchronizeWordpressCategory = function(category, callback) {
  return Category.findOne({
    id: category.id
  }, function(err, categoryFound) {
    var categoryEntry;
    if (err) {
      return callback(err);
    } else if (!categoryFound) {
      categoryEntry = new Category(category);
      return categoryEntry.save(function(err) {
        callback(err, categoryEntry.id);
        return console.log("New category synchronised: " + categoryEntry.title);
      });
    } else {
      return callback(err, categoryFound.id);
    }
  });
};

synchronizeWordpressAuthor = function(author, callback) {
  return Author.findOne({
    id: author.id
  }, function(err, authorFound) {
    var authorEntry;
    if (err) {
      return callback(err);
    } else if (!authorFound) {
      authorEntry = new Author(author);
      return authorEntry.save(function(err) {
        callback(err, authorEntry.id);
        return console.log("New author synchronised: " + authorEntry.name);
      });
    } else {
      return callback(err, authorFound.id);
    }
  });
};

module.exports = {
  synchronize: synchronize
};

/*
//@ sourceMappingURL=syncWordpress.map
*/
