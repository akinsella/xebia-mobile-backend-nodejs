// Generated by CoffeeScript 1.6.3
var ExperienceLevel, PresentationType, Track, async, config, db, eventId, moment, processDevoxxExperienceLevels, processDevoxxPresentationTypes, processDevoxxTracks, request, synchronize, synchronizeDevoxxExperienceLevel, synchronizeDevoxxPresentationType, synchronizeDevoxxTrack, utils, _;

async = require('async');

moment = require("moment");

_ = require('underscore')._;

request = require("request");

config = require("../conf/config");

utils = require('../lib/utils');

db = require("../db");

ExperienceLevel = require("../model/experienceLevel");

PresentationType = require("../model/presentationType");

Track = require("../model/track");

eventId = 10;

synchronize = function() {
  var callback;
  callback = function(err, results) {
    if (err) {
      return console.log("Devoxx Belgium Synchronization ended with error: " + err.message + " - Error: " + err);
    } else {
      return console.log("Devoxx Belgium Synchronization ended with success !");
    }
  };
  if (config.feature.stopWatch) {
    callback = utils.stopWatchCallbak(callback);
  }
  console.log("Start synchronizing Devoxx Belgium data ...");
  return async.parallel([processDevoxxExperienceLevels, processDevoxxPresentationTypes, processDevoxxTracks], callback);
};

processDevoxxExperienceLevels = function(callback) {
  console.log("Start synchronizing Devoxx Experience Levels ...");
  return request.get({
    url: "https://cfp.devoxx.com/rest/v1/events/" + eventId + "/experiencelevels",
    json: true
  }, function(error, data, response) {
    var experienceLevels;
    experienceLevels = _(response).sortBy(function(experienceLevel) {
      return experienceLevel.Name.toUpperCase();
    });
    experienceLevels.forEach(function(experienceLevel) {
      return experienceLevel.conferenceId = eventId;
    });
    return async.map(experienceLevels, synchronizeDevoxxExperienceLevel, function(err, results) {
      return console.log("Synchronized " + results.length + " Experience Levels");
    });
  });
};

processDevoxxPresentationTypes = function(callback) {
  console.log("Start synchronizing Devoxx Presentation Types ...");
  return request.get({
    url: "https://cfp.devoxx.com/rest/v1/events/" + eventId + "/presentationtypes",
    json: true
  }, function(error, data, response) {
    var presentationTypes;
    presentationTypes = _(response).sortBy(function(presentationType) {
      return presentationType.name.toUpperCase();
    });
    presentationTypes.forEach(function(presentationType) {
      presentationType.conferenceId = eventId;
      return presentationType.descriptionPlainText = utils.htmlToPlainText(presentationType.description);
    });
    return async.map(presentationTypes, synchronizeDevoxxPresentationType, function(err, results) {
      return console.log("Synchronized " + results.length + " Presentation Types");
    });
  });
};

processDevoxxTracks = function(callback) {
  console.log("Start synchronizing Devoxx Presentation Types ...");
  return request.get({
    url: "https://cfp.devoxx.com/rest/v1/events/" + eventId + "/tracks",
    json: true
  }, function(error, data, response) {
    var tracks;
    tracks = _(response).sortBy(function(track) {
      return track.name.toUpperCase();
    });
    tracks.forEach(function(track) {
      track.conferenceId = eventId;
      return track.descriptionPlainText = utils.htmlToPlainText(track.description);
    });
    return async.map(tracks, synchronizeDevoxxTrack, function(err, results) {
      return console.log("Synchronized " + results.length + " Tracks");
    });
  });
};

synchronizeDevoxxExperienceLevel = function(experienceLevel, callback) {
  var query;
  query = {
    name: experienceLevel.name,
    conferenceId: experienceLevel.conferenceId
  };
  return ExperienceLevel.findOne(query, function(err, experienceLevelFound) {
    if (err || experienceLevelFound) {
      return callback(err, experienceLevelFound != null ? experienceLevelFound.name : void 0);
    } else {
      experienceLevel.name = experienceLevel.Name;
      delete experienceLevel.Name;
      new ExperienceLevel(experienceLevel).save(function(err) {});
      callback(err, experienceLevel.name);
      return console.log("New experience level synchronised: " + experienceLevel.name);
    }
  });
};

synchronizeDevoxxPresentationType = function(presentationType, callback) {
  var query;
  query = {
    id: presentationType.id,
    conferenceId: presentationType.conferenceId
  };
  return PresentationType.findOne(query, function(err, presentationTypeFound) {
    var updatedData;
    if (err) {
      return callback(err);
    } else if (presentationTypeFound) {
      if (utils.isNotSame(presentationType, presentationTypeFound, ["name", "description", "descriptionPlainText"])) {
        updatedData = {
          name: presentationType.name,
          description: presentationType.description,
          descriptionPlainText: presentationType.descriptionPlainText
        };
        return PresentationType.update(query, updatedData, function(err, numberAffected, raw) {
          return callback(err, presentationTypeFound != null ? presentationTypeFound.id : void 0);
        });
      } else {
        return callback(err, presentationTypeFound.id);
      }
    } else {
      return new PresentationType(presentationType).save(function(err) {
        console.log("New experience level synchronized: " + presentationType.name);
        return callback(err, presentationType.id);
      });
    }
  });
};

synchronizeDevoxxTrack = function(track, callback) {
  var query;
  query = {
    id: track.id,
    conferenceId: track.conferenceId
  };
  return Track.findOne(query, function(err, trackFound) {
    var updatedData;
    if (err) {
      return callback(err);
    } else if (trackFound) {
      if (utils.isNotSame(track, trackFound, ["name", "description", "descriptionPlainText"])) {
        updatedData = {
          name: track.name,
          description: track.description,
          descriptionPlainText: track.descriptionPlainText
        };
        return Track.update(query, updatedData, function(err, numberAffected, raw) {
          return callback(err, trackFound != null ? trackFound.id : void 0);
        });
      } else {
        return callback(err, trackFound.id);
      }
    } else {
      return new Track(track).save(function(err) {
        console.log("New experience level synchronized: " + track.name);
        return callback(err, track.id);
      });
    }
  });
};

module.exports = {
  synchronize: synchronize
};

/*
//@ sourceMappingURL=syncDevoxxBelgium.map
*/
