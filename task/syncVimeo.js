// Generated by CoffeeScript 1.6.3
var Cache, News, OAuth, apiHost, apns, async, config, db, moment, oauth, processVideos, request, synchronize, synchronizeVideoNews, utils, _;

utils = require('../lib/utils');

async = require('async');

_ = require('underscore')._;

News = require("../model/news");

db = require("../db");

moment = require("moment");

config = require("../conf/config");

request = require("request");

apns = require("../lib/apns");

OAuth = require('oauth');

Cache = require('../lib/cache');

apiHost = 'http://vimeo.com/api/rest/v2';

oauth = new OAuth.OAuth('https://vimeo.com/oauth/request_token', 'https://vimeo.com/oauth/access_token', process.env["VIMEO_OAUTH_CONSUMER_KEY"], process.env["VIMEO_OAUTH_CONSUMER_SECRET"], '1.0', process.env["VIMEO_OAUTH_CALLBACK"], 'HMAC-SHA1');

synchronize = function() {
  var callback;
  callback = function(err, news) {
    if (err) {
      return console.log("Vimeo Synchronization ended with error: " + err.message + " - Error: " + err);
    } else {
      return console.log("Vimeo Synchronization ended with success ! (" + news.length + " videos synchronized)");
    }
  };
  if (config.feature.stopWatch) {
    callback = utils.stopWatchCallbak(callback);
  }
  console.log("Start synchronizing Videos entries ...");
  return processVideos(callback);
};

processVideos = function(callback) {
  var url;
  url = "" + apiHost + "?method=vimeo.videos.getAll&user_id=xebia&sort=newest&page=1&per_page=50&summary_response=true&full_response=false&format=json";
  return Cache.get('vimeo.crendentials', function(err, credentials) {
    if (err) {
      console.log("Error getting OAuth request data: " + err);
    } else if (!credentials) {
      console.log(500, "Error No Credentials stored");
    } else {

    }
    return oauth.get(url, credentials.accessToken, credentials.accessTokenSecret, function(error, data, response) {
      if (error) {
        return console.log(500, "Error No Credentials stored: " + error);
      } else {
        data = data ? JSON.parse(data) : data;
        return async.map(data.videos.video, synchronizeVideoNews, callback);
      }
    });
  });
};

synchronizeVideoNews = function(video, callback) {
  return News.findOne({
    type: 'vimeo',
    typeId: video.id
  }, function(err, news) {
    var newsEntry;
    if (err) {
      return callback(err);
    } else if (!news) {
      newsEntry = new News({
        content: video.title,
        draft: false,
        imageUrl: "",
        publicationDate: video.upload_date,
        title: video.title,
        author: video.owner.fullname,
        type: "vimeo",
        typeId: video.id
      });
      return newsEntry.save(function(err) {
        callback(err, newsEntry);
        return apns.pushToAll("Nouvelle vid√©o: " + newsEntry.title, function() {
          return console.log("Pushed notification for video: '" + newsEntry.title + "'");
        });
      });
    } else {
      return callback(err, void 0);
    }
  });
};

module.exports = {
  synchronize: synchronize
};

/*
//@ sourceMappingURL=syncVimeo.map
*/
