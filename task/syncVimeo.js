// Generated by CoffeeScript 1.6.3
var Cache, OAuth, Video, apiHost, apns, async, config, db, moment, oauth, processVideos, request, synchronize, synchronizeVideo, transformVideo, utils, _;

utils = require('../lib/utils');

async = require('async');

_ = require('underscore')._;

Video = require("../model/video");

db = require("../db");

moment = require("moment");

config = require("../conf/config");

request = require("request");

apns = require("../lib/apns");

OAuth = require('oauth');

Cache = require('../lib/cache');

apiHost = 'http://vimeo.com/api/rest/v2';

oauth = new OAuth.OAuth('https://vimeo.com/oauth/request_token', 'https://vimeo.com/oauth/access_token', process.env["VIMEO_OAUTH_CONSUMER_KEY"], process.env["VIMEO_OAUTH_CONSUMER_SECRET"], '1.0', process.env["VIMEO_OAUTH_CALLBACK"], 'HMAC-SHA1');

synchronize = function() {
  var callback;
  callback = function(err, news) {
    if (err) {
      return console.log("Vimeo Synchronization ended with error: " + err.message + " - Error: " + err);
    } else {
      return console.log("Vimeo Synchronization ended with success ! (" + news.length + " videos synchronized)");
    }
  };
  if (config.feature.stopWatch) {
    callback = utils.stopWatchCallbak(callback);
  }
  console.log("Start synchronizing Videos entries ...");
  return processVideos(callback);
};

processVideos = function(callback) {
  var url;
  url = "" + apiHost + "?method=vimeo.videos.getAll&user_id=xebia&sort=newest&page=1&per_page=50&summary_response=true&full_response=false&format=json";
  return Cache.get('vimeo.crendentials', function(err, credentials) {
    if (err) {
      console.log("Error getting OAuth request data: " + err);
    } else if (!credentials) {
      console.log(500, "Error No Credentials stored");
    } else {

    }
    return oauth.get(url, credentials.accessToken, credentials.accessTokenSecret, function(error, data, response) {
      var videos;
      if (error) {
        return console.log(500, "Error No Credentials stored: " + error);
      } else {
        data = data ? JSON.parse(data) : data;
        videos = _(data.videos.video).sortBy(function(video) {
          return video.uploadDate;
        });
        return async.map(videos, synchronizeVideo, callback);
      }
    });
  });
};

synchronizeVideo = function(video, callback) {
  return Video.findOne({
    id: video.id
  }, function(err, foundVideo) {
    var videoEntry;
    if (err) {
      return callback(err);
    } else if (!foundVideo) {
      video = transformVideo(video);
      videoEntry = new Video(video);
      return videoEntry.save(function(err) {
        callback(err, videoEntry.id);
        if (!err) {
          return apns.pushToAll("New video with id: " + videoEntry.id, function() {
            return console.log("Pushed notification for video with id: '" + videoEntry.id + "'");
          });
        }
      });
    } else {
      return callback(err, foundVideo.id);
    }
  });
};

transformVideo = function(video) {
  video.embedPrivacy = video.embed_privacy;
  delete video.embed_privacy;
  video.isHd = Number(video.is_hd) > 0;
  delete video.is_hd;
  video.isTranscoding = Number(video.is_transcoding) > 0;
  delete video.is_transcoding;
  video.isWatchLater = Number(video.is_watchlater) > 0;
  delete video.is_watchlater;
  video.uploadDate = video.upload_date;
  delete video.upload_date;
  video.modifiedDate = video.modified_date;
  delete video.modified_date;
  video.likeCount = Number(video.number_of_likes);
  delete video.number_of_likes;
  video.playCount = Number(video.number_of_plays);
  delete video.number_of_plays;
  video.commentCount = Number(video.number_of_comments);
  delete video.number_of_comments;
  video.thumbnails = video.thumbnails.thumbnail;
  video.owner.profileUrl = video.owner.profileurl;
  delete video.owner.profileurl;
  video.owner.displayName = video.owner.display_name;
  delete video.owner.display_name;
  video.owner.isPlus = Number(video.owner.is_plus) > 0;
  delete video.owner.is_plus;
  video.owner.isPro = Number(video.owner.is_pro) > 0;
  delete video.owner.is_pro;
  video.owner.isStaff = Number(video.owner.is_staff) > 0;
  delete video.owner.is_staff;
  video.owner.realName = video.owner.realname;
  delete video.owner.realname;
  video.owner.videosUrl = video.owner.videosurl;
  delete video.owner.videosurl;
  video.thumbnails.forEach(function(thumbnail) {
    thumbnail.width = Number(thumbnail.width);
    thumbnail.height = Number(thumbnail.height);
    thumbnail.url = thumbnail._content;
    return delete thumbnail._content;
  });
  return video;
};

module.exports = {
  synchronize: synchronize
};

/*
//@ sourceMappingURL=syncVimeo.map
*/
