// Generated by CoffeeScript 1.6.3
var DataSynchronizer, DevoxxDataArraySynchronizer, async, request, utils, _,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

async = require('async');

_ = require('underscore')._;

request = require("request");

utils = require('../../lib/utils');

DataSynchronizer = require('../DataSynchronizer');

DevoxxDataArraySynchronizer = (function(_super) {
  __extends(DevoxxDataArraySynchronizer, _super);

  function DevoxxDataArraySynchronizer(name) {
    this.name = name;
    this.synchronizeItem = __bind(this.synchronizeItem, this);
    this.synchronizeData = __bind(this.synchronizeData, this);
    console.log("Instanciating Devoxx Data Array Synchronizer with name: '" + this.name + "'");
    DevoxxDataArraySynchronizer.__super__.constructor.call(this, name);
  }

  DevoxxDataArraySynchronizer.prototype.baseUrl = function() {
    return "http://dev.cfp.devoxx.com:3000";
  };

  DevoxxDataArraySynchronizer.prototype.path = function() {
    return "";
  };

  DevoxxDataArraySynchronizer.prototype.fullUrl = function() {
    return "" + (this.baseUrl()) + (this.path());
  };

  DevoxxDataArraySynchronizer.prototype.itemTransformer = function(items) {
    return items;
  };

  DevoxxDataArraySynchronizer.prototype.compareFields = function(item) {
    return {};
  };

  DevoxxDataArraySynchronizer.prototype.query = function(item) {
    return "";
  };

  DevoxxDataArraySynchronizer.prototype.itemDescription = function(item) {
    return item.toString();
  };

  DevoxxDataArraySynchronizer.prototype.createStorableItem = function(item) {
    return item;
  };

  DevoxxDataArraySynchronizer.prototype.modelClass = function() {
    return void 0;
  };

  DevoxxDataArraySynchronizer.prototype.synchronizeData = function(callback) {
    var _this = this;
    console.log("Start synchronizing Devoxx Presentations ...");
    console.log("Full Url: " + (this.fullUrl()));
    return request.get({
      url: this.fullUrl(),
      json: true
    }, function(error, data, response) {
      var items;
      console.log("Transforming response ...");
      items = _this.itemTransformer(response);
      return async.map(items, _this.synchronizeItem, callback);
    });
  };

  DevoxxDataArraySynchronizer.prototype.synchronizeItem = function(item, callback) {
    var _this = this;
    console.log("Processing item with id: " + item.id + " ...");
    return this.modelClass().findOne(this.query(item), function(err, itemFound) {
      if (err) {
        return callback(err);
      } else if (itemFound) {
        if (utils.isNotSame(item, itemFound, _this.compareFields())) {
          return _this.modelClass().update(_this.query(item), _this.updatedData(item), function(err, numberAffected, raw) {
            return callback(err, itemFound != null ? itemFound.id : void 0);
          });
        } else {
          return callback(err, itemFound.id);
        }
      } else {
        return _this.createStorableItem(item).save(function(err) {
          console.log("New " + name + " synchronized: " + item.title);
          return callback(err, item.id);
        });
      }
    });
  };

  return DevoxxDataArraySynchronizer;

})(DataSynchronizer);

module.exports = DevoxxDataArraySynchronizer;

/*
//@ sourceMappingURL=DevoxxDataArraySynchronizer.map
*/
