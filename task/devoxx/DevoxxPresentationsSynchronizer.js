// Generated by CoffeeScript 1.6.3
var DevoxxEventAwareDataArraySynchronizer, DevoxxPresentationsSynchronizer, Presentation, utils, _,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore')._;

utils = require('../../lib/utils');

Presentation = require("../../model/presentation");

DevoxxEventAwareDataArraySynchronizer = require('./DevoxxEventAwareDataArraySynchronizer');

DevoxxPresentationsSynchronizer = (function(_super) {
  __extends(DevoxxPresentationsSynchronizer, _super);

  function DevoxxPresentationsSynchronizer(eventId) {
    this.itemTransformer = __bind(this.itemTransformer, this);
    console.log("Instanciating Devoxx Presentation Synchronizer with eventId: '" + eventId + "'");
    console.log("eventId: " + eventId);
    DevoxxPresentationsSynchronizer.__super__.constructor.call(this, "Presentations", eventId);
  }

  DevoxxPresentationsSynchronizer.prototype.path = function() {
    return "/presentations";
  };

  DevoxxPresentationsSynchronizer.prototype.itemTransformer = function(presentations) {
    var _this = this;
    presentations = _(presentations).sortBy(function(presentation) {
      return ("" + presentation.title).toUpperCase();
    });
    presentations.forEach(function(presentation) {
      if (!presentation.room) {
        presentation.room = "";
      }
      presentation.conferenceId = _this.eventId;
      if (presentation.speakers) {
        return presentation.speakers.forEach(function(speaker) {
          speaker.id = speaker.speakerId;
          delete speaker.speakerId;
          speaker.name = speaker.speaker;
          delete speaker.speaker;
          speaker.uri = speaker.speakerUri;
          return delete speaker.speakerUri;
        });
      } else {
        return presentation.speakers = [];
      }
    });
    return presentations;
  };

  DevoxxPresentationsSynchronizer.prototype.compareFields = function() {
    return ["summary", "title", "track", "experience", "language", "type", "room"];
  };

  DevoxxPresentationsSynchronizer.prototype.query = function(presentation) {
    return {
      id: presentation.id,
      conferenceId: presentation.conferenceId
    };
  };

  DevoxxPresentationsSynchronizer.prototype.updatedData = function(presentation) {
    return {
      summary: presentation.summary,
      title: presentation.title,
      track: presentation.track,
      experience: presentation.experience,
      language: presentation.language,
      type: presentation.type,
      room: presentation.room
    };
  };

  DevoxxPresentationsSynchronizer.prototype.itemDescription = function(presentation) {
    return presentation.title;
  };

  DevoxxPresentationsSynchronizer.prototype.createStorableItem = function(presentation) {
    return new Presentation(presentation);
  };

  DevoxxPresentationsSynchronizer.prototype.modelClass = function() {
    return Presentation;
  };

  return DevoxxPresentationsSynchronizer;

})(DevoxxEventAwareDataArraySynchronizer);

module.exports = DevoxxPresentationsSynchronizer;

/*
//@ sourceMappingURL=DevoxxPresentationsSynchronizer.map
*/
