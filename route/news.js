// Generated by CoffeeScript 1.6.3
var News, create, findById, list, listUnfiltered, moment, processRequest, removeById, utils, _;

utils = require('../lib/utils');

News = require('../model/news');

_ = require('underscore')._;

moment = require('moment');

processRequest = function(req, res, url, transform) {
  var options;
  options = utils.buildOptions(req, res, url, 5 * 60, transform);
  utils.processRequest(options);
};

listUnfiltered = function(req, res) {
  return News.find({}, {
    sort: {
      "publicationDate": -1
    }
  }, function(err, news) {
    if (news) {
      return utils.responseData(200, void 0, news, {
        req: req,
        res: res
      });
    } else {
      return utils.responseData(404, "Not Found", void 0, {
        req: req,
        res: res
      });
    }
  });
};

list = function(req, res) {
  return News.find({
    draft: false
  }, null, {
    sort: {
      "publicationDate": -1
    }
  }, function(err, news) {
    news = _(news).map(function(newsEntry) {
      return {
        id: newsEntry.id,
        content: newsEntry.content,
        createdAt: newsEntry.createdAt,
        draft: newsEntry.draft,
        imageUrl: newsEntry.imageUrl,
        lastModified: newsEntry.lastModified,
        publicationDate: newsEntry.publicationDate,
        targetUrl: newsEntry.targetUrl,
        title: newsEntry.title,
        author: newsEntry.author,
        type: newsEntry.type,
        typeId: newsEntry.typeId
      };
    });
    _(news).each(function(newsEntry) {
      newsEntry.publicationDate = moment(newsEntry.publicationDate).format("YYYY-MM-DD HH:mm:ss");
      newsEntry.lastModified = moment(newsEntry.lastModified).format("YYYY-MM-DD HH:mm:ss");
      newsEntry.createdAt = moment(newsEntry.createdAt).format("YYYY-MM-DD HH:mm:ss");
      return newsEntry.publicationDate = moment(newsEntry.publicationDate).format("YYYY-MM-DD HH:mm:ss");
    });
    if (news) {
      return utils.responseData(200, void 0, news, {
        req: req,
        res: res
      });
    } else {
      return utils.responseData(404, "Not Found", void 0, {
        req: req,
        res: res
      });
    }
  });
};

findById = function(req, res) {
  return News.findOne({
    id: req.params.id
  }, function(err, news) {
    if (news) {
      return utils.responseData(200, void 0, news, {
        req: req,
        res: res
      });
    } else {
      return utils.responseData(404, "Not Found", void 0, {
        req: req,
        res: res
      });
    }
  });
};

removeById = function(req, res) {
  return News.findOneAndRemove({
    id: req.params.id
  }, function(err, news) {
    if (news) {
      return utils.responseData(204, void 0, news, {
        req: req,
        res: res
      });
    } else {
      return utils.responseData(404, "Not Found", void 0, {
        req: req,
        res: res
      });
    }
  });
};

create = function(req, res) {
  var news;
  news = new News(req.body);
  return news.save(function(err) {
    if (err) {
      return utils.responseData(500, "Could not save news", req.body, {
        req: req,
        res: res
      });
    } else {
      return utils.responseData(201, "Created", news, {
        req: req,
        res: res
      });
    }
  });
};

module.exports = {
  list: list,
  listUnfiltered: listUnfiltered,
  findById: findById,
  create: create,
  removeById: removeById
};

/*
//@ sourceMappingURL=news.map
*/
