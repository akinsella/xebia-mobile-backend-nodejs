// Generated by CoffeeScript 1.6.3
var Device, Notification, apns, create, findById, list, mapNotification, push, removeById, utils, _;

utils = require('../lib/utils');

_ = require('underscore')._;

Device = require("../model/device");

Notification = require("../model/notification");

apns = require("../lib/apns");

list = function(req, res) {
  return Notification.find({}, function(err, notifications) {
    if (err) {
      return utils.responseData(500, "Could not find notification - Error: " + err.message, void 0, {
        req: req,
        res: res
      });
    } else {
      return utils.responseData(200, void 0, notifications, {
        req: req,
        res: res
      });
    }
  });
};

findById = function(req, res) {
  return Notification.findOne({
    id: req.params.id
  }, function(err, notification) {
    if (err) {
      return utils.responseData(500, "Could not find notification - Error: " + err.message, void 0, {
        req: req,
        res: res
      });
    } else if (!notification) {
      return utils.responseData(404, "Not Found", void 0, {
        req: req,
        res: res
      });
    } else {
      return utils.responseData(200, void 0, notification, {
        req: req,
        res: res
      });
    }
  });
};

removeById = function(req, res) {
  return Notification.findOneAndRemove({
    id: req.params.id
  }, function(err, notification) {
    if (err) {
      return utils.responseData(500, "Could not remove notification - Error: " + err.message, void 0, {
        req: req,
        res: res
      });
    } else if (!notification) {
      return utils.responseData(404, "Not Found", void 0, {
        req: req,
        res: res
      });
    } else {
      return utils.responseData(204, void 0, notification, {
        req: req,
        res: res
      });
    }
  });
};

create = function(req, res) {
  var notification;
  notification = new Notification(req.body);
  return notification.save(function(err) {
    if (err) {
      return utils.responseData(500, "Could not save notification", req.body, {
        req: req,
        res: res
      });
    } else {
      return utils.responseData(201, "Created", notification, {
        req: req,
        res: res
      });
    }
  });
};

mapNotification = function(notification) {
  return {
    id: notification.id,
    message: notification.message
  };
};

push = function(req, res) {
  return apns.pushNotificationToAll(function(err) {
    if (err) {
      return utils.responseData(500, "Error: " + err, "{}", {
        req: req,
        res: res
      });
    } else {
      return utils.responseData(200, "Ok", "{}", {
        req: req,
        res: res
      });
    }
  });
};

module.exports = {
  push: push,
  list: list,
  findById: findById,
  create: create,
  removeById: removeById
};

/*
//@ sourceMappingURL=notification.map
*/
