// Generated by CoffeeScript 1.6.3
var ApnAgent, Device, Notification, agent, create, findById, list, mapNotification, push, pushNotification, removeById, utils, _;

utils = require('../lib/utils');

_ = require('underscore')._;

ApnAgent = require('apnagent');

Device = require("../model/device");

Notification = require("../model/notification");

agent = new ApnAgent.Agent();

agent.set('cert file', "" + __dirname + "/../certs/xebia-apns-cert.pem").set('key file', "" + __dirname + "/../certs/xebia-apns-key.pem").enable('sandbox').set('expires', '1d').set('reconnect delay', '1s').set('cache ttl', '30m');

agent.on('message:error', function(err, msg) {
  return console.log("Got some error: " + err.message + " - Message: " + msg);
});

agent.connect(function(err) {
  if (err) {
    throw err;
  } else {
    return console.log("Apn agent running ");
  }
});

push = function(req, res) {
  return Notification.findOne({
    id: req.params.id
  }, function(err, notification) {
    if (err) {
      return utils.responseData(500, "Error: " + err, "{}", {
        req: req,
        res: res
      });
    } else {
      return Device.find({}, function(err, devices) {
        if (err) {
          return utils.responseData(500, "Error: " + err, "{}", {
            req: req,
            res: res
          });
        } else {
          _(devices).each(function(device) {
            return pushNotification(device, notification);
          });
          return utils.responseData(200, "Ok", "{}", {
            req: req,
            res: res
          });
        }
      });
    }
  });
};

list = function(req, res) {
  return Notification.find({}, function(err, notifications) {
    if (err) {
      return utils.responseData(500, "Could not find notification - Error: " + err.message, void 0, {
        req: req,
        res: res
      });
    } else {
      return utils.responseData(200, void 0, notifications, {
        req: req,
        res: res
      });
    }
  });
};

findById = function(req, res) {
  return Notification.findOne({
    id: req.params.id
  }, function(err, notification) {
    if (err) {
      return utils.responseData(500, "Could not find notification - Error: " + err.message, void 0, {
        req: req,
        res: res
      });
    } else if (!notification) {
      return utils.responseData(404, "Not Found", void 0, {
        req: req,
        res: res
      });
    } else {
      return utils.responseData(200, void 0, notification, {
        req: req,
        res: res
      });
    }
  });
};

removeById = function(req, res) {
  return Notification.findOneAndRemove({
    id: req.params.id
  }, function(err, notification) {
    if (err) {
      return utils.responseData(500, "Could not remove notification - Error: " + err.message, void 0, {
        req: req,
        res: res
      });
    } else if (!notification) {
      return utils.responseData(404, "Not Found", void 0, {
        req: req,
        res: res
      });
    } else {
      return utils.responseData(204, void 0, notification, {
        req: req,
        res: res
      });
    }
  });
};

create = function(req, res) {
  var notification;
  notification = new Notification(req.body);
  return notification.save(function(err) {
    if (err) {
      return utils.responseData(500, "Could not save notification", req.body, {
        req: req,
        res: res
      });
    } else {
      return utils.responseData(201, "Created", notification, {
        req: req,
        res: res
      });
    }
  });
};

mapNotification = function(notification) {
  return {
    id: notification.id,
    message: notification.message
  };
};

pushNotification = function(device, notification) {
  console.log("Try to log Message: '" + notification.message + "' to device with token: '" + device.token + "'");
  return agent.createMessage().device(device.token).alert(notification.message).send(function(err) {
    if (err) {
      return console.log("Count not send message: '" + notification.message + "' for device with token: " + device.token);
    } else {
      return console.log("Message sent");
    }
  });
};

module.exports = {
  push: push,
  list: list,
  findById: findById,
  create: create,
  removeById: removeById
};

/*
//@ sourceMappingURL=notification.map
*/
