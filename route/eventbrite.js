// Generated by CoffeeScript 1.6.3
var config, eventProps, fs, list, organizerProps, processRequest, utils, venueProps, _,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

utils = require('../lib/utils');

_ = require('underscore')._;

fs = require('fs');

config = require('../conf/config');

processRequest = function(req, res, url, transform) {
  var options;
  options = utils.buildOptions(req, res, url, 5 * 60, transform);
  return utils.processRequest(options);
};

eventProps = ["id", "category", "capacity", "title", "start_date", "end_date", "timezone_offset", "tags", "created", "url", "privacy", "status", "description", "description_plain_text", "organizer", "venue"];

organizerProps = ["id", "name", "url", "description"];

venueProps = ["id", "name", "city", "region", "country", "country_code", "address", "address_2", "postal_code", "longitude", "latitude"];

list = function(req, res) {
  var apiKey;
  if (config.offlineMode) {
    res.charset = 'UTF-8';
    return res.send(JSON.parse(fs.readFileSync("" + __dirname + "/../data/eventbrite_event.json", "utf-8")));
  } else {
    apiKey = process.env["EVENTBRITE_AUTH_KEY"];
    return processRequest(req, res, "https://www.eventbrite.com/json/organizer_list_events?app_key=" + apiKey + "&id=1627902102", function(data, cb) {
      data = _(data.events).pluck("event");
      data = _(data).sortBy(function(event) {
        return event.start_date;
      });
      data = _(data).filter(function(event) {
        return event.status === "Live" || event.status === "Completed";
      });
      data = _(data).reverse();
      _(data).each(function(event) {
        var key, oKey, vKey;
        event.description_plain_text = event.description;
        if (event.description_plain_text) {
          event.description_plain_text = event.description_plain_text.replace(/<\/?([a-z][a-z0-9]*)\b[^>]*>?/gi, '');
          event.description_plain_text = event.description_plain_text.replace(/<!--(.*?)-->/g, '');
          event.description_plain_text = event.description_plain_text.replace(/\n\s*\n/g, '\n');
        }
        for (key in event) {
          if (!(__indexOf.call(eventProps, key) >= 0)) {
            delete event[key];
          }
          for (vKey in event.venue) {
            if (!(__indexOf.call(venueProps, vKey) >= 0)) {
              delete event.venue[vKey];
            }
          }
          for (oKey in event.organizer) {
            if (!(__indexOf.call(organizerProps, oKey) >= 0)) {
              delete event.organizer[oKey];
            }
          }
        }
        return event;
      });
      return cb(void 0, data);
    });
  }
};

module.exports = {
  list: list
};

/*
//@ sourceMappingURL=eventbrite.map
*/
