// Generated by CoffeeScript 1.6.3
var Cache, ExperienceLevel, OAuth, Presentation, PresentationType, Speaker, Track, async, experienceLevels, presentationTypes, presentations, request, speakers, tracks, util, utils, _;

util = require('util');

async = require('async');

request = require('request');

OAuth = require('oauth');

_ = require('underscore')._;

Cache = require('../lib/cache');

utils = require('../lib/utils');

PresentationType = require('../model/presentationType');

ExperienceLevel = require('../model/experienceLevel');

Track = require('../model/track');

Speaker = require('../model/speaker');

Presentation = require('../model/presentation');

tracks = function(req, res) {
  var conferenceId;
  conferenceId = req.params.conferenceId;
  return Track.find({
    conferenceId: conferenceId
  }).sort("name").exec(function(err, tracks) {
    if (err) {
      return res.json(500, {
        message: "Server error: " + err.message
      });
    } else {
      tracks = tracks.map(function(track) {
        track = track.toObject();
        delete track._id;
        delete track.__v;
        return track;
      });
      return res.json(tracks);
    }
  });
};

presentationTypes = function(req, res) {
  var conferenceId;
  conferenceId = req.params.conferenceId;
  return PresentationType.find({
    conferenceId: conferenceId
  }).sort("name").exec(function(err, presentationTypes) {
    if (err) {
      return res.json(500, {
        message: "Server error: " + err.message
      });
    } else {
      presentationTypes = presentationTypes.map(function(presentationType) {
        presentationType = presentationType.toObject();
        delete presentationType._id;
        delete presentationType.__v;
        return presentationType;
      });
      return res.json(presentationTypes);
    }
  });
};

experienceLevels = function(req, res) {
  var conferenceId;
  conferenceId = req.params.conferenceId;
  return ExperienceLevel.find({
    conferenceId: conferenceId
  }).sort("name").exec(function(err, experienceLevels) {
    if (err) {
      return res.json(500, {
        message: "Server error: " + err.message
      });
    } else {
      experienceLevels = experienceLevels.map(function(experienceLevel) {
        experienceLevel = experienceLevel.toObject();
        delete experienceLevel._id;
        delete experienceLevel.__v;
        return experienceLevel;
      });
      return res.json(experienceLevels);
    }
  });
};

speakers = function(req, res) {
  var conferenceId;
  conferenceId = req.params.conferenceId;
  return Speaker.find({
    conferenceId: conferenceId
  }).sort("firstName,lastName").exec(function(err, speakers) {
    if (err) {
      return res.json(500, {
        message: "Server error: " + err.message
      });
    } else {
      speakers = speakers.map(function(speaker) {
        speaker = speaker.toObject();
        delete speaker._id;
        delete speaker.__v;
        speaker.talks.forEach(function(talk) {
          return delete talk._id;
        });
        return speaker;
      });
      return res.json(speakers);
    }
  });
};

presentations = function(req, res) {
  var conferenceId;
  conferenceId = req.params.conferenceId;
  return Presentation.find({
    conferenceId: conferenceId
  }).sort("title").exec(function(err, presentations) {
    if (err) {
      return res.json(500, {
        message: "Server error: " + err.message
      });
    } else {
      presentations = presentations.map(function(presentation) {
        presentation = presentation.toObject();
        delete presentation._id;
        delete presentation.__v;
        presentation.speakers.forEach(function(speaker) {
          return delete speaker._id;
        });
        presentation.tags.forEach(function(tag) {
          return delete tag._id;
        });
        return presentation;
      });
      return res.json(presentations);
    }
  });
};

module.exports = {
  presentationTypes: presentationTypes,
  experienceLevels: experienceLevels,
  tracks: tracks,
  speakers: speakers,
  presentations: presentations
};

/*
//@ sourceMappingURL=conference.map
*/
