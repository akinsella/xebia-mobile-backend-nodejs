// Generated by CoffeeScript 1.6.3
var Cache, Conference, ExperienceLevel, OAuth, Presentation, PresentationType, Room, ScheduleEntry, Speaker, Track, async, conferences, experienceLevels, presentationTypes, presentations, request, rooms, schedule, scheduleByDate, speakers, tracks, util, utils, _;

util = require('util');

async = require('async');

request = require('request');

OAuth = require('oauth');

_ = require('underscore')._;

Cache = require('../lib/cache');

utils = require('../lib/utils');

Conference = require('../model/conference');

PresentationType = require('../model/presentationType');

ExperienceLevel = require('../model/experienceLevel');

Track = require('../model/track');

Speaker = require('../model/speaker');

Presentation = require('../model/presentation');

Room = require('../model/room');

ScheduleEntry = require('../model/scheduleEntry');

conferences = function(req, res) {
  return Conference.find().sort("name").exec(function(err, conferences) {
    if (err) {
      return res.json(500, {
        message: "Server error: " + err.message
      });
    } else {
      conferences = conferences.map(function(conference) {
        conference = conference.toObject();
        delete conference._id;
        delete conference.__v;
        return conference;
      });
      return res.json(conferences);
    }
  });
};

tracks = function(req, res) {
  var conferenceId;
  conferenceId = req.params.conferenceId;
  return Track.find({
    conferenceId: conferenceId
  }).sort("name").exec(function(err, tracks) {
    if (err) {
      return res.json(500, {
        message: "Server error: " + err.message
      });
    } else {
      tracks = tracks.map(function(track) {
        track = track.toObject();
        delete track._id;
        delete track.__v;
        return track;
      });
      return res.json(tracks);
    }
  });
};

presentationTypes = function(req, res) {
  var conferenceId;
  conferenceId = req.params.conferenceId;
  return PresentationType.find({
    conferenceId: conferenceId
  }).sort("name").exec(function(err, presentationTypes) {
    if (err) {
      return res.json(500, {
        message: "Server error: " + err.message
      });
    } else {
      presentationTypes = presentationTypes.map(function(presentationType) {
        presentationType = presentationType.toObject();
        delete presentationType._id;
        delete presentationType.__v;
        return presentationType;
      });
      return res.json(presentationTypes);
    }
  });
};

experienceLevels = function(req, res) {
  var conferenceId;
  conferenceId = req.params.conferenceId;
  return ExperienceLevel.find({
    conferenceId: conferenceId
  }).sort("name").exec(function(err, experienceLevels) {
    if (err) {
      return res.json(500, {
        message: "Server error: " + err.message
      });
    } else {
      experienceLevels = experienceLevels.map(function(experienceLevel) {
        experienceLevel = experienceLevel.toObject();
        delete experienceLevel._id;
        delete experienceLevel.__v;
        return experienceLevel;
      });
      return res.json(experienceLevels);
    }
  });
};

speakers = function(req, res) {
  var conferenceId;
  conferenceId = req.params.conferenceId;
  return Speaker.find({
    conferenceId: conferenceId
  }).sort("firstName,lastName").exec(function(err, speakers) {
    if (err) {
      return res.json(500, {
        message: "Server error: " + err.message
      });
    } else {
      speakers = speakers.map(function(speaker) {
        speaker = speaker.toObject();
        delete speaker._id;
        delete speaker.__v;
        speaker.talks.forEach(function(talk) {
          return delete talk._id;
        });
        return speaker;
      });
      return res.json(speakers);
    }
  });
};

presentations = function(req, res) {
  var conferenceId;
  conferenceId = req.params.conferenceId;
  return Presentation.find({
    conferenceId: conferenceId
  }).sort("title").exec(function(err, presentations) {
    if (err) {
      return res.json(500, {
        message: "Server error: " + err.message
      });
    } else {
      presentations = presentations.map(function(presentation) {
        presentation = presentation.toObject();
        delete presentation._id;
        delete presentation.__v;
        presentation.speakers.forEach(function(speaker) {
          return delete speaker._id;
        });
        presentation.tags.forEach(function(tag) {
          return delete tag._id;
        });
        return presentation;
      });
      return res.json(presentations);
    }
  });
};

rooms = function(req, res) {
  var conferenceId;
  conferenceId = req.params.conferenceId;
  return Room.find({
    conferenceId: conferenceId
  }).sort("name").exec(function(err, rooms) {
    if (err) {
      return res.json(500, {
        message: "Server error: " + err.message
      });
    } else {
      rooms = rooms.map(function(room) {
        room = room.toObject();
        delete room._id;
        delete room.__v;
        return room;
      });
      return res.json(rooms);
    }
  });
};

schedule = function(req, res) {
  var conferenceId;
  conferenceId = req.params.conferenceId;
  return ScheduleEntry.find({
    conferenceId: conferenceId
  }).sort("fromTime").exec(function(err, scheduleEntries) {
    if (err) {
      return res.json(500, {
        message: "Server error: " + err.message
      });
    } else {
      scheduleEntries = scheduleEntries.map(function(scheduleEntry) {
        scheduleEntry = scheduleEntry.toObject();
        delete scheduleEntry._id;
        delete scheduleEntry.__v;
        scheduleEntry.speakers.forEach(function(speaker) {
          return delete speaker._id;
        });
        scheduleEntry.fromTime = moment(scheduleEntry.fromTime).format("YYYY-MM-DD HH:mm:ss");
        scheduleEntry.toTime = moment(scheduleEntry.toTime).format("YYYY-MM-DD HH:mm:ss");
        return scheduleEntry;
      });
      return res.json(scheduleEntries);
    }
  });
};

scheduleByDate = function(req, res) {
  var conferenceId, date, dateEnd, dateStart;
  conferenceId = req.params.conferenceId;
  date = moment(req.params.date, "YYYY-MM-DD");
  dateStart = moment(date).hours(0).minutes(0).seconds(0);
  dateEnd = moment(date).add('days', 1).hours(0).minutes(0).seconds(0);
  return ScheduleEntry.find({
    conferenceId: conferenceId,
    fromTime: {
      $gte: dateStart,
      $lte: dateEnd
    }
  }).sort("fromTime").exec(function(err, scheduleEntries) {
    if (err) {
      return res.json(500, {
        message: "Server error: " + err.message
      });
    } else {
      scheduleEntries = scheduleEntries.map(function(scheduleEntry) {
        scheduleEntry = scheduleEntry.toObject();
        delete scheduleEntry._id;
        delete scheduleEntry.__v;
        scheduleEntry.speakers.forEach(function(speaker) {
          return delete speaker._id;
        });
        scheduleEntry.fromTime = moment(scheduleEntry.fromTime).format("YYYY-MM-DD HH:mm:ss");
        scheduleEntry.toTime = moment(scheduleEntry.toTime).format("YYYY-MM-DD HH:mm:ss");
        return scheduleEntry;
      });
      return res.json(scheduleEntries);
    }
  });
};

module.exports = {
  conferences: conferences,
  presentationTypes: presentationTypes,
  experienceLevels: experienceLevels,
  tracks: tracks,
  speakers: speakers,
  presentations: presentations,
  rooms: rooms,
  schedule: schedule,
  scheduleByDate: scheduleByDate
};

/*
//@ sourceMappingURL=conference.map
*/
