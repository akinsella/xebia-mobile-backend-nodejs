// Generated by CoffeeScript 1.6.3
var areChildNodesTextOnly, async, authorPosts, authors, baseUrl, categories, categoryPosts, datePosts, dates, filterEmptyChildren, fs, jsdom, mapElement, mergeSiblingTexts, post, processRequest, recentPosts, restructureElement, tagPosts, tags, transformPost, transformPostContent, utils, _;

fs = require("fs");

utils = require('../lib/utils');

_ = require('underscore')._;

jsdom = require('jsdom');

async = require('async');

baseUrl = "http://blog.xebia.fr";

processRequest = function(req, res, url, transform) {
  var options;
  res.charset = "UTF-8";
  options = utils.buildOptions(req, res, url, 5 * 60, transform);
  utils.processRequest(options);
};

authors = function(req, res) {
  return processRequest(req, res, "" + baseUrl + "/wp-json-api/get_author_index?count=250", function(data, cb) {
    delete data.status;
    _(data.authors).each(function(author) {
      author.firstname = author.first_name;
      delete author.first_name;
      author.lastname = author.last_name;
      delete author.last_name;
    });
    return cb(data);
  });
};

tags = function(req, res) {
  return processRequest(req, res, "" + baseUrl + "/wp-json-api/get_tag_index/?count=2000", function(data, cb) {
    delete data.status;
    _(data.tags).each(function(tag) {
      tag.postCount = tag.post_count;
      delete tag.post_count;
    });
    return cb(data);
  });
};

categories = function(req, res) {
  return processRequest(req, res, "" + baseUrl + "/wp-json-api/get_category_index?count=100", function(data, cb) {
    delete data.status;
    _(data.categories).each(function(category) {
      category.postCount = category.post_count;
      delete category.post_count;
    });
    return cb(data);
  });
};

dates = function(req, res) {
  return processRequest(req, res, "" + baseUrl + "/wp-json-api/get_date_index?count=1000", function(data, cb) {
    var key, value, _ref;
    delete data.status;
    delete data.permalinks;
    _ref = data.tree;
    for (key in _ref) {
      value = _ref[key];
      data[key] = value;
    }
    delete data.tree;
    return cb(data);
  });
};

post = function(req, res) {
  var postId;
  postId = req.params.id;
  return processRequest(req, res, "" + baseUrl + "/wp-json-api/get_post?post_id=" + postId, function(data, cb) {
    delete data.status;
    delete data.previous_url;
    delete data.next_url;
    return transformPost(data.post, function(err, post) {
      if (!err && post) {
        data.post = post;
      }
      return cb(err, data);
    });
  });
};

recentPosts = function(req, res) {
  return processRequest(req, res, "" + baseUrl + "/wp-json-api/get_recent_posts", function(data, cb) {
    delete data.status;
    data.total = data.count_total;
    delete data.count_total;
    return async.map(data.posts, transformPost, function(err, posts) {
      return cb(data);
    });
  });
};

authorPosts = function(req, res) {
  var authorId;
  authorId = req.params.id;
  return processRequest(req, res, "" + baseUrl + "/wp-json-api/get_author_posts?id=" + authorId, function(data, cb) {
    _(data.posts).each(function(post) {
      return transformPost(post);
    });
    return cb(data);
  });
};

tagPosts = function(req, res) {
  var tagId;
  tagId = req.params.id;
  return processRequest(req, res, "" + baseUrl + "/wp-json-api/get_tag_posts?id=" + tagId, function(data, cb) {
    _(data.posts).each(function(post) {
      return transformPost(post);
    });
    return cb(data);
  });
};

categoryPosts = function(req, res) {
  var categoryId;
  categoryId = req.params.id;
  return processRequest(req, res, "" + baseUrl + "/wp-json-api/get_category_posts?id=" + categoryId, function(data, cb) {
    _(data.posts).each(function(post) {
      return transformPost(post);
    });
    return cb(data);
  });
};

datePosts = function(req, res) {
  var month, year;
  year = req.params.year;
  month = req.params.month;
  return processRequest(req, res, "" + baseUrl + "/wp-json-api/get_date_posts_sync_data/?date=" + year + month + "$&count=1000");
};

transformPost = function(post, cb) {
  post.titlePlain = post.title_plain;
  delete post.title_plain;
  post.commentCount = post.comment_count;
  delete post.comment_count;
  post.commentStatus = post.comment_status;
  delete post.comment_status;
  delete post.title_plain;
  _(post.categories).each(function(category) {
    category.postCount = category.post_count;
    return delete category.post_count;
  });
  _(post.tags).each(function(tag) {
    tag.postCount = tag.post_count;
    return delete tag.post_count;
  });
  post.authors = [post.author];
  delete post.author;
  _(post.authors).each(function(author) {
    author.firstname = author.first_name;
    delete author.firstname;
    author.lastname = author.last_name;
    return delete author.last_name;
  });
  _(post.comments).each(function(author) {
    return delete author.parent;
  });
  return transformPostContent(post, cb);
};

transformPostContent = function(post, cb) {
  var components, firstname, gravatar, language, languages, lastname, match, matches, twitter, username, _i, _j, _len, _len1;
  matches = post.content.match(/\[author.*\]/g);
  console.log("Matches: " + matches);
  if (matches) {
    for (_i = 0, _len = matches.length; _i < _len; _i++) {
      match = matches[_i];
      components = /\[author.*twitter="(.*)".*username="(.*)".*urls="(.*)".*gravatar="(.*)".*lastname="(.*)".*firstname="(.*)".*\]/.exec(match);
      console.log("Components: " + components);
      twitter = components[1];
      username = components[2];
      gravatar = components[4];
      lastname = components[5];
      firstname = components[6];
      post.content = post.content.replace(match, "<author username=\"" + username + "\" firstname=\"" + firstname + "\" lastname=\"" + lastname + "\" gravatar=\"" + gravatar + "\" twitter=\"" + twitter + "\" />");
    }
  }
  languages = ["java"];
  for (_j = 0, _len1 = languages.length; _j < _len1; _j++) {
    language = languages[_j];
    post.content = post.content.replace(/\[java\]/g, "<code language=\"" + language + "\">");
    post.content = post.content.replace(/\[\/java\]/g, "</code>");
  }
  return jsdom.env({
    html: post.content,
    src: [],
    done: function(err, window) {
      var document;
      if (err) {
        return cb(err);
      } else {
        document = window.document.body;
        restructureElement(document);
        return async.map(document.childNodes, mapElement, function(err, children) {
          if (!err && children) {
            post.structuredContent = mergeSiblingTexts(filterEmptyChildren(children));
          }
          cb(err, post);
          return window.close();
        });
      }
    }
  });
};

restructureElement = function(element) {
  var child, children, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _results;
  children = [];
  _ref = element.childNodes;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    child = _ref[_i];
    children.push(child);
  }
  if ((_ref1 = element.tagName) === "A" || _ref1 === "LI" || _ref1 === "SPAN") {
    element.removeAttribute("class");
  }
  if (element.tagName === "DIV") {
    if (element.parentNode.tagName === "LI" && element.parentNode.childNodes.length === 1) {
      for (_j = 0, _len1 = children.length; _j < _len1; _j++) {
        child = children[_j];
        element.removeChild(child);
        element.parentNode.insertBefore(child, element);
      }
      element.parentNode.removeChild(element);
    }
  }
  _results = [];
  for (_k = 0, _len2 = children.length; _k < _len2; _k++) {
    child = children[_k];
    _results.push(restructureElement(child));
  }
  return _results;
};

mapElement = function(element, cb) {
  var image;
  if (element.nodeName === "#text") {
    return cb(void 0, {
      type: "#text",
      text: element.nodeValue
    });
  } else if (element.tagName === "IMG") {
    image = {
      type: "img",
      src: element.src,
      text: element.outerHTML
    };
    if (element.attributes.href) {
      image.href = element.attributes.href;
    }
    return cb(void 0, image);
  } else if (element.tagName === "AUTHOR") {
    return cb(void 0, {
      type: "author",
      username: element.attributes.username.value,
      firstname: element.attributes.firstname.value,
      lastname: element.attributes.lastname.value,
      gravatar: element.attributes.gravatar.value,
      twitter: element.attributes.twitter.value
    });
  } else if (element.tagName === "CODE") {
    return cb(void 0, {
      type: "code",
      language: element.attributes.language.value,
      text: element.innerHTML
    });
  } else if (element.tagName === "A") {
    if (areChildNodesTextOnly(element.childNodes)) {
      return cb(void 0, {
        type: "a",
        text: element.outerHTML
      });
    } else {
      return async.map(element.childNodes, mapElement, function(err, children) {
        return cb(void 0, {
          type: "a",
          children: mergeSiblingTexts(filterEmptyChildren(children))
        });
      });
    }
  } else if (element.tagName === "DIV") {
    if (areChildNodesTextOnly(element.childNodes)) {
      return cb(void 0, {
        type: "p",
        text: "<p>" + element.innerHTML + "</p>"
      });
    } else {
      return async.map(element.childNodes, mapElement, function(err, children) {
        return cb(void 0, {
          type: "div",
          children: mergeSiblingTexts(filterEmptyChildren(children))
        });
      });
    }
  } else if (element.tagName === "P") {
    if (areChildNodesTextOnly(element.childNodes)) {
      return cb(void 0, {
        type: "p",
        text: "<p>" + element.innerHTML + "</p>"
      });
    } else {
      return async.map(element.childNodes, mapElement, function(err, children) {
        return cb(void 0, {
          type: "p",
          children: mergeSiblingTexts(filterEmptyChildren(children))
        });
      });
    }
  } else if (element.tagName === "SPAN") {
    if (areChildNodesTextOnly(element.childNodes)) {
      return cb(void 0, {
        type: "span",
        ignore: element.innerHTML.trim().length === 0,
        text: element.outerHTML
      });
    } else {
      return async.map(element.childNodes, mapElement, function(err, children) {
        return cb(void 0, {
          type: "span",
          children: mergeSiblingTexts(filterEmptyChildren(children))
        });
      });
    }
  } else if (element.tagName === "EM") {
    if (areChildNodesTextOnly(element.childNodes)) {
      return cb(void 0, {
        type: "em",
        text: "<em>" + element.innerHTML + "</em>"
      });
    } else {
      return async.map(element.childNodes, mapElement, function(err, children) {
        return cb(void 0, {
          type: "em",
          children: mergeSiblingTexts(filterEmptyChildren(children))
        });
      });
    }
  } else if (element.tagName === "STRONG") {
    if (areChildNodesTextOnly(element.childNodes)) {
      return cb(void 0, {
        type: "em",
        text: "<em>" + element.innerHTML + "</em>"
      });
    } else {
      return async.map(element.childNodes, mapElement, function(err, children) {
        return cb(void 0, {
          type: "em",
          children: mergeSiblingTexts(filterEmptyChildren(children))
        });
      });
    }
  } else if (element.tagName === "H1") {
    return cb(void 0, {
      type: "h1",
      text: element.innerHTML
    });
  } else if (element.tagName === "H2") {
    return cb(void 0, {
      type: "h2",
      text: element.innerHTML
    });
  } else if (element.tagName === "H3") {
    return cb(void 0, {
      type: "h3",
      text: element.innerHTML
    });
  } else if (element.tagName === "H4") {
    return cb(void 0, {
      type: "h4",
      text: element.innerHTML
    });
  } else if (element.tagName === "H5") {
    return cb(void 0, {
      type: "h4",
      text: element.innerHTML
    });
  } else if (element.tagName === "H6") {
    return cb(void 0, {
      type: "h6",
      text: element.innerHTML
    });
  } else if (element.tagName === "UL") {
    if (areChildNodesTextOnly(element.childNodes)) {
      return cb(void 0, {
        type: "ul",
        text: "<ul>" + element.innerHTML + "</ul>"
      });
    } else {
      return async.map(element.childNodes, mapElement, function(err, children) {
        return cb(void 0, {
          type: "ul",
          children: mergeSiblingTexts(filterEmptyChildren(children))
        });
      });
    }
  } else if (element.tagName === "OL") {
    if (areChildNodesTextOnly(element.childNodes)) {
      return cb(void 0, {
        type: "ol",
        text: "<ol>" + element.innerHTML + "</ol>"
      });
    } else {
      return async.map(element.childNodes, mapElement, function(err, children) {
        return cb(void 0, {
          type: "ol",
          children: mergeSiblingTexts(filterEmptyChildren(children))
        });
      });
    }
  } else if (element.tagName === "LI") {
    if (areChildNodesTextOnly(element.childNodes)) {
      return cb(void 0, {
        type: "li",
        text: "<li>" + element.innerHTML + "</li>"
      });
    } else {
      return async.map(element.childNodes, mapElement, function(err, children) {
        return cb(void 0, {
          type: "li",
          children: mergeSiblingTexts(filterEmptyChildren(children))
        });
      });
    }
  } else {
    return cb(void 0, {
      type: element.tagName.toLowerCase(),
      text: element.innerHTML
    });
  }
};

mergeSiblingTexts = function(children) {
  var child, index, newChildren, text, _i, _len, _ref;
  newChildren = [];
  text = "";
  index = 0;
  for (_i = 0, _len = children.length; _i < _len; _i++) {
    child = children[_i];
    index++;
    if (!child.children && child.text && ((_ref = child.type) === "#text" || _ref === "p" || _ref === "span" || _ref === "em" || _ref === "a" || _ref === "ul" || _ref === "ol" || _ref === "li" || _ref === "strong" || _ref === "em")) {
      text = "" + text + child.text;
    } else {
      if (text.length > 0) {
        newChildren.push({
          type: "#text",
          text: text.trim()
        });
      }
      text = "";
      newChildren.push(child);
    }
  }
  if (text.length > 0) {
    newChildren.push({
      type: "#text",
      text: text
    });
  }
  return newChildren;
};

areChildNodesTextOnly = function(childNodes) {
  var childNode, _i, _len, _ref;
  if (!childNodes) {
    return true;
  }
  for (_i = 0, _len = childNodes.length; _i < _len; _i++) {
    childNode = childNodes[_i];
    if (((_ref = childNode.tagName) === "VIDEO" || _ref === "IMG" || _ref === "CODE") || !areChildNodesTextOnly(childNode.childNodes)) {
      return false;
    }
  }
  return true;
};

filterEmptyChildren = function(children) {
  return _(children).filter(function(child) {
    if (child.ignore) {
      return false;
    } else {
      return child.children || child.text === void 0 || child.text.trim().length > 0;
    }
  });
};

module.exports = {
  tags: tags,
  categories: categories,
  authors: authors,
  dates: dates,
  recentPosts: recentPosts,
  post: post,
  authorPosts: authorPosts,
  tagPosts: tagPosts,
  categoryPosts: categoryPosts,
  datePosts: datePosts
};

/*
//@ sourceMappingURL=wordpress.map
*/
