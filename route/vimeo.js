// Generated by CoffeeScript 1.6.3
var Cache, OAuth, apiHost, auth, callback, oauth, processRequest, util, utils, videos, _;

utils = require('../lib/utils');

_ = require('underscore')._;

OAuth = require('oauth');

util = require('util');

Cache = require('../lib/cache');

apiHost = 'http://vimeo.com/api/rest/v2';

processRequest = function(req, res, url, oauth, credentials, transform) {
  var options;
  options = {
    req: req,
    res: res,
    url: url,
    cacheKey: utils.getCacheKey(req),
    forceNoCache: utils.getIfUseCache(req),
    cacheTimeout: 60 * 60,
    callback: utils.responseData,
    transform: transform,
    oauth: oauth,
    credentials: credentials
  };
  return utils.processRequest(options);
};

oauth = new OAuth.OAuth('https://vimeo.com/oauth/request_token', 'https://vimeo.com/oauth/access_token', process.env["VIMEO_OAUTH_CONSUMER_KEY"], process.env["VIMEO_OAUTH_CONSUMER_SECRET"], '1.0', 'http://localhost:8000/api/vimeo/auth/callback', 'HMAC-SHA1');

auth = function(req, res) {
  return oauth.getOAuthRequestToken(function(error, oauthToken, oauthTokenSecret, results) {
    if (error) {
      console.error("login error %s", error);
      return utils.responseData(500, "Error getting OAuth request token : " + util.inspect(error), void 0, {
        req: req,
        res: res
      });
    } else {
      if (!req.session) {
        req.session = {};
      }
      req.session.oauthRequestToken = oauthToken;
      req.session.oauthRequestTokenSecret = oauthTokenSecret;
      return res.redirect("http://vimeo.com/oauth/authorize?oauth_token=" + req.session.oauthRequestToken + "&permission=read");
    }
  });
};

callback = function(req, res) {
  var oauthToken, oauthTokenSecret;
  oauthToken = req.session.oauthRequestToken;
  oauthTokenSecret = req.session.oauthRequestTokenSecret;
  delete req.session.oauthRequestToken;
  delete req.session.oauthRequestTokenSecret;
  return oauth.getOAuthAccessToken(oauthToken, oauthTokenSecret, req.query.oauth_verifier, function(err, oauthAccessToken, oauthAccessTokenSecret, results) {
    if (err) {
      return utils.responseData(500, "Error getting OAuth request token : " + util.inspect(err), void 0, {
        req: req,
        res: res
      });
    } else {
      return Cache.set('vimeo.crendentials', {
        accessToken: oauthAccessToken,
        accessTokenSecret: oauthAccessTokenSecret
      }, -1, function(err) {
        if (err) {
          return utils.responseData(500, "Error getting OAuth request token : " + util.inspect(err), void 0, {
            req: req,
            res: res
          });
        } else {
          res.redirect("/");
          return console.info("Redirected to '/'");
        }
      });
    }
  });
};

videos = function(req, res) {
  var url;
  url = "" + apiHost + "?method=vimeo.videos.getAll&user_id=xebia&sort=newest&page=1&per_page=50&summary_response=true&full_response=false&format=json";
  return Cache.get('vimeo.crendentials', function(err, credentials) {
    if (err) {
      return utils.responseData(500, "Error getting OAuth request data : " + util.inspect(err), void 0, {
        req: req,
        res: res
      });
    } else if (!credentials) {
      return utils.responseData(500, "Error No Credentials stored", void 0, {
        req: req,
        res: res
      });
    } else {
      return processRequest(req, res, url, oauth, credentials, function(data) {
        return data;
      });
    }
  });
};

module.exports = {
  auth: auth,
  callback: callback,
  videos: videos
};
