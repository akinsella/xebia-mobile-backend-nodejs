// Generated by CoffeeScript 1.6.3
var Cache, OAuth, Video, apiHost, async, auth, callback, oauth, processRequest, processRequestOAuth, request, util, utils, video, videoUrls, videos, _;

utils = require('../lib/utils');

_ = require('underscore')._;

OAuth = require('oauth');

util = require('util');

Cache = require('../lib/cache');

async = require('async');

request = require('request');

Video = require('../model/video');

apiHost = 'http://vimeo.com/api/rest/v2';

processRequestOAuth = function(req, res, url, oauth, credentials, transform) {
  var options;
  options = {
    req: req,
    res: res,
    url: url,
    cacheKey: utils.getCacheKey(req),
    forceNoCache: utils.getIfUseCache(req),
    cacheTimeout: 60 * 5,
    callback: utils.responseData,
    transform: transform,
    oauth: oauth,
    credentials: credentials
  };
  return utils.processRequest(options);
};

processRequest = function(req, res, url, transform) {
  var options;
  options = utils.buildOptions(req, res, url, 5 * 60, transform);
  return utils.processRequest(options);
};

oauth = new OAuth.OAuth('https://vimeo.com/oauth/request_token', 'https://vimeo.com/oauth/access_token', process.env["VIMEO_OAUTH_CONSUMER_KEY"], process.env["VIMEO_OAUTH_CONSUMER_SECRET"], '1.0', process.env["VIMEO_OAUTH_CALLBACK"], 'HMAC-SHA1');

auth = function(req, res) {
  return oauth.getOAuthRequestToken(function(error, oauthToken, oauthTokenSecret, results) {
    if (error) {
      console.error("login error %s", error);
      return utils.responseData(500, "Error getting OAuth request token : " + util.inspect(error), void 0, {
        req: req,
        res: res
      });
    } else {
      if (!req.session) {
        req.session = {};
      }
      req.session.oauthRequestToken = oauthToken;
      req.session.oauthRequestTokenSecret = oauthTokenSecret;
      return res.redirect("http://vimeo.com/oauth/authorize?oauth_token=" + req.session.oauthRequestToken + "&permission=read");
    }
  });
};

callback = function(req, res) {
  var oauthToken, oauthTokenSecret;
  oauthToken = req.session.oauthRequestToken;
  oauthTokenSecret = req.session.oauthRequestTokenSecret;
  delete req.session.oauthRequestToken;
  delete req.session.oauthRequestTokenSecret;
  return oauth.getOAuthAccessToken(oauthToken, oauthTokenSecret, req.query.oauth_verifier, function(err, oauthAccessToken, oauthAccessTokenSecret, results) {
    if (err) {
      return utils.responseData(500, "Error getting OAuth request token : " + util.inspect(err), void 0, {
        req: req,
        res: res
      });
    } else {
      return Cache.set('vimeo.crendentials', {
        accessToken: oauthAccessToken,
        accessTokenSecret: oauthAccessTokenSecret
      }, -1, function(err) {
        if (err) {
          return utils.responseData(500, "Error getting OAuth request token : " + util.inspect(err), void 0, {
            req: req,
            res: res
          });
        } else {
          res.redirect("/");
          return console.info("Redirected to '/'");
        }
      });
    }
  });
};

videos = function(req, res) {
  return Video.find({}).sort("-uploadDate").exec(function(err, videos) {
    if (err) {
      return res.json(500, {
        message: "Server error: " + err.message
      });
    } else {
      videos = videos.map(function(video) {
        video = video.toObject();
        delete video._id;
        delete video.__v;
        video.thumbnails.forEach(function(thumbnail) {
          return delete thumbnail._id;
        });
        return video;
      });
      return res.json(videos);
    }
  });
};

video = function(req, res) {
  var videoId;
  videoId = req.params.id;
  return Video.findOne({
    id: videoId
  }, function(err, video) {
    if (err) {
      return res.json(500, {
        message: "Server error: " + err.message
      });
    } else if (!video) {
      return res.json(404, "Not Found");
    } else {
      video = video.toObject();
      delete video._id;
      delete video.__v;
      video.thumbnails.forEach(function(thumbnail) {
        return delete thumbnail._id;
      });
      return res.json(video);
    }
  });
};

videoUrls = function(req, res) {
  var videoConfigUrl, videoId;
  videoId = req.params.id;
  videoConfigUrl = "http://player.vimeo.com/v2/video/" + videoId + "/config";
  console.log("Fetching url: " + videoConfigUrl);
  return request.get({
    url: videoConfigUrl,
    json: true
  }, function(error, data, response) {
    var key, value, videoUrl, _ref;
    videoUrls = _(response.request.files.codecs.map(function(codec) {
      var key, value, _ref, _results;
      _ref = response.request.files[codec];
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        value["type"] = key;
        value["codec"] = codec;
        _results.push(value);
      }
      return _results;
    })).flatten();
    _ref = response.request.files.hls;
    for (key in _ref) {
      value = _ref[key];
      videoUrl = {
        url: value,
        type: key,
        codec: "hls",
        height: 0,
        width: 0,
        bitrate: 0,
        id: 0
      };
      videoUrls.push(videoUrl);
    }
    _(videoUrls).each(function(video) {
      delete video.profile;
      delete video.origin;
      return delete video.availability;
    });
    return res.json(videoUrls);
  });
};

module.exports = {
  auth: auth,
  callback: callback,
  videos: videos,
  video: video,
  videoUrls: videoUrls
};

/*
//@ sourceMappingURL=vimeo.map
*/
