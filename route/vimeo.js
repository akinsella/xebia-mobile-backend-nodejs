// Generated by CoffeeScript 1.6.3
var Cache, OAuth, Video, async, request, util, utils, video, videoUrls, videos, _;

util = require('util');

async = require('async');

request = require('request');

OAuth = require('oauth');

_ = require('underscore')._;

Cache = require('../lib/cache');

utils = require('../lib/utils');

Video = require('../model/video');

videos = function(req, res) {
  return Video.find({}).sort("-uploadDate").exec(function(err, videos) {
    if (err) {
      return res.json(500, {
        message: "Server error: " + err.message
      });
    } else {
      videos = videos.map(function(video) {
        video = video.toObject();
        delete video._id;
        delete video.__v;
        video.thumbnails.forEach(function(thumbnail) {
          return delete thumbnail._id;
        });
        return video;
      });
      return res.json(videos);
    }
  });
};

video = function(req, res) {
  var videoId;
  videoId = req.params.id;
  return Video.findOne({
    id: videoId
  }, function(err, video) {
    if (err) {
      return res.json(500, {
        message: "Server error: " + err.message
      });
    } else if (!video) {
      return res.json(404, "Not Found");
    } else {
      video = video.toObject();
      delete video._id;
      delete video.__v;
      video.thumbnails.forEach(function(thumbnail) {
        return delete thumbnail._id;
      });
      return res.json(video);
    }
  });
};

videoUrls = function(req, res) {
  var videoConfigUrl, videoId;
  videoId = req.params.id;
  videoConfigUrl = "http://player.vimeo.com/v2/video/" + videoId + "/config";
  console.log("Fetching url: " + videoConfigUrl);
  return request.get({
    url: videoConfigUrl,
    json: true
  }, function(error, data, response) {
    var key, value, videoUrl, _ref;
    videoUrls = _(response.request.files.codecs.map(function(codec) {
      var key, value, _ref, _results;
      _ref = response.request.files[codec];
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        value["type"] = key;
        value["codec"] = codec;
        _results.push(value);
      }
      return _results;
    })).flatten();
    _ref = response.request.files.hls;
    for (key in _ref) {
      value = _ref[key];
      videoUrl = {
        url: value,
        type: key,
        codec: "hls",
        height: 0,
        width: 0,
        bitrate: 0,
        id: 0
      };
      videoUrls.push(videoUrl);
    }
    _(videoUrls).each(function(video) {
      delete video.profile;
      delete video.origin;
      return delete video.availability;
    });
    return res.json(videoUrls);
  });
};

module.exports = {
  videos: videos,
  video: video,
  videoUrls: videoUrls
};

/*
//@ sourceMappingURL=vimeo.map
*/
