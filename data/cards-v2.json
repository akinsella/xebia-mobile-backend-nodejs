{
	"cards": [
		{
			"title": "APIs, like diamonds, are forever",
			"url": "http://essentials.xebia.com/apis-are-forever",
			"description": "",
			"category": {
				"id": "realisation",
				"color": "#107FD5",
				"backgroundColor": "#0e65a8",
				"label": "Realisation"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "realisation"
				}
			],
			"id": "apis-are-forever",
			"fullContent": "<h3>Motivation</h3>\n<p>You want to be careful crafting your API. If you don't, then you might end up with something that hurt you forever. It's not hard to come up with examples of bad API design. Java's XML processing libraries are notoriously awkward to use. Things that should be simple require tons of boilerplate code.</p>\n<p>Joshua Bloch presented his ideas on API design in a talk named 'How to Design a Good API and Why it Matters' at OOPSLA 2006. It comprises a set of criteria that are fairly easy to remember, as they are all small enough to fit on a bumper sticker:</p>\n<ul>\n<li>All programmers are API designers</li>\n<li>APIs can be among your greatest assets or liabilities</li>\n<li>Public APIs, like diamonds, are forever</li>\n<li>APIs should be easy to use and hard to misuse</li>\n<li>APIs should be self-documenting</li>\n<li>When designing an API, first gather requirements - with a healthy degree of skepticism</li>\n<li>Structure requirements as use-cases</li>\n<li>Early drafts of APIs should be short</li>\n<li>Code the use-cases against your API before you implement it</li>\n<li>Maintain the code for use-cases as the API evolves</li>\n<li>Example code should be exemplary</li>\n<li>You can't please everyone so aim to displease everyone equally</li>\n<li>Expect API-design mistakes due to failures of your imagination</li>\n<li>API design is not a solitary activity</li>\n<li>Avoid fixed limits on input sizes</li>\n<li>Names matter</li>\n<li>If it's hard to find good names, go back to the drawing board</li>\n<li>When in doubt leave it out</li>\n<li>Keep APIs free of implementation details</li>\n<li>Minimize mutability</li>\n<li>Documentation matters</li>\n<li>Consider the performance of consequences of an API design decisions, but don't warp an API to achieve performance gains</li>\n<li>When in Rome, do as the Romans do</li>\n<li>Minimize accessibility</li>\n<li>Subclass only if you can say with a straight face that every instance of the subclass is an instance of the superclass</li>\n<li>Design and document for inheritance or else prohibit it</li>\n<li>Don't make the client do anything the library could do</li>\n<li>Obey the principle of the last astonishment</li>\n<li>Fail fast</li>\n<li>Provide programmatic access to all data available in string form</li>\n<li>Overload with care</li>\n<li>Use the right data type for the job</li>\n<li>Use consistent parameter ordering across methods</li>\n<li>Avoid long parameter names</li>\n<li>Avoid return values that demand exceptional processing</li>\n<li>Throw exceptions only to indicate exceptional conditions</li>\n<li>Throw unchecked exceptions unless clients can realistically recover from the failure</li>\n<li>API design is an art, not a science</li>\n</ul>\n<h3>Applicability</h3>\n<p>Always.</p>\n<h3>Application</h3>\n<ul>\n<li>Use it while designing the API</li>\n<li>Use it while coding</li>\n<li>Use it while reviewing code</li>\n<li>Use it while pair programming</li>\n</ul>\n<p>It might be good idea to read the list before you go off to design something significant, or always have a printed version of the list close to where you are.</p>\n<h3>Consequences</h3>\n<p>The only negative consequence I can imagine related to trying to follow the guidelines given by Josh are - perhaps - analysis paralysis. Pair programming will prevent that. In fact, just by pair programming and have your buddy remind you of API design bumper stickers, you might have all the benefits without the chance of analysis paralysis.</p>\n<p>Now, some people might argue that following these standards doesn't address a particular business value for the customer, but then I disagree. It is your responsibility as a programmer to create good code. Don't be tempted to create something messy just because you are in a hurry. Chances are that - if you work like that - it will bite back and result in major head aches when you need to overhaul your code later on.</p>\n<p>In order to avoid any discussions on taking the time to work according the guidelines given above, consider making it part of your definition of done, and make sure everybody agrees on that.</p>\n<h3>Samples</h3>\n<p>Less than great API design samples, often serving in examples in Joshua Bloch's talk: JAXP</p>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://www.infoq.com/articles/API-Design-Joshua-Bloch\">InfoQ Article</a></li>\n<li><a href=\"http://www.infoq.com/presentations/effective-api-design\">Video recorded at JavaPolis</a></li>\n<li><a href=\"code-review\">code-review</a></li>\n<li><a href=\"comment-with-care\">comment-with-care</a></li>\n</ul>"
		},
		{
			"title": "Aim for thread safety",
			"url": "http://essentials.xebia.com/thread-safe",
			"description": "",
			"category": {
				"id": "realisation",
				"color": "#107FD5",
				"backgroundColor": "#0e65a8",
				"label": "Realisation"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "realisation"
				}
			],
			"id": "thread-safe",
			"fullContent": "<h3>Motivation</h3>\n<p>When your code should be thread safe but isn't, you will find out too late at an inconvenient time. This can lead to embarrassing situations where you need to fix a hard problem under high pressure. Not good. If you apply these simple rules you will avoid this.</p>\n<h3>Applicability</h3>\n<p>Whenever you use objects in multiple threads they must be thread safe. This can go for services that are shared, but also for value objects that are passed along.</p>\n<h3>Application</h3>\n<p>The only risk of thread unsafe code is that state is not appropriately shared, so all the rules apply to state.</p>\n<p>The first rule applies to services. If an object simply doesn't hold any state it is always thread safe. Virtually all applications must hold state to be useful. In particular services need to collaborate with other services. The rules are bent usually, when people say \"stateless service\" they usually mean \"services that don't hold any state, but the immutable references to other services\".</p>\n<p>Immutable objects are usually the objects passed around in an application. If the state in an object cannot be changed after creation, there is no risk of one client seeing a different state than another. Creating an object as being immutable should be the default choice. Anything that mutates state is potentially dangerous.</p>\n<p>Encapsulated locks is the last resort. If an object has to be changed during its lifetime, this is the only way to ensure thread safety. Locking on the object itself is also thread safe, but it can cause unwanted locking and even deadlocks if others are locking on it too.</p>\n<p>Non thread safe code is not a problem in many situations. As long as objects are not shared with multiple threads, making them thread safe is adding complexity that is not needed. Many web applications are built around non thread safe domains, and this is not a problem. Be sure to make it clear that code is not thread safe and will not be used out of the safe context it is supposed to be used in.</p>\n<h3>References</h3>\n<p>Brian Goetz: Java Concurrency in Practice</p>"
		},
		{
			"title": "Alone time",
			"url": "http://essentials.xebia.com/alone-time",
			"description": "",
			"category": {
				"id": "collaboration",
				"color": "#FC7A25",
				"backgroundColor": "#cd631e",
				"label": "Collaboration"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "collaboration"
				}
			],
			"id": "alone-time",
			"fullContent": "<p>For some situations pair programming is not effective. Be prepared to allow yourself and your team members to have some time alone.</p>\n<h3>Motivation</h3>\n<p>Even though we love pair programming, we can't expect anyone to constantly think out loud. When some seriously deep thinking needs to happen, or you just need to fiddle with something to find the right questions to ask; pair programming can block you. For these situations and just to keep the joy of solving a puzzle in isolation in the work alone time is great.</p>\n<h3>Applicability</h3>\n<p>Any work on a problem that is not resulting in production code might be a candidate for some alone time. In particular when you get into a situation as a pair that you're both looking at the other guy for ideas it might be time to split up, scour the internet fret with some ideas and reconvene when you've found some clues. Doing nothing is also a very important part of creative work. Alone time might be needed even if there is no work that deserves being done by someone on their own.</p>\n<h3>Application</h3>\n<p>Timebox alone time. Make a date with a pair buddy before you go off on what might very well be a wild goose chase. Then when the timebox is over assess the situation with someone else. The harder the problem is, the harder it will be initially to get somewhere. Sometimes great ideas come to you while you're ironing your shirt or making a sandwich. Sometimes staring out of a window for a couple of hours is the most productive thing you can do. Setting up rules for how people should spend alone time defeats the purpose.</p>\n<h3>Consequences</h3>\n<p>Enforced pairing should not be for 100% of the time. Alone time gives the brain time to recharge and ideas time to react with each other. All production code should be written in pairs. It follows that we must not plan people to work in pairs on production code 40 hours a week. 100% efficiency is unhealthy in creative teams.</p>\n<h3>References</h3>\n<p> <a href=\"pair-programming\">pair-programming</a></p>\n<p> <a href=\"the-zone\">the-zone</a></p>\n<p> <a href=\"no-multitasking\">no-multitasking</a></p>"
		},
		{
			"title": "Assert against improper behaviour",
			"url": "http://essentials.xebia.com/assertions",
			"description": "",
			"category": {
				"id": "realisation",
				"color": "#107FD5",
				"backgroundColor": "#0e65a8",
				"label": "Realisation"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "realisation"
				}
			],
			"id": "assertions",
			"fullContent": "<h3>Motivation</h3>\n<p>Ideally, the compiler would be able to verify all of your assumptions. In reality, they can't. Next question is if you would be able to write tests for all of those situations. After all, that's what you normally do for all circumstances in which the compiler is not helping. In reality, that doesn't work out either. The combinatorial explosion of states your modules might go into is just overwhelming.</p>\n<p>This is where assertions come to the rescue. Assertions allow you to validate pre- and postconditions and can help you to assure your invariants hold. Putting in assertions will make sure your code fails early before causing anymore damage. It also works as a mental flag.</p>\n<ul>\n<li>You think you're sure something will never happen =&gt;</li>\n<li>The rule tells you to put an assertion in =&gt;</li>\n<li>You start to consider if your assumption actually holds in all circumstances =&gt;</li>\n<li>You might alter your code based on the conclusion =&gt;</li>\n<li>You put in an assertion</li>\n</ul>\n<h3>Applicability</h3>\n<p>Always. Don't go overboard and assert everything though. As I said, one of the most important reasons for having assertions is to train your consciousness to find the conditions in which your assumptions no longer hold.</p>\n<h3>Application</h3>\n<p>There are a couple of flavors for doing assertions in Java out there.</p>\n<p>Java keyword:</p>\n<pre><code>assert (x &gt; 3);\n</code></pre>\n<p>Disadvantage: they get disabled by default.</p>\n<p>Spring Assert class:</p>\n<pre><code>Assert.isTrue(x &gt; 3);\n</code></pre>\n<p>Disadvantage: no isolated jar; you pull in a significant number of classes.</p>\n<p>Guava <a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/base/Preconditions.html\">Preconditions</a> class:</p>\n<pre><code>Preconditions.checkArgument(x &gt; 3)\n</code></pre>\n<h3>Consequences</h3>\n<p>If you put in assertions, then your code will fail if the assertions are violated. Don't try to catch these exceptions. If you are catching AssertionErrors, then you probably misused assertions for some other purpose.</p>\n<h3>References</h3>\n<ol>\n<li><em>Programming Defensively</em> Interview with Andy Hunt and Dave Thomas, <a href=\"http://www.artima.com/intv/defense.html\">http://www.artima.com/intv/defense.html</a></li>\n</ol>"
		},
		{
			"title": "Automate the entire release and deployment process.",
			"url": "http://essentials.xebia.com/automate-everything",
			"description": "",
			"category": {
				"id": "realisation",
				"color": "#107FD5",
				"backgroundColor": "#0e65a8",
				"label": "Realisation"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "realisation"
				}
			],
			"id": "automate-everything",
			"fullContent": "<h3>Motivation</h3>\n<p>Software release and deployment processes are often riddled with manual steps and hand offs. This makes the release process slow, error prone and expensive.</p>\n<h3>Applicability</h3>\n<p>Whenever there are manual processing steps or hand-offs involved in your release and deployment process, you should automate it.</p>\n<h3>Application</h3>\n<ul>\n<li>automate the build process with CI servers like Jenkins or Bamboo</li>\n<li>automate the deployment process with Application Release Automation products like Deployit</li>\n<li>automate the acceptance testing with products like Jbehave and Cucumber</li>\n<li>automate the system integration tests with Fitnesse and Selenium</li>\n<li>automate the installation and configuration of machines and middleware with products like Puppet and Chef.</li>\n</ul>\n<h3>Consequences</h3>\n<p>Once your software delivery process is automated, you will be able to deploy new versions of your application faster, more frequently with less errors and man power.</p>"
		},
		{
			"title": "Be curious",
			"url": "http://essentials.xebia.com/curiosity",
			"description": "",
			"category": {
				"id": "craftsmanship",
				"color": "#F80068",
				"backgroundColor": "#be0351",
				"label": "Craftsmanship"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "craftsmanship"
				}
			],
			"id": "curiosity",
			"fullContent": "<h3>Motivation</h3>\n<p>Four reasons why curiosity is important:</p>\n<p>It makes your mind active instead of passive\nCurious people always ask questions and search for answers in their minds. Their minds are always active. Since the mind is like a muscle which becomes stronger through continual exercise, the mental exercise caused by curiosity makes your mind stronger and stronger.</p>\n<p>It makes your mind observant of new ideas\nWhen you are curious about something, your mind expects and anticipates new ideas related to it. When the ideas come they will soon be recognized. Without curiosity, the ideas may pass right in front of you and yet you miss them because your mind is not prepared to recognize them. Just think, how many great ideas may have lost due to lack of curiosity?</p>\n<p>It opens up new worlds and possibilities\nBy being curious you will be able to see new worlds and possibilities which are normally not visible. They are hidden behind the surface of normal life, and it takes a curious mind to look beneath the surface and discover these new worlds and possibilities.</p>\n<p>It brings excitement into your life\nThe life of curious people is far from boring. It's neither dull nor routine. There are always new things that attract their attention, there are always new 'toys' to play with. Instead of being bored, curious people have an adventurous life.</p>\n<h3>Applicability</h3>\n<p>Applies to every aspect of your work.</p>\n<h3>Application</h3>\n<p><em>1. Keep an open mind</em></p>\n<p>This is essential if you are to have a curious mind. Be open to learn, unlearn, and relearn. Some things you know and believe might be wrong, and you should be prepared to accept this possibility and change your mind.</p>\n<p><em>2. Don't take things as granted</em></p>\n<p>If you just accept the world as it is without trying to dig deeper, you will certainly lose the 'holy curiosity'. Never take things as granted. Try to dig deeper beneath the surface of what is around you.</p>\n<p><em>3. Ask questions relentlessly</em></p>\n<p>A sure way to dig deeper beneath the surface is asking questions: What is that? Why is it made that way? When was it made? Who invented it? Where does it come from? How does it work?What, why when who where and how are the best friends of curious people.</p>\n<p><em>4. Don't label something as boring</em></p>\n<p>Whenever you label something as boring, you close one more door of possibilities. Curious people are unlikely to call something as boring. Instead, they always see it as a door to an exciting new world. Even if they don't yet have time to explore it, they will leave the door open to be visited another time.</p>\n<p><em>5. See learning as something fun</em></p>\n<p>If you see learning as a burden, there's no way you will want to dig deeper into anything. That will just make the burden heavier. But if you think of learning as something fun, you will naturally want to dig deeper. So look at life through the glasses of fun and excitement and enjoy the learning process..</p>\n<p><em>6. Read diverse kinds of reading</em></p>\n<p>Don't spend too much time on just one world; take a look at another worlds. It will introduce you to the possibilities and excitement of the other worlds which may spark your interest to explore them further. One easy way to do this is through reading diverse kinds of reading. Try to pick a book or magazine on a new subject and let it feed your mind with the excitement of a new world.</p>\n<p>Make sure curiosity is not making you lose focus. Also be aware that some things simply are not your business. Don't confuse curiosity with nosiness.</p>\n<h3>Consequences</h3>\n<p>Curiosity feeds creativity and inspiration. It makes you a better problem solver. It stops you from becoming a one-trick pony.</p>\n<h3>References</h3>\n<ol>\n<li>4 Reasons Why Curiosity is Important, Donald Latumahina, <a href=\"http://www.lifehack.org/articles/productivity/4-reasons-why-curiosity-is-important-and-how-to-develop-it.html\">http://www.lifehack.org/articles/productivity/4-reasons-why-curiosity-is-important-and-how-to-develop-it.html</a></li>\n</ol>"
		},
		{
			"title": "Beware of anemic domain models",
			"url": "http://essentials.xebia.com/no-anemic-domain-model",
			"description": "",
			"category": {
				"id": "realisation",
				"color": "#107FD5",
				"backgroundColor": "#0e65a8",
				"label": "Realisation"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "realisation"
				}
			],
			"id": "no-anemic-domain-model",
			"fullContent": "<p>In <strong>Object Oriented Programming</strong>, an Anemic Domain Model is a program design consisting of data classes without any behaviour and procedural of \"service\" classes to manipulate them. These systems tend to spawn utility classes full of static methods in an effort to <a href=\"dry-principle\">fight code duplication</a>. As the number of utility functions increases, developers lose track and the utilities themselves start to get duplicated. The result is a system that's not cohesive and <a href=\"maximize-cohesion-minimize-coupling\">tightly coupled</a>. Overall, the high level design appears to be pretty clear, but the source code design tends to get messy. Most simply put, these systems suffer the extra complexity of using an Object Oriented programming language, without reaping any of the benefits.</p>\n<p>It must be noted that \"structs and procedures\" is itself a perfectly valid software design. It's just not a very good fit for Object Oriented programming languages.</p>\n<p>One of the core ideas of the Object Oriented model is to bring code and data together. <a href=\"http://en.wikipedia.org/wiki/Domain-driven_design\">Domain-Driven Design</a> (a technique described by Eric Evans in <a href=\"http://www.bol.com/nl/p/domain-driven-design/1001004001984629\">a book</a> of the same name) is a technique that fully embraces this idea. Systems modeled in this way naturally follow the SOLID principles and naturally avoid code duplication. They make the most of the object oriented model.</p>\n<p>There's a middle ground between the two, where an anemic domain model system is improved by bringing some of the behaviour into the domain model. The easiest place to begin is all those utility functions, starting with simple things like validations and formatting rules. Taking these out of the utility classes and pushing them into the model classes makes them easier to find (avoiding accidental duplication) and improves code cohesion. This approach can be a good fit for request processing systems, such as web apps, where embracing a full object oriented domain model might make things harder to parallelize.</p>"
		},
		{
			"title": "Brutal Transparency",
			"url": "http://essentials.xebia.com/brutal-transparency",
			"description": "",
			"category": {
				"id": "collaboration",
				"color": "#FC7A25",
				"backgroundColor": "#cd631e",
				"label": "Collaboration"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "collaboration"
				}
			],
			"id": "brutal-transparency",
			"fullContent": "<p>The only way to build trust is to be honest and transparent under all circumstances.</p>"
		},
		{
			"title": "Comment with care",
			"url": "http://essentials.xebia.com/comment-with-care",
			"description": "",
			"category": {
				"id": "craftsmanship",
				"color": "#F80068",
				"backgroundColor": "#be0351",
				"label": "Craftsmanship"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "craftsmanship"
				}
			],
			"id": "comment-with-care",
			"fullContent": "<h3>Motivation</h3>\n<p>Getting the comments right is as hard (and important) as getting the source code right. Having too many comments in a file can be as detrimental to maintainability as having too few [citation needed], comments can be useless and the worst are incorrect or misleading.</p>\n<p>Source code comments can assert intellectual property ownership and licensing terms.</p>\n<h3>Applicability</h3>\n<p>Every modern programming language I'm aware of supports source code comments.</p>\n<h3>Application</h3>\n<ul>\n<li>In an object-oriented language such as Java 1, it's fair to demand a type-level JavaDoc header that describes the intent and responsibility of the class or interface on every public or protected type.</li>\n<li>On APIs intended for use by others, every public method should be appropriately documented.</li>\n<li>Use the standard documentation system for the platform. In Python, that's doc strings. In Java, that's JavaDoc. The standard documentation system is not only familiar to humans, most IDEs and some editors know how to read it too. As obvious as this may seem, I once had the displeasure of using a closed-source API documented using a proprietary HTML layout not in any way resembling standard JavaDoc 2. It was painful.</li>\n</ul>\n<p>Guidelines aside, whenever you find yourself wondering: \"I wonder whether this'll make sense to me later\", you know it's time for a comment. Ensure the comment contains information that cannot be obtained by simply reading the code itself.</p>\n<p>Beware if inline comments, though! Most of the time when you find yourself adding comments to a particular line of code, it's time to move that code to it's own function or method and provide that with a descriptive name.</p>\n<h3>Consequences</h3>\n<p>Effective use of source code comments improves the maintainability of program code. Coming back to your or someone else's code to add a feature or carry out a fix will take a matter of minutes or hours, rather than days or weeks.</p>\n<h3>Samples</h3>\n<h1>Don't document bad code - rewrite it.</h1>\n<p>The <a href=\"http://en.wikipedia.org/wiki/Comment_%28computer_programming%29\">Wikipedia article on commenting</a> ascribes this aphorism to The Elements of Programming Style [3]. It's a good general guideline, but it may not always be feasible, especially in maintenance projects.</p>\n<h1>Don't repeat the code - clarify its intent.</h1>\n<p>Code Complete [1] illustrates this with a nice example. Which is more clarifying?</p>\n<pre><code>// If account flag is zero\nif (accountFlag == 0) ...\n</code></pre>\n<p>or</p>\n<pre><code>// If establishing a new account\nif (accountFlag == 0) ...\n</code></pre>\n<p>Maybe the intent can be clarified just as much without a comment:</p>\n<pre><code>if (establishNewAccount()) ...\nprivate boolean establishNewAccount() { return accountFlag == 0;\n}\n</code></pre>\n<h1>Document surprises and workarounds.</h1>\n<p>\"Surprises and workarounds\" is deliberately vague, as it's very hard to qualify. A common scenario is that you add a special case in a method to fix a bug or when you find out that a library behaves differently than you thought it would because it bites you during testing.</p>\n<p>An example of this is when I found out that a Java 1.5 ThreadPoolExecutor with a corePoolSize of 0, a maxPoolSize of 50 and an unbounded task queue does not idle at 0 threads and execute at 50, but rather, starts 0 threads and executes nothing at all. When I dug into this, I found out that Java 1.5 has no way to make a ThreadPoolExecutor idle at 0 threads (Java 1.6 does) and that in both versions maxPoolSize is meaningless with an unbounded queue. I put a short note above the variable declaration to benefit any maintenance programmer that needs to adjust the pool sizes.</p>\n<p>A special case of this is where source code analysis tools report a false positive. The flagship example of this is the <a href=\"http://digitaloffense.net/tools/debian-openssl/\">Debian OpenSSL</a> fiasco of a few years back. The random number generator contained what appears to be bad use of uninitialized memory (and was reported as such by code analysis tools), but which was essential to seeding the random number generator. Someone removed the line in a clean-up effort and the result was two years' worth of SSL certificates each of which could be brute-forced in at most 32768 attempts.</p>\n<h1>Make every comment count.</h1>\n<p>Excessive comments are just clutter.</p>\n<h1>Good: The java.util.concurrent package</h1>\n<p>The JavaDoc comments in the java.util.concurrent package are outstanding. They're short and to the point where possible, meticulously detailed where required.</p>\n<h1>Bad: Eclipse getters and setters</h1>\n<p>Eclipse's default template for the JavaDoc comment on getters and setters is horrible.</p>\n<pre><code>/** * @param foo the foo to set */\npublic void setFoo(String foo) { this.foo = foo\n};\n/** * @return the foo */\npublic String getFoo() { return foo\n};\n</code></pre>\n<p>These comments are grammatically ugly. Worse, the comments don't add any value: we know what a getter or setter does and if a method does something else it shouldn't masquerade as a getter or setter in the first place. Don't generate comments using this template, just leave them out.</p>\n<p>If your architect/analysis tool/spouse won't let you get away with undocumented getters and setters, at least replace the template by something grammatically correct.</p>\n<h1>Good: Unit, bounds, resolution, precision</h1>\n<p>When dealing with measurements and amounts, make sure the unit, resolution and bounds are apparent. It's often possible and desirable to make this information programmatically available, such as with java.util.Currency or JSR-275. Failing that, you can resort to code comments such as in the next example.</p>\n<pre><code>&lt;xsd:element name=\"admission\" type=\"xsd:dateTime\"&gt; &lt;xsd:annotation&gt; &lt;xsd:documentation&gt; The date and time of admission. Precision is in minutes, the seconds are always 00. UTC offset is not included, all values are in the Europe/Amsterdam time zone. &lt;/xsd:documentation&gt; &lt;/xsd:annotation&gt;\n&lt;/xsd:element&gt;\n</code></pre>\n<p>The xsd:dateTime has a resolution in seconds (optionally milliseconds) and an optional UTC offset. The UTC offset is required to unambiguously pinpoint a calendar date and time on the time continuum. If the actual offset is unavailable, a time zone is the next best thing. The fact that we\"re using an xsd:dateTime instead of an xsd:string has documentary value in and of itself.</p>\n<h3>References</h3>\n<ol>\n<li>Code Complete (Steve McConnell, Microsoft Press), pages 777-817.</li>\n<li>The Pragmatic Programmer (Hunt/Thomas, Addison Wesley), page 249-251.</li>\n<li>The Elements of Programming Style (Kernighan/Plauger, Mcgraw-Hill)</li>\n</ol>\n<h3>Footnotes</h3>\n<ol>\n<li>Some argue Java isn't an object oriented language. It's close enough for the purposes of this article.</li>\n<li>I'm looking at you, TIBCO iProcess Server Objects Java.</li>\n</ol>"
		},
		{
			"title": "Dare to say no",
			"url": "http://essentials.xebia.com/dare-to-say-no",
			"description": "",
			"category": {
				"id": "craftsmanship",
				"color": "#F80068",
				"backgroundColor": "#be0351",
				"label": "Craftsmanship"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "craftsmanship"
				}
			],
			"id": "dare-to-say-no",
			"fullContent": "<h3>Also known as</h3>\n<p>First, do no harm.</p>\n<h3>Motivation</h3>\n<p>In software engineering, not everything is possible.</p>\n<h3>Applicability</h3>\n<p>As a software engineer, you are a skilled professional with knowledge, experience and expertise in software development. As such, you can judge when something might be possible (\"if we work flat-out we might just be able to hack it together in time...\") but would simply be bad (\"...but it sure will be one unmaintainable, ugly beast of a piece of code.\"). Don't allow your software to cause you sleepless nights.</p>\n<h3>Application</h3>\n<p>Don't let yourself be pressured into committing to delivering features that simply cannot be delivered to the standard of quality you, as a professional, regard as necessary. If the Product or business owner says that there \"must be a way\", that there must be some <a href=\"clean-build\">corners</a> <a href=\"dry-principle\">you</a> <a href=\"code-review\">can</a> <a href=\"boy-scout-rule\">cut</a> or <a href=\"test-everything\">tests you can skip</a>, ask them if they would trust a surgeon who would happily skip the disinfection in order to save 10 minutes.</p>\n<h3>Consequences</h3>\n<p>Software engineers pride themselves on solving problems and \"doing the impossible\". This can lead to the expectation that there is always a way. Prepare to push back in such environments, and remember that as a professional yours is an expert opinion that cannot simply be ignored by a business owner without serious consequences for you both.</p>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://manifesto.softwarecraftsmanship.org/\">Manifesto for Software Craftsmanship</a></li>\n<li><a href=\"http://www.infoq.com/presentations/craftsmanship-ethics\">Craftsmanship and Ethics, Robert C. Martin</a></li>\n</ul>"
		},
		{
			"title": "Deal with non-functionals",
			"url": "http://essentials.xebia.com/non-functionals",
			"description": "",
			"category": {
				"id": "realisation",
				"color": "#107FD5",
				"backgroundColor": "#0e65a8",
				"label": "Realisation"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "realisation"
				}
			],
			"id": "non-functionals",
			"fullContent": "<h3>Motivation</h3>\n<p>Product owners are normally more concerned about things you can do with the solution you are building than about the quality of what it can do. As a result, items turning up on the backlog are mostly related to a feature (as in, something the user can do) rather than overall quality. From the product owner's perspective, the team might be making good progress, whereas in reality what is getting produced will never be able to cope with what can be expected to happen when going live.</p>\n<h3>Applicability</h3>\n<p>Every project should carefully consider the quality related attributes that need to be addressed. That does not necessarily mean that all projects need to have the same non-functional requirements. In fact, in some cases, after short but conscious consideration, the decision might be to just ignore non-functional requirements altogether. (In case of a one-off script?)</p>\n<h3>Application</h3>\n<p>Setting proper objectives for non-functionals is not easy. The problem is: your product owner (ideally the money owner) might have a hard time understanding what these quality attributes are all about. Yet, at the same time, you want to make sure that the product owner backs the plan to address a particular quality requirement, so you do want him to understand what he is essentially asking for.</p>\n<p>One way to address it is by avoiding scales that are (mostly) well understood by developers, but not by non-IT people. So, you just define your own scales that are meaningful in the minds of the product owners. In some cases, that means defining some higher-order quality requirements, from which you then derive the lower-level quality requirements with related measurable scales that can be translated in actual work to be done.</p>\n<p>One way or the other, the quality requirements eventually need to be translated into user stories, or be woven into the definition of done of other stories. You need the product owner's awareness of the fact that you are going to work on this, and you do want him to understand the relevance of it all.</p>\n<p>One of the best sources of working this way is probably Gilb's 'Competitive Engineering'. You might not need to adopt his language. In most cases, it will be fine to define your own, one that is based on terminology that is well understood by the team. Aim for the riskiest non-functional requirements first.</p>\n<h3>Consequences</h3>\n<p>Spending time on working out the quality requirements with your product owner is going to take time. Plan for it. Start early, and refine the requirements iteratively.</p>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://books.google.nl/books?id=ejxQF60xVV0C&amp;dq=competitive+engineering&amp;printsec=frontcover&amp;source=bn&amp;hl=nl&amp;ei=UMSATPmeF4L_Ocq-rNIJ&amp;sa=X&amp;oi=book_result&amp;ct=result&amp;resnum=4&amp;ved=0CDAQ6AEwAw#v=onepage&amp;q&amp;f=false\">Competitive Engineering</a>, Tom Gilb, 2005</li>\n</ul>"
		},
		{
			"title": "Develop for security",
			"url": "http://essentials.xebia.com/secure-development",
			"description": "",
			"category": {
				"id": "realisation",
				"color": "#107FD5",
				"backgroundColor": "#0e65a8",
				"label": "Realisation"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "realisation"
				}
			],
			"id": "secure-development",
			"fullContent": "<h3>Motivation</h3>\n<p>The internet hasn't been the safe, naive place it once was for a couple of decades now. Any connected system runs the risk of being targeted for a variety of kinds of attack, or used as an intermediary to attack some other target.</p>\n<h3>Applicability</h3>\n<p>Security is often an implied requirement; few words are spent on the topic, but customers expect their systems to be built secure. Practical security is a trade-off: it's not feasible to be 100% secure. Different systems emphasize different aspects of security and attract different kinds of attackers. Therefore, what's adequate for one system is overkill (or completely missing the point) for another.</p>\n<h3>Application</h3>\n<p>Security is not something that can be bolted on after release, nor is it something that only concerns development. Securing a system starts during its initial, broad-strokes design and lasts all the way through its maintenance phase until the system is decommissioned. Identify which security properties are important, both to yourself (e.g. availability) and to your users (e.g. protection from identity theft). Embed these in your <a href=\"acceptance-criteria\">Acceptance Criteria</a>. Identify which legal or industry standards apply. Employ secure coding practices. Identify abuse cases and test against them. Think about security aspects while <a href=\"code-review\">reviewing code</a>. Consider incident response. Be aware that it's a perfectly valid decision to accept certain risks, just do so knowingly.</p>\n<h3>References</h3>\n<p>There is an enormous amount of literature, tools and online documentation on this subject. The <a href=\"https://www.owasp.org/index.php/Main_Page\">OWASP project</a> has extensive, free resources and is a good place to start looking. The <a href=\"http://www.microsoft.com/security/sdl/default.aspx\">Security Development Lifecycle</a> is a system that Microsoft adopted in the mid-2000's to address these concerns at every stage.</p>"
		},
		{
			"title": "Diagnose before cure",
			"url": "http://essentials.xebia.com/diagnose-before-cure",
			"description": "",
			"category": {
				"id": "craftsmanship",
				"color": "#F80068",
				"backgroundColor": "#be0351",
				"label": "Craftsmanship"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "craftsmanship"
				}
			],
			"id": "diagnose-before-cure",
			"fullContent": "<p>When solving problems in a software system, make sure you're attacking them from the right angle. This is true in general, but particularly so for problems meeting your <a href=\"non-functionals\">non-functional</a> requirements, like throughput and scalability. Bottlenecks in your performance characteristics may not be where you think they are. Your hands may be itching to tune that one really complicated database operation, but if your most pressing problem is synchronization for a System.out.println call that was accidentally left in, than tuning that query may be an utter waste of time.</p>\n<h3>Applicability</h3>\n<p>When performance tuning an application.</p>\n<h3>Application</h3>\n<p>Before you tune performance, first measure it. Then fix the worst bottleneck and measure again. Measure, then fix one problem, verify that it worked, then repeat. Plan, do, check, adapt. Commonly you will find unexpected results and you are most effective when measuring your progress.</p>\n<h3>Consequences</h3>\n<p>You actually identify and fix those bottlenecks that are causing contention in your application, rather than tweaking where things \"look bad\".</p>"
		},
		{
			"title": "Don't Repeat Yourself",
			"url": "http://essentials.xebia.com/dry-principle",
			"description": "",
			"category": {
				"id": "craftsmanship",
				"color": "#F80068",
				"backgroundColor": "#be0351",
				"label": "Craftsmanship"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "craftsmanship"
				}
			],
			"id": "dry-principle",
			"fullContent": "<h3>Also known as</h3>\n<ul>\n<li>The DIE Principle: Duplication Is Evil</li>\n<li>SPOT: Single Point Of Truth</li>\n</ul>\n<h3>Motivation</h3>\n<p>Duplication leads to maintenance hell and logic contradictions, reducing seems a Good Things(tm).</p>\n<h3>Applicability</h3>\n<p>The original authors of the quotes stated that it could be applied to \"database schemas, test plans, the build system, even documentation.\". So practically it could be applied almost in any aspect of work. It applies very well to code duplication.</p>\n<h3>Application</h3>\n<p>The DRY principle applied to code can reduces the amount of code you have to deal with. It improved readability and thus makes maintenance easier. When coding you can use a wide variety of options to limit duplication, OO paradigms, refactoring options etc...</p>\n<p>The DRY principle should also be used beyond plain coding in the design phase: Two concepts which are not bound in the system should not be bound by code. This is a little bit more difficult to apply.</p>\n<h3>Consequences</h3>\n<p>Whenever the principle is correctly applied it any change to any element in the system should not imply modification to other element of the system which are not directly related. Likewise, the modification should imply predictable and uniform change to all related elements.</p>\n<h3>Samples</h3>\n<p>TBD\nStories from the trenches? Horror stories? Source code? Customer references? Samples of technology that can be used to put it into practice?</p>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://www.artima.com/intv/dryP.html\">Orthogonality and the DRY principle</a></li>\n<li><a href=\"http://codebetter.com/blogs/karlseguin/archive/2009/09/12/unit-testing-do-repeat-yourself.aspx\">DRY Principle not applied to Unit Test</a></li>\n</ul>"
		},
		{
			"title": "Done = Live!",
			"url": "http://essentials.xebia.com/done-is-live",
			"description": "",
			"category": {
				"id": "collaboration",
				"color": "#FC7A25",
				"backgroundColor": "#cd631e",
				"label": "Collaboration"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "collaboration"
				}
			],
			"id": "done-is-live",
			"fullContent": "<h3>Motivation</h3>\n<p>Whenever there is a strong separation between development, QA and operations, developers are often unaware of the problems and issues that are encountered when the software is put in production. In these situation, the developer assumes that his work is done after he checked his changes in into the version management system and marked the problem as resolved in the issue tracking system. But until the change is in production, it is unsure whether his work is really finished.</p>\n<h3>Applicability</h3>\n<p>This principle is applicable for any organisation where creating software is strictly separated from maintaining, running and operating the software.</p>\n<h3>Application</h3>\n<p>Create multi-disciplinary teams and make sure that the team's work is defined as done, only when the change has been put into production and is in working to satisfactorily.</p>"
		},
		{
			"title": "Eliminate waste",
			"url": "http://essentials.xebia.com/eliminate-waste",
			"description": "",
			"category": {
				"id": "collaboration",
				"color": "#FC7A25",
				"backgroundColor": "#cd631e",
				"label": "Collaboration"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "collaboration"
				}
			],
			"id": "eliminate-waste",
			"fullContent": "<h3>Motivation</h3>\n<p>Waste is the result of activities or environmental conditions that prevent a team from reaching its goal. That clearly can't be good, so you need to get rid of it.</p>\n<h3>Applicability</h3>\n<p>Waste manifests itself in many different ways. It's way easier to find processes that produce waste, than to find processes that don't produce any waste at all. So just consider this one to be applicable in all circumstances.</p>\n<h3>Application</h3>\n<p>In order to eliminate waste:</p>\n<p>Waste, and its underlying causes, have to be detected and identified.</p>\n<p>Changes to the work environment need to be made to both eliminate the cause of the waste and the waste itself</p>\n<p>One of the approaches that may help eliminating waste is <em>value stream mapping</em>:</p>\n<p>Value stream mapping is one particular tool that can be used by a team or organization to identify wasteful activities. The team describes the amount of time that work takes to go through each activity in their overall work process. Next, the team determines if each activity adds value or does not add value to the end goal. All activities are subject to speed improvements, and activities that do not add value are subject to elimination.</p>\n<h3>Consequences</h3>\n<p>There is a lot of value in reducing waste:</p>\n<ul>\n<li>Frustration ↘</li>\n<li>Productivity ↗</li>\n<li>Creativity ↗</li>\n<li>Speed ↗</li>\n<li>Delivery of value ↗</li>\n<li>Reduce defects ↗</li>\n</ul>\n<h3>References</h3>\n<ol>\n<li><a href=\"http://www.agileadvice.com/archives/2005/04/eliminate_waste.html\">Eliminate Waste</a></li>\n</ol>"
		},
		{
			"title": "Fail fast",
			"url": "http://essentials.xebia.com/fail-fast",
			"description": "",
			"category": {
				"id": "testing",
				"color": "#6DC726",
				"backgroundColor": "#378241",
				"label": "Testing"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "testing"
				}
			],
			"id": "fail-fast"
		},
		{
			"title": "Favor composition over inheritance",
			"url": "http://essentials.xebia.com/composition-over-inheritance",
			"description": "",
			"category": {
				"id": "realisation",
				"color": "#107FD5",
				"backgroundColor": "#0e65a8",
				"label": "Realisation"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "realisation"
				}
			],
			"id": "composition-over-inheritance"
		},
		{
			"title": "Favor continuous improvement over delayed perfection",
			"url": "http://essentials.xebia.com/improve-continuously",
			"description": "",
			"category": {
				"id": "craftsmanship",
				"color": "#F80068",
				"backgroundColor": "#be0351",
				"label": "Craftsmanship"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "craftsmanship"
				}
			],
			"id": "improve-continuously",
			"fullContent": "<h3>Also known as</h3>\n<p>At least very much related to Kaizen, or 改善.</p>\n<h3>Motivation</h3>\n<p>As the back of the card says, if you don't get better, you get worse.</p>\n<h3>Applicability</h3>\n<p>This one is simple: this is always applicable.</p>\n<h3>Application</h3>\n<p>In a Scrum process, this is typically what you discuss during the retrospective. You first discuss the things you considered to go well, but then right after that, you talk about the things that could be improved, and then you see to it that you actually take some steps to improve.</p>\n<p>However, Scrum is not the only context in which this is applicable. It's equally applicable in - say - developing your coding skills. If you are wondering what on earth you could improve in your coding habits and you haven't read the The Pragmatic Programmer or the The Productive Programmer yet, then I'm pretty sure there a couple of things you can learn.</p>\n<h3>Consequences</h3>\n<p>Continuous improvement requires dedication, and dedication required dedicated time. It's important that you and your stakeholders agree on the time you are going to claim to improve continuously. Resist the temptation to consider continuous improvement to be something you get for free. Granted, you may be able to weave some improvement into your daily activities without too much cost, but there is a risk you maneuver yourself into a position in which your drive to improve continuously in your work will start hurting you in your private life. Again, continuous improvement is benefiting your stakeholders as well. Make sure that is well understood.</p>\n<h3>References</h3>\n<ol>\n<li>The Programmer's Bill of Rights, Jeff Atwood, <a href=\"http://www.codinghorror.com/blog/2006/08/the-programmers-bill-of-rights.html\">http://www.codinghorror.com/blog/2006/08/the-programmers-bill-of-rights.html</a></li>\n<li>The Productive Programmer, Neal Ford</li>\n<li>The Pragmatic Programmer; from Journeyman to Master, Andrew Hunt and David Thomas</li>\n<li>Kaizen, <a href=\"http://en.wikipedia.org/wiki/Kaizen\">http://en.wikipedia.org/wiki/Kaizen</a></li>\n</ol>"
		},
		{
			"title": "Find the root cause",
			"url": "http://essentials.xebia.com/genchi-genbutsu",
			"description": "",
			"category": {
				"id": "craftsmanship",
				"color": "#F80068",
				"backgroundColor": "#be0351",
				"label": "Craftsmanship"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "craftsmanship"
				}
			],
			"id": "genchi-genbutsu",
			"fullContent": "<h3>Also known as</h3>\n<p>現地現物 or \"go and see\", or Gemba attitude, or \"Getcha your boots on\". Gemba is the Japanese term for \"the place\" in this case 'the place where it actually happens'.</p>\n<h3>Motivation</h3>\n<p>In order to truly understand a situation one needs to go to 'gemba' or, the 'real place' - where work is done. From Wikipedia:</p>\n<blockquote><p>\"Taichi Ohno, creator of the Toyota Production System is credited, perhaps apocryphally, with taking new graduates to the shop floor and drawing a chalk circle on the floor. The graduate would be told to stand in the circle and to observe and note down what he saw. When Ohno returned he would check and if the Graduate had not seen enough he would be asked to keep observing. Ohno was trying to imprint upon his future engineers that the only way to truly understand what happens on the shop floor was to go there. It was here that value was added and here that waste could be observed.\"</p></blockquote>\n<h3>Applicability</h3>\n<p>This may sound contradictory, but if you are reporting to someone, it doesn't necessarily mean you should be writing lots of reports. The Genchi Genbutsu principle is fairly easy. If one of your managers wants to understand what's going on, he should drop by and take a look at what's happening in the team, rather than expect you to write reports.</p>\n<h3>Application</h3>\n<p>First of all, you tell your manager that you are not going to write any reports. Next, make sure that whenever he's passing by, he is able to quickly grasp the situation. Big visible charts come to mind [1]. In any case, getting him to understand the situation should take as little effort as possible.</p>\n<h3>References</h3>\n<ol>\n<li><a href=\"make-it-visible\">Make it visible</a></li>\n</ol>"
		},
		{
			"title": "Focus on flow",
			"url": "http://essentials.xebia.com/focus-on-flow",
			"description": "",
			"category": {
				"id": "collaboration",
				"color": "#FC7A25",
				"backgroundColor": "#cd631e",
				"label": "Collaboration"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "collaboration"
				}
			],
			"id": "focus-on-flow"
		},
		{
			"title": "Get the team in a rhythm",
			"url": "http://essentials.xebia.com/team-rhythm",
			"description": "",
			"category": {
				"id": "collaboration",
				"color": "#FC7A25",
				"backgroundColor": "#cd631e",
				"label": "Collaboration"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "collaboration"
				}
			],
			"id": "team-rhythm",
			"fullContent": "<h3>Motivation</h3>\n<p>How many times a week do we have to go to an unplanned meeting? How often does this disrupt our work? How many meetings are actually useful? How often do these meetings take more than an hour? The answers vary, but typically it is more than 4, they disrupt work every time, next to none are useful, almost always they take more than an hour in discussion. You can become very good at having efficient meetings, but having less meetings is the more effective approach.</p>\n<h3>Applicability</h3>\n<p>When a team is struggling to find focus, in many cases improving the rhythm is all that is needed in terms of management.</p>\n<h3>Application</h3>\n<p>Useful meetings are those that come at a good time and are about the next thing you should be doing. A standup meeting early in the day can cut down on the time you spend groping around for the best thing to do next. A planning meeting is useful to figure out what the team is going to be doing in the sprint that is about to start. Cut down on all unplanned activities and hold all meetings at fixed times and locations.</p>\n<p>Apart from forcing a rhythm with meeting schedules, it is very important for the physical and mental health of developers to take regular breaks. It can help a lot to informally synchronize these breaks by taking colleagues to the coffee machine or lunch room.</p>\n<p>Even if rhythm is very important, pragmatism should not become secondary. Ad hoc design meetings, quick war room meetings, toilet breaks they are all ok to have; being too dogmatic about these things is dangerous.</p>\n<h3>Consequences</h3>\n<p>When the team works in a shared rhythm it becomes easier to collaborate and you will see more flow going on. One of the golden rules that follows is that we never move a deadline. Failure is natural, the rejection of a hypothesis is fine. Moving a deadline often means the prolongation of a failed attempt.</p>\n<h3>Samples</h3>\n<p>A team we coached at one of our clients got in trouble. They had underestimated some work and decided to push all user stories at the same time in an all or nothing attempt and failed to deliver anything demoable at the end of the sprint. Then management agreed to not have the retrospective and planning meeting and just carry on for one more week. At the end of that week it turned out that most of the functionality was not according to the expectations. Not only did the team fail the previous sprint, but they also failed to properly plan this one. As a result two sprints were lost instead of one. The worst effect however was that the team got out of their rhythm and continued to have lower productivity and decreased motivation in the subsequent sprints.</p>"
		},
		{
			"title": "Have fun",
			"url": "http://essentials.xebia.com/have-fun",
			"description": "",
			"category": {
				"id": "collaboration",
				"color": "#FC7A25",
				"backgroundColor": "#cd631e",
				"label": "Collaboration"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "collaboration"
				}
			],
			"id": "have-fun",
			"fullContent": "<h3>Also known as</h3>\n<p>If it ain't fun, it probably ain't right.</p>\n<h3>Motivation</h3>\n<p>Having fun in work is a big deal when it comes to the creative process that is software engineering (or engineering in general). There will always be tasks that are less fun. Performing those tasks first will make you look forward to the fun tasks.</p>\n<h3>Applicability</h3>\n<p>This rule is applicable at work as well as in your private life.</p>"
		},
		{
			"title": "If it hurts, do it more often",
			"url": "http://essentials.xebia.com/hurt-often",
			"description": "",
			"category": {
				"id": "collaboration",
				"color": "#FC7A25",
				"backgroundColor": "#cd631e",
				"label": "Collaboration"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "collaboration"
				}
			],
			"id": "hurt-often",
			"fullContent": "<h3>Motivation</h3>\n<p>Formally, you have a quarterly deployment to production. Informally, the last three attempted deployments caused so much unforeseen problems and downtime that no amount of testing is now enough to confidently deploy. Key stakeholders book their vacations so as to not be around at release time. Getting sign-off takes months. Releases are cumulative, so each missed release increases the risk of the next one. The last five release windows were missed because of this. The organization is paralyzed, no code has made it to production in over a year.</p>\n<h3>Applicability</h3>\n<p>The scenario above is extreme, but not unheard of. If any particular task is so daunting that it gets delayed to mitigate risk, an organization may end up in a downward spiral that completely stalls its software delivery. When this occurs, it is often, but not exclusively, in the final step of deploying to production.</p>\n<h3>Application</h3>\n<p>The most effective antidote is radical exposure therapy. Force your organization to perform the stalling task at an increasing pace that quickly becomes impossible unless the process is fixed. This hurts, this will initially fail, but tightening the schedule works in two ways: it reduces the scope of each iteration (thus making it easier to manage) and it increases the pace at which you learn from and adapt to the problems that occur.</p>\n<h3>Consequences</h3>\n<p>Shortening your time to production increases your ability to respond to change and, ultimately, your competitiveness. There's no upper bound, internet giants like Facebook and GitHub successfully deploy to production hundreds of times per day.</p>\n<h3>References</h3>\n<ul>\n<li>Related Cards: <a href=\"three-strikes\">Three Strikes and you Automate</a>, <a href=\"integrate-early\">Integrate Early</a>, <a href=\"run-tests-automatically\">Run Tests Automatically</a></li>\n<li><a href=\"https://github.com/blog/1241-deploying-at-github\">Deploying at GitHub</a></li>\n<li><a href=\"http://martinfowler.com/books/continuousDelivery.html\">Continuous Delivery</a></li>\n</ul>"
		},
		{
			"title": "If something is too complex to understand, it must be wrong",
			"url": "http://essentials.xebia.com/poutsma-principle",
			"description": "",
			"category": {
				"id": "realisation",
				"color": "#107FD5",
				"backgroundColor": "#0e65a8",
				"label": "Realisation"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "realisation"
				}
			],
			"id": "poutsma-principle",
			"fullContent": "<h3>History</h3>\n<p>Originally used as a joke between Spring developers. Arjen Poutsma originally formulated the principle as:</p>\n<blockquote><p>If something is too complex for me to understand it must be wrong</p></blockquote>\n<p>The card was reformulated to be more generally applicable. Note the correspondence with a famous quote from Calvin and Hobbes:</p>\n<blockquote><p>As far as I'm concerned, if something is so complicated that you can't explain it in 10 seconds, then it's probably not worth knowing anyway.</p></blockquote>\n<h3>Motivation</h3>\n<p>Sticking to this principle means that you will not allow things that you don't understand to survive. In some cases, the exercise of proving something wrong will result in understanding rather than proof, in some cases it will simply result in proof.</p>\n<h3>Applicability</h3>\n<p>Use this principle to attack parts of the code base that are no go areas or considered dangerous to change based on no apparent good reasons. The principle can also be applied to processes and rules in organizations to help them change.</p>\n<h3>Application</h3>\n<p>Write a test case. In an organization rather than a code base your only weapon is reason, so you have to create a solid argument that proves the complexity is in fact wrong.</p>\n<h3>Consequences</h3>\n<p>Not allowing complexity to remain unchallenged takes time and effort. We cannot attack all problems that we encounter. It is better to challenge one thing fully then to challenge many things but failing to provide any proof. This means that a few complexities will be taken out, and some are left for another day.</p>\n<h3>Samples</h3>\n<p>In the early days of Spring Integration developers struggled with the model of allowing both chains of endpoints and connections between endpoints through channels. We also had DirectChannel that worked both ways (send and receive). This meant that we had channels implementing MessageSource and MessageTarget and endpoints implementing similar interfaces. Through the application of the original Poutsma principle we ended up with a simple and clear solution: anything in the framework is related to either a Message, an Endpoint, or a Channel.</p>\n<h3>References</h3>\n<p>Related Cards: <a href=\"kiss\">Keep It Simple</a></p>"
		},
		{
			"title": "If you are stuck developing for more than two minutes, you MUST ask somebody else",
			"url": "http://essentials.xebia.com/two-minute-rule",
			"description": "",
			"category": {
				"id": "craftsmanship",
				"color": "#F80068",
				"backgroundColor": "#be0351",
				"label": "Craftsmanship"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "craftsmanship"
				}
			],
			"id": "two-minute-rule",
			"fullContent": "<h3>Also known as</h3>\n<p>Stop the stubborn \"I wanna figure it out myself\", ask for help!</p>\n<h3>Motivation</h3>\n<p>You know the situation. Your co-worker does not use the keyboard anymore, and looks worried. There is a lot of sighs. Nothing happens. Then there is \"Google to the rescue\". Evidently, someone is trying to solve some problem, but is simply stuck. Everyone knows that just explaining the problem to others frequently helps to solve the problem on the spot! In other cases, there are other team members that have the solution ready at hand.</p>\n<p>Think about the implication to the team's output. You are wasting time. Velocity drops. You can learn, but faster! Ask other team members to help!</p>\n<h3>Applicability</h3>\n<p>This idea is crucial to us for two reasons:</p>\n<ol>\n<li>it eliminates waste, as in many situations the knowledge needed to solve the problem at hand is already present in the team.</li>\n<li>it amplifies learning, as the more knowledgeable workers have to teach the less knowledgeable ones.</li>\n</ol>\n<h3>Application</h3>\n<p>Watch you fellow team members as they are working. It is easy to spot the situation. Your co-worker does not use the keyboard anymore, and looks worried. Then simply ask: \"Hey! What are you thinking about? You are too quiet!\" This will spawn the appropriate discussion. For real.</p>\n<h3>Consequences</h3>\n<p>The result of applying this idea in practice is that your team will go into team-learning mode. The \"heroes\" teach the \"wannabe-heroes\". Knowledge is shared.</p>\n<h3>Samples</h3>\n<p>Teams trying to apply this idea sometimes fall into the following pit. The more knowledgeable person pushes the less knowledgeable away from the keyboard in a \"OMG let me just do it\" style. Fight this attitude. Get the more knowledgeable one into \"teaching-mode\". Be aware: this might be hard.</p>\n<h3>References</h3>\n<p>Related Cards: <a href=\"eliminate-waste\">Eliminate Waste</a>, <a href=\"team-member-equality\">Everybody in a project team is equal</a>, <a href=\"pair-programming\">Pair programming</a>.</p>\n<p>Relevant literature: Mary and Tom Poppendieck: \"Lean Software Development: An Agile Toolkit.\"</p>\n<p>Akamai uses a <a href=\"https://blogs.akamai.com/2013/10/you-must-try-and-then-you-must-ask.html\">fifteen-minute rule</a>.</p>"
		},
		{
			"title": "Improve practices, don't just follow the recipe",
			"url": "http://essentials.xebia.com/context-over-habit",
			"description": "",
			"category": {
				"id": "craftsmanship",
				"color": "#F80068",
				"backgroundColor": "#be0351",
				"label": "Craftsmanship"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "craftsmanship"
				}
			],
			"id": "context-over-habit",
			"fullContent": "<p>All \"Best Practices\", principles and experience are rooted in a certain context. What worked then and there may not work here and now. You can take pretty much any accepted best practice, change the context around it, and turn it into the worst thing you could have possibly done. Don't make a choice by default, don't do what you always did. Don't follow advice, no matter how well intentioned, without thinking about the consequences. <a href=\"dare-to-say-no\">Don't walk off a cliff</a> because someone in a position of authority told you to. Pick an appropriate solution for the problem at hand. Pick a <a href=\"improve-continuously\">better solution</a> than the one you used last time.</p>\n<p>The appropriate solution may of course be a common Best Practice. They're called that for a reason. Just think when you apply one.</p>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://blogs.tedneward.com/2005/08/26/There+Is+No+Such+Thing+As+Best+Practices+Context+Matters.aspx\">There is no such thing as best practices</a>, Ted Neward's blog.</li>\n</ul>"
		},
		{
			"title": "Integrate early",
			"url": "http://essentials.xebia.com/integrate-early",
			"description": "",
			"category": {
				"id": "realisation",
				"color": "#107FD5",
				"backgroundColor": "#0e65a8",
				"label": "Realisation"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "realisation"
				}
			],
			"id": "integrate-early",
			"fullContent": "<h3>Motivation</h3>\n<p>It's not uncommon for two connected systems to be developed completely independently, sharing only an interface definition. Time and again, it turns out that the development teams involved interpret the same spec subtly (or wildly) differently. Furthermore, teams have a tendency to delay actually tying the two systems together to the very last moment (\"it's not ready yet!\"). Inevitably, the systems turn out not to fit together without modification and a lot of stress, finger pointing and bad language ensues.</p>\n<h3>Applicability</h3>\n<p>Applies on any boundary between two independently developed systems or subsystems.</p>\n<h3>Application</h3>\n<p>Instead of agreeing on a spec and parting ways, realize the interface as early as possible, backed by as much stubbing and gaffer tape as needed. Coordinate between teams on the order in which the different facets of the interface are fleshed out and on any interface changes that emerge. Run automated integration tests that touch the other system. Going live in production should be a first anniversary, not a first date.</p>"
		},
		{
			"title": "It ain't over till it's done",
			"url": "http://essentials.xebia.com/done",
			"description": "",
			"category": {
				"id": "collaboration",
				"color": "#FC7A25",
				"backgroundColor": "#cd631e",
				"label": "Collaboration"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "collaboration"
				}
			],
			"id": "done",
			"fullContent": "<h3>Motivation</h3>\n<p>Have you ever come across the situation when you walked up to the story wall, picked up your story and proudly moved it to Done state? Moments later, the tester comes to you and asks \"is it deployed on the Test server, so that I can test that?\", the Scrum Master asks \"has that shown to the Product Owner?\" Another dev asks \"are there still pending tests cases to commit 'cause I see some of them missing here\". And you response was probably: \"No\".</p>\n<p>Scrum provides the Definition of DONE (DoD), which is a shared checklist of criteria for a story to be considered DONE. Tasks in the definition are mutually agreed between the development team and the Product Owner.</p>\n<h3>Applicability</h3>\n<p>Definitions of DONE can be applied to any business or technical story and may differ a bit in different kinds of activities. There may be multiple Definitions of DONE for different sorts of activities, although you should try to keep things simple; in many cases it will suffice to just skip a step as \"not applicable\". For example, a Refactoring technical story done as a part of removing technical debt may not be showcased to the Product Owner.</p>\n<h3>Application</h3>\n<p>DoD can be put as points on a sheet of paper against your story wall. In teams using a digital wall such as Mingle, ScrumWorks, GreenHopper or Rally, it is generally put up in the wiki and cross referenced when a story is completed.</p>\n<p>The sprint retrospective is a good time to check if the prevailing Definition of DONE needs to be amended or updated.</p>\n<h3>Consequences</h3>\n<p>The definition of done prevents unpleasant, last minute surprises. It puts everyone on the same page. It also leads to better story estimation because you don't just estimate for the lines of code to make that feature working but other things as well.</p>\n<h3>Samples</h3>\n<p>Sample definition of DONE:</p>\n<p>Have all the <a href=\"acceptance-criteria\">acceptance criteria</a> implemented as specified in the story.\nSufficient unit test around the code (let's say 80%).\nCode's <a href=\"code-review\">peer review</a> is done if necessary.\nThe story is deployed on the testing environment using CI.\nThe story is <a href=\"done-is-live\">deployed in production</a>.\nFunctional tests are written for the story.\nStory is signed off by the product owner.</p>\n<h2>Related cards</h2>\n<ul>\n<li><a href=\"code-review\">Code Review</a></li>\n<li><a href=\"test-everything\">Test Everything</a></li>\n<li><a href=\"done-is-live\">Done is Live</a></li>\n<li><a href=\"brutal-transparency\">Brutal Transparency</a></li>\n</ul>"
		},
		{
			"title": "Judge on content, not on authority",
			"url": "http://essentials.xebia.com/team-member-equality",
			"description": "",
			"category": {
				"id": "collaboration",
				"color": "#FC7A25",
				"backgroundColor": "#cd631e",
				"label": "Collaboration"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "collaboration"
				}
			],
			"id": "team-member-equality",
			"fullContent": "<h3>Also known as</h3>\n<p>One team.</p>\n<h3>Motivation</h3>\n<p>We distinguish on the validity of the ideas, not on roles, authority or location.</p>\n<p>Every member of a team has special skills that add to the success of the project or product. Werther it be the analytical skills of the business analyst, the out of the box way of thinking of the tester or the tool knowledge of the programmer.</p>\n<h3>Consequences</h3>\n<p>Learn from each other. Respect each others opinions.</p>"
		},
		{
			"title": "Keep the build clean",
			"url": "http://essentials.xebia.com/clean-build",
			"description": "",
			"category": {
				"id": "craftsmanship",
				"color": "#F80068",
				"backgroundColor": "#be0351",
				"label": "Craftsmanship"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "craftsmanship"
				}
			],
			"id": "clean-build",
			"fullContent": "<h3>Also known as</h3>\n<p>Aim to keep the build clean.</p>\n<h3>Motivation</h3>\n<p>When we start a new project from scratch, the build is clean and initially there are no warnings, no problems. As the code base grows, we start to see warnings in the build log. If we don't pay attention, the warnings start piling up.</p>\n<p>When there's a lot of noise, it's much harder to find the warning that I really want to read among the hundreds of warnings I don't care about.</p>\n<h3>Applicability</h3>\n<p>Whenever you build the code.</p>\n<h3>Application</h3>\n<p>Don't wait for a pile of warnings before you start cleaning up. The moment the warnings are seen, deal with them to ensure that they don't turn up into noise very soon.</p>\n<h3>Consequences</h3>\n<p>Warnings from the build are useful. To get the focus on to the warnings, it is essential to get rid of the noise. If the build has little or no noise, it is easy to spot a new warning easily.</p>\n<p>It is easier for someone to take over my work, if the build is clean. He doesn't have to scratch his head to figure out if the warning is to be ignored or fixed.</p>"
		},
		{
			"title": "Keep your hands off the machine.",
			"url": "http://essentials.xebia.com/hands-off-machine",
			"description": "",
			"category": {
				"id": "realisation",
				"color": "#107FD5",
				"backgroundColor": "#0e65a8",
				"label": "Realisation"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "realisation"
				}
			],
			"id": "hands-off-machine",
			"fullContent": "<h3>Motivation</h3>\n<p>Operating systems and middleware and managed and maintained manually. Changes can only be made by system administrators and operators through a formal change procedure. This makes any change slow due to the hand-offs and error prone. As it is a lengthy process, developers are often given more privileges on development and test machines to experiment with changes to middleware or operating system configurations. As these changes are often forgotten in the installation instructions for QA and production environments, errors popup that were solved in the developer maintained environments.</p>\n<h3>Applicability</h3>\n<p>Anywhere, where multiple machines are managed manually this principle is applicable.</p>\n<h3>Application</h3>\n<p>Automate the installation and configuration of the machine, the operating system and the middleware by using tools like Puppet, Ansible, Salt Stack or Chef. Remove the need to login to the machine by providing everything that is needed to develop and run an application:from easy access to the log messages, application health dashboard, control of the application deployments and the ability to restart the application servers.</p>\n<h3>Consequences</h3>\n<p>Configuration drift between environments will be eliminated, The cost of system maintenance will dramatically be reduced and you will end up with more stable environments.</p>"
		},
		{
			"title": "Keep your logs clean",
			"url": "http://essentials.xebia.com/clean-logs",
			"description": "",
			"category": {
				"id": "testing",
				"color": "#6DC726",
				"backgroundColor": "#378241",
				"label": "Testing"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "testing"
				}
			],
			"id": "clean-logs",
			"fullContent": "<h3>Motivation</h3>\n<p>Logging is one of those deceptively simple concerns. “How hard can it be?”</p>\n<h3>Applicability</h3>\n<p>Logging is a very common <a href=\"non-functionals\">requirement</a> that tends to get not much thought unless the logging volume is huge.</p>\n<h3>Application</h3>\n<h1>Log at the right level</h1>\n<p>Establish (and follow) a common convention for assigning event priorities.</p>\n<p>For example, use the INFO level to report the actual (as used) configuration settings during start-up and inform of system status changes such as \"Started successfully\" or \"Shutdown initiated by <admin name=\"\">\". Use the WARNING level to report things that a developer or operator should look at, but that don't threaten the immediate operation. Use the ERROR level to report things that need immediate action, such as an unreachable database or a backed up message queue. Use the DEBUG level for everything else. You should be able to tie a pager to ERROR events and not lose sleep over trivialities, nor miss out on fatalities (mind you, alerting is hard).</admin></p>\n<h1>Log every message once</h1>\n<p>Anything more than that adds confusion and wastes disk space. It's quite common for exceptions to be logged more than once. Avoid this if you can.</p>\n<h1>Throw meaningful exceptions</h1>\n<p>An exception message in your log file is of no use if it doesn't help you figure out what's wrong. Use a clear message and provide context. Use custom exception types so that different groups of problem types can be handled separately in different catch blocks.</p>\n<h1>Keep auditing information separately</h1>\n<p>The audit trail should have its own, dedicated destination (log file, database, what have you). The audit trail may have different archiving demands than the application log file.</p>\n<h1>Don't cry wolf</h1>\n<p>If your log file raises a lot of false alarms, it will get ignored and any real problems won't become apparent until the phones start ringing.</p>\n<p>Don't put yourself in a position where you have to say \"Please ignore those exceptions you see in the logs, they are normal\". An exception stack trace stands out like a sore thumb in any log file. If you work with functional exceptions, you have to catch them and handle them in a way they do not appear in your technical logs.</p>\n<h1>Allow tuning of a running system</h1>\n<p>For long running systems, embed some troubleshooting tools, like the ability to generate more verbose logging; possibly tied to a specific user session.</p>\n<h3>References</h3>\n<p>Code complete, 2nd Edition. Steve McConnell, Microsoft Press.</p>"
		},
		{
			"title": "Learn a new language every year.",
			"url": "http://essentials.xebia.com/learn-a-new-language",
			"description": "",
			"category": {
				"id": "craftsmanship",
				"color": "#F80068",
				"backgroundColor": "#be0351",
				"label": "Craftsmanship"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "craftsmanship"
				}
			],
			"id": "learn-a-new-language",
			"fullContent": "<h3>Motivation</h3>\n<p>Each programming language is different. There are the obvious differences in language family, such as Object Oriented or Functional, but even within families, the differences are large: Objective C looks nothing like Java and the difference goes well beyond the superficial. Every programming language you learn teaches you new ways of reasoning about the task at hand. This experience carries over into other programming language, strengthening your ability in all of them. And it's fun!</p>\n<h3>Application</h3>\n<p>To learn a language, you need to go beyond \"Hello, World!\", but rewriting your day job from scratch may be a bit optimistic. Build Conway's game of life or a Sudoku solver. Build a TODO tracker or Twitter client. Contribute to an open source project.</p>"
		},
		{
			"title": "Leave the campground cleaner than you found it",
			"url": "http://essentials.xebia.com/boy-scout-rule",
			"description": "",
			"category": {
				"id": "realisation",
				"color": "#107FD5",
				"backgroundColor": "#0e65a8",
				"label": "Realisation"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "realisation"
				}
			],
			"id": "boy-scout-rule",
			"fullContent": "<h3>Motivation</h3>\n<p>Known as the Boy Scout Rule, (possibly) first introduced by the Boy Scouts of America. This simple rule that works great for camping in nature can also be applied to programming: when you're done with a task, always check in code in a cleaner state than when you checked it out.</p>\n<h3>Applicability</h3>\n<p>This should be daily routine for a software engineer. Make sure you do not pollute your regular commits with clean up actions.</p>\n<h3>See also</h3>\n<ul>\n<li><a href=\"one-change-at-a-time\">one-change-at-a-time</a></li>\n<li><a href=\"no-museum\">no-museum</a></li>\n</ul>"
		},
		{
			"title": "Make it visible",
			"url": "http://essentials.xebia.com/make-it-visible",
			"description": "",
			"category": {
				"id": "collaboration",
				"color": "#FC7A25",
				"backgroundColor": "#cd631e",
				"label": "Collaboration"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "collaboration"
				}
			],
			"id": "make-it-visible",
			"fullContent": "<h3>Also known as</h3>\n<p>At least related: Big Visible Charts</p>\n<h3>Motivation</h3>\n<blockquote><p>\"There is no more powerful way to prove that we know something well than to draw a simple picture of it. And there is no more powerful way to see hidden solutions than to pick up a pen and draw out the pieces of our problem.\"</p></blockquote>\n<p>– Dan Roam, The Back of a Napkin</p>\n<p>A burndown chart is the perfect example of a visualization that allows you to understand in a glance where the team is heading. It's questionable if a picture really says more than a thousand words (I personally think a thousand words actually say more), but a proper visualization does a much better job capturing the essence.</p>\n<h3>Applicability</h3>\n<p>Visualization is a tool that comes in handy in all sorts of circumstances. Dan Roam cuts the problem solving process into four phases, and suggests visualization techniques to help you through each of these phases:</p>\n<ul>\n<li>Looking = Collecting and screening</li>\n<li>Seeing = Selecting and clumping</li>\n<li>Imagining = Seeing what isn't there</li>\n<li>Showing = Making it all clear</li>\n</ul>\n<h3>Application</h3>\n<h2>Don't hesitate</h2>\n<p>First of all, if you are convinced that you have a way of using visualization to show what's out there, to reveal patterns, to compare some ideas or to sell a particular one, then you don't hesitate; you just do it. For some people, that's harder than others. However, Dan Roam is convinced everyone can do it. All you need to be able to do is draw a line, draw a circle, a face and some arrows.</p>\n<h2>Where to start</h2>\n<p>If you don't know where to start, it might be good to check the Visual Thinking Codex. It offers suggestions on the kind of pictures to use in various circumstances.</p>\n<h2>Stick it on the wall</h2>\n<p>A visualization is not going to be helpful at all if it sits somewhere on a network drive. It should be out there in the open, for everyone to see. Don't hesitate to use the space surrounding you or your audience. Stick it on the wall, plaster the elevator, be creative.</p>\n<h2>Hand-drawn, informal and casual</h2>\n<p>Consider casual, hand-drawn, informal and even messy in favor of smooth, formal, polished and tool generated. There are many reasons why. First of all, in most cases, jotting something down by hand is just going to be way faster than by using a tool. If a hand-drawn picture tells as much as a tool-drawn picture, then spending hours on getting something fancy is just waste.</p>\n<p>Other than that, hand-drawn, informal and improvised pictures are often easier to remember than cold, formal and tool-generated diagrams.</p>\n<p>And last but not least, collective design efforts result in hand-drawn, informal and improvised type of diagrams any way. At the end of a collective design effort, when there is consensus on how to move forward based on an informal diagram drawn on a whiteboard, what would be the value of turning it into a formal diagram. The hand-drawn diagram is still imprinted on everyone's retina. Chances are that turning it into a formal diagram is only going to make it harder for people to understand.</p>\n<h2>If you want tools any way</h2>\n<p>Here are some of the tools we use:</p>\n<ul>\n<li>Omnigraffle: informal but pretty.</li>\n<li>Graphviz: not that pretty, but extremely convenient in taking care of the heavy-lifting.</li>\n<li>Google Visualization API: pretty decent, again very convenient for preventing you from having to manually draw the same diagram over and over again.</li>\n<li>Protovis: if you are into automating things, then Protovis draws awesome pictures, but it might be a little harder to use than - say - Google visualizations.</li>\n<li>Raphael: if neither Google nor Protovis support the kind of diagrams you want to generate, Raphael is your next best option.</li>\n</ul>\n<h3>References</h3>\n<ol>\n<li>The Back of a Napkin, Dan Roam</li>\n<li>Gapminder, <a href=\"http://www.gapminder.org/\">http://www.gapminder.org/</a></li>\n<li>Notation and Representation in Collaborative Object-Oriented Design, Uri Dekel and Herbsleb</li>\n<li>Protovis, <a href=\"http://vis.stanford.edu/protovis/\">http://vis.stanford.edu/protovis/</a></li>\n<li>Google Visualization API, <a href=\"http://code.google.com/apis/charttools/index.html\">http://code.google.com/apis/charttools/index.html</a></li>\n<li>Raphaël, <a href=\"http://raphaeljs.com/\">http://raphaeljs.com/</a></li>\n<li>The Visual Thinking Codex_, Dan Roam, <a href=\"http://www.thebackofthenapkin.com/pdf/TBOTN_codex.pdf\">http://www.thebackofthenapkin.com/pdf/TBOTN_codex.pdf</a></li>\n</ol>"
		},
		{
			"title": "Make it work Make it right Make it fast",
			"url": "http://essentials.xebia.com/make-it-work-right-fast",
			"description": "",
			"category": {
				"id": "craftsmanship",
				"color": "#F80068",
				"backgroundColor": "#be0351",
				"label": "Craftsmanship"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "craftsmanship"
				}
			],
			"id": "make-it-work-right-fast",
			"fullContent": "<h3>Motivation</h3>\n<p>To prevent analysis paralysis, follow these simple steps in case a problem seems too big to tackle.</p>\n<p>First, simply make it work. Don't pay (much) attention to craftsmanship principles such as <a href=\"dry-principle\">dry</a>.</p>\n<p>Second, make it right, by making your code compliant with craftsmanship principles.</p>\n<p>Finally, make it fast if really needed.</p>"
		},
		{
			"title": "Make room for exploratory testing",
			"url": "http://essentials.xebia.com/exploratory-testing",
			"description": "",
			"category": {
				"id": "testing",
				"color": "#6DC726",
				"backgroundColor": "#378241",
				"label": "Testing"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "testing"
				}
			],
			"id": "exploratory-testing",
			"fullContent": "<h3>Motivation</h3>\n<p>Users tend to use an application in unexpected ways. Conventional happy path testing is not sufficient. Event with failure path testing only a subset of the possible ways to work your way through an application are tested.</p>\n<p>Exploratory testing is a disciplined method to test (corner) cases in the application.</p>\n<h3>Applicability</h3>\n<p>Listen to your curiosity\nDefine what you're curious about and explore ASAP.</p>\n<h3>Application</h3>\n<p>Despite the \"exploratory\" nature of the tests, it is required to do some preparation upfront. The expedition should be prepared, you have to define a goal of the exploration. No need to wander of the path: take notes about alternative paths that can be investigated in future expeditions.</p>\n<h3>Consequences</h3>\n<p>Parts of the system, or flows through the system, that are not commonly checked are tested. Possible issues can be resolved and tested with automated tests.</p>\n<h3>Samples</h3>\n<p>Create a simple Test Charter Card which describes your curiosity with the following format:</p>\n<p>Explore: A target\nWith: Resources\nTo Discover: Information</p>\n<p>By target we mean: What are you exploring? e.g. UI input fields, Login pages or XML responses?\nBy resources we mean: What resources will you be using? e.g. JavaScript / SQL injection or Spoofed URLs &amp; POSTS\nInformation: What kind of information are you hoping to find? e.g. Can an user access content which they are not allowed to access or any other security vulnerabilities</p>\n<h3>References</h3>\n<p><a href=\"http://pragprog.com/book/ehxta/explore-it\">http://pragprog.com/book/ehxta/explore-it</a></p>"
		},
		{
			"title": "Master your tools",
			"url": "http://essentials.xebia.com/master-your-tools",
			"description": "",
			"category": {
				"id": "craftsmanship",
				"color": "#F80068",
				"backgroundColor": "#be0351",
				"label": "Craftsmanship"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "craftsmanship"
				}
			],
			"id": "master-your-tools",
			"fullContent": "<h3>Motivation</h3>\n<p>As software developers we use a huge variety of tools, from the very simple to the immensely complex. It takes considerable effort to learn to make the most of these. This is effort well spent.</p>\n<h3>Applicability</h3>\n<p>All the time. There is no one tool that serves all your needs though. Pick tools that suite your needs. Do not go for the most complex tools directly.</p>\n<h3>Application</h3>\n<p>Just do it. Start looking up the keystrokes for frequent tasks and memorise them.</p>\n<p>How about a command line tools? Not having to lift your hands of the keyboard can be a great time saver.</p>\n<h3>Consequences</h3>\n<p>A huge increase in productivity, fewer keystrokes, colleagues who gasp and stammer \"how did you do that?\".</p>\n<h3>Samples</h3>\n<ul>\n<li>Learn the keystrokes for your language IDE by heart. Twice. Master its search and navigation functions. Optimize the syntax highlighting to your preferences.</li>\n<li>As an example of the latter: Eclipse JDT defaults to using italic font for static members and no highlighting for abstract members. Bring these in line with UML and underline your statics, italicize your abstracts. Now you can see an abstract method invocation and know not to press F3 (which uselessly takes you to the declaration), but CTRL-T to take you to an implementation.</li>\n<li>Learn to use at least one command shell and its scripting language for every platform your frequently use. Learn a text editor for that shell. Unix is traditionally stronger than Windows in this area, although Windows PowerShell should not be underestimated. You can mix and match! Bash, vim, wget and xmllint are all avaiable on Microsoft Windows and work perfectly fine. By installing these your can focus your effort on just one type of shell.</li>\n<li>Learn to use SSH login by a private key protected with a passphrase instead of a password entered at shell login. Manage private keys on your workstation using ssh-agent (or pageant).</li>\n</ul>\n<h3>References</h3>\n<p>If you're into vi (a unix text editor), try http://vimgolf.com.</p>"
		},
		{
			"title": "Maximize cohesion Minimize coupling",
			"url": "http://essentials.xebia.com/maximize-cohesion-minimize-coupling",
			"description": "",
			"category": {
				"id": "realisation",
				"color": "#107FD5",
				"backgroundColor": "#0e65a8",
				"label": "Realisation"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "realisation"
				}
			],
			"id": "maximize-cohesion-minimize-coupling",
			"fullContent": "<h3>Motivation</h3>\n<p><em>Coupling</em> is the degree to which each program module relies on each one of the other modules. So, coupling is all about the relation between modules. Tightly coupled systems have a number of undesirable properties:</p>\n<ul>\n<li>Changes in one module tend to have a ripple effect on other modules. (So it's hard to make isolated changes.)</li>\n<li>It will be hard to test a module in isolation.</li>\n<li>It will be hard to reuse a module in an alternative context.</li>\n</ul>\n<p><em>Cohesion</em> is a measure of how strongly-related or focused the responsibilities of a single module are. Systems with minimal cohesion have a number of undesirable properties:</p>\n<ul>\n<li>(When applied to source code) code tends to be less readable.</li>\n<li>Code is likely to be less reusable in alternative contexts.</li>\n<li>Complexity is high. (It's hard to figure out what belongs where and why.)</li>\n</ul>\n<p>As a consequence, you should <em>minimize</em> coupling and <em>maximimze</em> cohesion when designing your modules.</p>\n<h3>Applicability</h3>\n<p><em>Minimal coupling</em>, <em>maximal cohesion</em> is applicable to many contexts. Traditionally, it's often associated to source code level design practices, but it is by no means restricted to that context. Many people have argued that it is equally applicable in enterprise scale problems[2], and I have no problem considering it applicable to hardware design as well. The standardization of USB, PCI, memory modules - it all seems to be driven by a desire to minimize coupling (allowing us to use it in many contexts) as well a maximizing cohesion (this piece of hardware serves one function only).</p>\n<h3>Application</h3>\n<p>In order to maximize cohesion, make sure you are always able to summarize the purpose of a single module in a single phrase. If it turns out to be impossible to capture the purpose of a module into a single discriminative phrase, then that's a smell. At the other hand, don't go totally overboard by making everything a separate module; it will have a dramatic effect on the number of dependencies between modules, and therefore hurt you in terms of coupling.</p>\n<p>One of the tools that might help you organizing your dependencies is the Dependency Structure Matrix.</p>\n<h3>Consequences</h3>\n<p>Applying this principle makes it more likely that pieces of your software will survive over time.</p>\n<h3>References</h3>\n<ol>\n<li>Structured Design, W. Stevens, G. Myers, L. Constantine, IBM Systems Journal, 13 (2), 115-139, 1974.</li>\n<li>Simple Architectures for Complex Enterprises, R. Sessions, Microsoft Press, 2008</li>\n</ol>"
		},
		{
			"title": "No blame, but no mercy",
			"url": "http://essentials.xebia.com/no-blame-no-mercy",
			"description": "",
			"category": {
				"id": "collaboration",
				"color": "#FC7A25",
				"backgroundColor": "#cd631e",
				"label": "Collaboration"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "collaboration"
				}
			],
			"id": "no-blame-no-mercy",
			"fullContent": "<p>Bad program code is actively harmful. It's not just that a specific piece of functionality is flawed and/or hard to maintain. Badness tends to spill over into the surrounding code, because maintainers get confused, demotivated and/or frustrated into producing more of it. This is known as “Bit Rot”. Developers should [not feel comfortable|no-broken-windows] around bad code.</p>\n<p>All bad code has an author, or authors as the case may be. It's tempting to associate the author with the code. Don't. We criticize bad code, we don't criticize people. Fix the code, discuss the problem with the team and show them how it can be done better. Prevent the same sort of badness from entering the system again.</p>\n<p>This approach yields multiple benefits: better code, fewer repetitive mistakes, more knowledge exchange.</p>"
		},
		{
			"title": "No broken windows",
			"url": "http://essentials.xebia.com/no-broken-windows",
			"description": "",
			"category": {
				"id": "collaboration",
				"color": "#FC7A25",
				"backgroundColor": "#cd631e",
				"label": "Collaboration"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "collaboration"
				}
			],
			"id": "no-broken-windows",
			"fullContent": "<h3>Also known as</h3>\n<p>Broken windows theory</p>\n<p>Keeping a clean slate</p>\n<h3>Motivation</h3>\n<p>Broken windows theory is originally a criminology theory that couples the crime rate of a neighborhood to how well maintained and orderly it is. Psychologically we are less inclined to make a mess when everything around us is pristine and orderly</p>\n<p>The same applies to our software development. When the entire codebase is orderly, it is more likely to stay that way. When it is a mess, we easily feel like it is permitted to cut corners and deliver sloppy work.</p>\n<p>In order to stick to our standards of quality without compromise it is therefore necessary to keep all our code clean, and leave no 'broken windows'.</p>\n<p>Apart from the psychological benefit, this also has the technical benefit of keeping technical debt to a minimum, enabling us to keep focus on adding value, instead of cleaning up messes from the past.</p>\n<h3>Applicability</h3>\n<p>All our engineering work.</p>\n<h3>Application</h3>\n<p>In practice this means that we do not leave 'todos' undone in our code. We want the codebase to be fully in order, and use our own sense of professionalism and aesthetics to determine when something is good enough. We also implement a full test harness and take our time to do things the right way. That means that we do not skip on documentation or refactoring. There is only one way to do things, and that is with all these included.</p>\n<h3>Consequences</h3>\n<p>By keeping our technical debt low, we keep ourselves to a high technical standard and achieve maximum productivity, speed and maintainability or our software.</p>\n<h3>Samples</h3>\n<p>Everyone has worked on projects in the past where the technical standard was not uniform and corners were cut under pressure of time. Those projects typically get bogged down in a swamp of technical debt, with developers going into hacking mode. The productivity drops in only a few weeks, and only a few heroes are able to make sense out of the spaghetti that has been created. Overall we do our clients a disservice by giving in to pressure to cut corners.</p>\n<h3>References</h3>\n<p><a href=\"http://en.wikipedia.org/wiki/Broken_window_theory\">http://en.wikipedia.org/wiki/Broken_window_theory</a></p>"
		},
		{
			"title": "No change without a failing test",
			"url": "http://essentials.xebia.com/no-test-no-bugfix",
			"description": "",
			"category": {
				"id": "craftsmanship",
				"color": "#F80068",
				"backgroundColor": "#be0351",
				"label": "Craftsmanship"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "craftsmanship"
				}
			],
			"id": "no-test-no-bugfix",
			"fullContent": "<h3>Motivation</h3>\n<p>If it ain't broke don't fix it goes the old saying. This is often used to resist changes, but resisting change isn't all bad. In fact, changes are risky and should only be done if there is sufficient reason. A broken test case is proof of a bug (if the test case makes sense) and demanding reproducible breakage before undertaking a risky change is a good recipe to avoid awkward discussions.</p>\n<h3>Applicability</h3>\n<p>Before you do anything you should have a reason. Especially in a situation where you will potentially be held accountable for your actions having a good reason for them is essential. Proving that something is broken before you fiddle with it is mandatory, in code this means changing or creating a test first and only then changing the code. There is still some discussion on the effectiveness of test driven development. Measurements are not entirely conclusive, suggesting that there are situations where test driven development is not applicable. We suggest to at least ensure there is an objective way to verify the results of the change (keeping some leeway in the method).</p>\n<h3>Application</h3>\n<p>Whenever we attempt a change, we first figure out if we can prove that we've succeeded when we are done with our change. Once we have a method to prove if our change was successful we carry on. In the process we strive to leave an automated solution to make sure our change is never broken unintentionally. This is often but not always done through a unit test.</p>\n<h3>Consequences</h3>\n<p>Acting this way results in higher code coverage and more sensible test cases. It may sometimes require extra effort to get started with a change.</p>\n<h3>Samples</h3>\n<p>In a large code base of a longer running project a bug was logged on some parsing issue. A developer went into the code and changed the parser to deal differently with a certain character. A few weeks later another parsing issue was logged; another developer went in and changed the logic back. Both developers saw from the single example in the issue that their fix would solve the problem for the particular example. Then the first bug was reopened and the first developer got furious. He reverted the change that removed his check and committed. Then a bit later the second bug was reopened. If only they both had created test cases there wouldn't have been a problem at all.</p>\n<h3>References</h3>\n<ul>\n<li><a href=\"nparc.cisti-icist.nrc-cnrc.gc.ca/npsi/ctrl?action=rtdoc&amp;an=5763742&amp;article=0&amp;lang=en\">On the Effectiveness of Test-first Approach to Programming</a> (pdf, 650kB) Hakan Erdogmus, National Research Council Canada.</li>\n</ul>"
		},
		{
			"title": "No multitasking",
			"url": "http://essentials.xebia.com/no-multitasking",
			"description": "",
			"category": {
				"id": "craftsmanship",
				"color": "#F80068",
				"backgroundColor": "#be0351",
				"label": "Craftsmanship"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "craftsmanship"
				}
			],
			"id": "no-multitasking",
			"fullContent": "<h3>Motivation</h3>\n<p>Your brain does not handle multitasking as well as you think. Enhance your productivity by focusing completely on one task at a time.</p>\n<h3>Application</h3>\n<p>Resisting distractions requires some discipline. There are many things you can do to make it easier:</p>\n<p>Auto-hide your taskbar or dock.\nClose (or at least mute) your email and IM clients.\nEstablish \"no distraction\" times in your team.\nIf you tend to procrastinate, consider a service like RescueTime.\nIf you are easily distracted by sounds, consider headphones. Some people listen to brown noise instead of music to block out distractions.\nConsequences</p>\n<p>By focusing your attention on a single task at a time, you'll get more work done over a course of time, with better results on every task.</p>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://www.codinghorror.com/blog/2006/09/the-multi-tasking-myth.html\">The Multitasking Myth (CodingHorror.com)</a></li>\n<li><a href=\"http://thetruthyoualwaysknew.com/2013/04/21/multitasking-is-impossible-focus-deeply-on-the-task-at-hand/\">Multitasking is impossible (TheTruthYouAlwaysKnew.com)</a></li>\n<li><a href=\"http://www.forbes.com/sites/douglasmerrill/2012/08/17/why-multitasking-doesnt-work/\">Why multitasking doesn't work (Forbes.com)</a></li>\n</ul>"
		},
		{
			"title": "One change at a time",
			"url": "http://essentials.xebia.com/one-change-at-a-time",
			"description": "",
			"category": {
				"id": "craftsmanship",
				"color": "#F80068",
				"backgroundColor": "#be0351",
				"label": "Craftsmanship"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "craftsmanship"
				}
			],
			"id": "one-change-at-a-time",
			"fullContent": "<p>A single commit should contain only changes related to a single user story or issue. For instance, don't mix formatting changes with bug fixes. In other words: A change should have only one reason to be reverted.</p>\n<h3>Motivation</h3>\n<p>In case of problems it is very helpful to be able to blame just a few lines that were changed, instead of 20 files that contain everything from reformatting, refactoring log statements to changes in the transaction API.</p>\n<h3>Applicability</h3>\n<p>All projects where source control is used.</p>\n<h3>Application</h3>\n<ul>\n<li>Apply changes one at a time, e.g. when you fix two issue tracker tickets in the same file, record the changes for both fixes as separate commits in version control.</li>\n<li>Separate code clean up from functional changes. So Don't combine formatting changes and semantic changes in a single commit.</li>\n<li>Check each changeset before you push it to the central repository, to see if it communicates your intention.</li>\n</ul>\n<h3>Effects</h3>\n<ul>\n<li>Easier to inspect and review changes in SCM history.</li>\n<li>Enables cherry-picking of changes.</li>\n<li>Reduces hassle if a change needs to be reverted</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"small-increments\">Work in small increments</a></li>\n</ul>"
		},
		{
			"title": "One feature at a time",
			"url": "http://essentials.xebia.com/one-feature-at-a-time",
			"description": "",
			"category": {
				"id": "collaboration",
				"color": "#FC7A25",
				"backgroundColor": "#cd631e",
				"label": "Collaboration"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "collaboration"
				}
			],
			"id": "one-feature-at-a-time",
			"fullContent": "<h3>Motivation</h3>\n<p>There is no point in trying to aim for everything, all in one go. If you are able to complete something early, you can move it into production and start feeding the ROI into the development of next features. If you are working on many things at the same time, you are basically denying yourself money.</p>\n<p>Other than that, doing many things at the same time comes with a cost. If a computer has to do many things at the same time, it will waste cycles switching between these different tasks. Your brain is not any different. Doing many tasks at the same time is like a juggling act. Juggling is way easier with just one ball. Juggling with just one ball is not only easier. It also increases that likeliness you will be able to complete your act without letting it drop on the floor.</p>\n<h3>Applicability</h3>\n<p>More often than not.</p>\n<h3>Application</h3>\n<p>Break the entire idea up into Minimal Marketable Features. You <em>could</em> consider calculating the net present value of each of these features, as \"Software by Numbers\" suggests. Alternatively, you take a slightly less scientific approach, and just sort the stories in the order you expect them to return most value early on. (However, bear mind that some features would earn you way more if you implement them <em>now</em>, rather than later on. The approach suggested by \"Software by Numbers\" factors this in.)</p>\n<p>Once you understand desired order for releasing the minimal marketable features, it's just a matter of feeding that to your teams in the appropriate order, and make sure the definition of done is clearly communicated. If we say \"one feature at a time\", we really mean \"one feature at a time\". In other words, that one features should really be completed, as much as possible. Getting it out there might require a bit more effort, but you will also enjoy the benefits of tapping into revenue streams early on.</p>\n<h3>Consequences</h3>\n<p>Question is how you deal with \"one feature at a time\" if you have many teams working on the same product. The solution is not to redefine minimal to \"whatever these teams can accomplish\". It will require you to carefully consider the dependencies between these Minimal Marketable Features and minimize them as much as possible. That includes making sure the architecture allows these Minimal Marketable Features to be developed independently as much as possible.</p>\n<p>At first glance, the easiest (but not necessarily most desirable) way to distribute work on Minimal Marketable Features between teams would be to have teams focusing on a particular layer or tier of your architecture. However, as a consequence, your teams will no longer be focused on completing the minimal marketable feature. They will instead have time left to work on other features as well. Chances are that - in the end, with all of the painful coordination between teams - you are left with a number of half-baked half-completed features, instead of a couple of features that are ready to be put out there.</p>\n<p>Instead of having teams that focus on particular architectural layers and tiers, it might be worth considering teams capable of completing the entire minimal marketable feature on their own. That makes an architecture that accommodates this a more attractive option.</p>\n<h4>References</h4>\n<ol>\n<li>Software by Numbers, Mark Denne and Jane Cleland-Huang, <a href=\"http://www.softwarebynumbers.org/\">http://www.softwarebynumbers.org/</a></li>\n<li>Service Integration at the Presentation Layer, Wilfred Springer, <a href=\"http://blog.xebia.com/2010/07/21/service-integration-at-the-presentation-layer/\">http://blog.xebia.com/2010/07/21/service-integration-at-the-presentation-layer/</a></li>\n</ol>"
		},
		{
			"title": "Pair programming",
			"url": "http://essentials.xebia.com/pair-programming",
			"description": "",
			"category": {
				"id": "collaboration",
				"color": "#FC7A25",
				"backgroundColor": "#cd631e",
				"label": "Collaboration"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "collaboration"
				}
			],
			"id": "pair-programming",
			"fullContent": "<h3>Motivation</h3>\n<p>Let's be honest. Over engineered solutions are strangely attractive. We developers are drawn into it like bugs into a bugzapper. We end up spending way too much time on things we don't even need. That's just wrong. We need somebody to get us back on track. And that's exactly what pair programming is going to give you.</p>\n<blockquote><p>When you pair, one person codes---the driver. The other person is the navigator, whose job is to think. As navigator, sometimes you think about what the driver is typing. (Don't rush to point out missing semicolons, though. That's annoying.) Sometimes you think about what tasks to work on next and sometimes you think about how your work best fits into the overall design.\nThis arrangement leaves the driver free to work on the tactical challenges of creating rigorous, syntactically correct code without worrying about the big picture, and it gives the navigator the opportunity to consider strategic issues without being distracted by the details of coding. Together, the driver and navigator create higher-quality work more quickly than either could produce on their own.<a href=\"http://jamesshore.com/Agile-Book/pair_programming.html\">1</a></p></blockquote>\n<h3>Applicability</h3>\n<p>Okay, there might be a few situations when you need some time alone. But, really, in all other cases, pair programming is applicable. That doesn't mean it's easy though. In fact, for most people, it turns out to be quite painful to say goodbye to their time spent in isolation, as evidenced by the type of response you will get when suggesting pair programming to die-hard alone coders:</p>\n<ul>\n<li>I'm faster on my own</li>\n<li>Can't pair with that guy, he's getting on my nerves</li>\n<li>Pair programming is too tiring</li>\n<li>We've split up the work and we'll get it done faster if we use two keyboards</li>\n<li>There's too much background noise</li>\n<li>I'm just slowing her down</li>\n</ul>\n<p>Iwein Fuld wrote a great article on the subject a in 2010, and this is what he said:</p>\n<blockquote><p>Some of this might sound plausible, so let me axe that down first. No you're not faster on your own, you're just creating more crap for your colleagues to puzzle over and eventually delete. The code you write alone sucks. That guy that is getting on your nerves is trying to tell you (clumsily) that your code sucks, try to listen to him and you'll turn into a better programmer. Or maybe you can teach him something and he'll stop getting on your nerves. If your code is so simple that you can split up the work in advance you're writing it on too low an abstraction level, or you need to work on this in two pairs. If you're slowing the other guy down, that's a good thing. That will prevent him from writing code that you cannot maintain. If you don't feel worthy of your colleagues code, get over it, or get off the team.<a href=\"http://blog.xebia.com/2010/05/09/practical-styles-of-pair-programming/\">2</a></p></blockquote>\n<p>In some situations pair programming is not a good fit. Be sure to understand the need for <a href=\"alone-time\">alone time</a></p>\n<h3>Application</h3>\n<p>First of all, you optimize the conditions for pair programming. That could include many things, such as:</p>\n<ul>\n<li>Noise cancellation: if there's too much noise in your environment, if people are bothering you for the wrong things, if there are things that would prevent you from being focused even if you would be working on your own, then you need to fix it.</li>\n<li>Pair programming ergonomics: if you can't pair comfortably, then it's not going to fly. If your navigator is unable to read your screen, then it will fail. Getting another monitor might help. If - in order for the navigator to see the screen - the driver needs to work in a cramped position, it will fail as well. There are certain type of desks that just don't support pair programming at all. Rearrange the office floor to fix it. Make yourself comfortable.</li>\n<li>Pick a style. Iwein lists a number of styles in his article<sup>2</sup>^. Pick the right one for the task at hand.</li>\n</ul>\n<h3>Consequences</h3>\n<p>Pair programming helps you to stay focused on your task and it grows collective ownership.</p>\n<h3>References</h3>\n<ol>\n<li>James Shore, The Art of Agile Development, 2010, <a href=\"http://jamesshore.com/Agile-Book/pair_programming.html\">http://jamesshore.com/Agile-Book/pair_programming.html</a></li>\n<li>Iwein Fuld, Practical Styles of Pair Programming, 2010, <a href=\"http://blog.xebia.com/2010/05/09/practical-styles-of-pair-programming/\">http://blog.xebia.com/2010/05/09/practical-styles-of-pair-programming/</a></li>\n</ol>"
		},
		{
			"title": "Prefer rich modes of communication",
			"url": "http://essentials.xebia.com/rich-communication",
			"description": "",
			"category": {
				"id": "craftsmanship",
				"color": "#F80068",
				"backgroundColor": "#be0351",
				"label": "Craftsmanship"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "craftsmanship"
				}
			],
			"id": "rich-communication",
			"fullContent": "<h3>Motivation</h3>\n<p>Poor or poorly understood communication is a common cause for failures, ineffective teams and interpersonal tension.</p>\n<h3>Applicability</h3>\n<p>Any job or environment where more than one person is involved. There even is strong evidence that a single person benefits from communicating with a fictitious partner (such as a rubber duck or a cardboard cutout of your favorite celebrity), a technique known as Rubber Ducking.</p>\n<h3>Application</h3>\n<p>Not all methods of communication are created equal. Choose the best available means of communication.</p>\n<h3>References</h3>\n<ul>\n<li><a href=\"the-zone\">Respect the Zone</a></li>\n</ul>"
		},
		{
			"title": "Prevent your code base from turning into a museum",
			"url": "http://essentials.xebia.com/no-museum",
			"description": "",
			"category": {
				"id": "craftsmanship",
				"color": "#F80068",
				"backgroundColor": "#be0351",
				"label": "Craftsmanship"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "craftsmanship"
				}
			],
			"id": "no-museum",
			"fullContent": "<h3>Also known as</h3>\n<p>HEAD is not a museum.</p>\n<h3>Motivation</h3>\n<p>The purpose of an SCM system is to store a history of your work, so there's no need to keep unused code or comments in your current build.</p>\n<h3>Applicability</h3>\n<p>Whenever you see commented-out or unused code and/or outdated comments in source code or documentation.</p>\n<h3>Application</h3>\n<p>Remove unused variables, methods etc., any code commented-out without an accompanying explanation (e.g. a temporary workaround for a blocking issue), any tests ignored without explanation and any outdated comments or documentation from your source code and update your SCM system. Also, remind your colleagues that these items should be removed.</p>\n<h3>Consequences</h3>\n<p>The HEAD of your project will reflect the current state of your code, not an arbitrary mix or current code any stuff hanging around because nobody is 100% sure whether it is in use or not.</p>"
		},
		{
			"title": "Remember the fallacies of distributed computing",
			"url": "http://essentials.xebia.com/fallacies-distributed-computing",
			"description": "",
			"category": {
				"id": "realisation",
				"color": "#107FD5",
				"backgroundColor": "#0e65a8",
				"label": "Realisation"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "realisation"
				}
			],
			"id": "fallacies-distributed-computing",
			"fullContent": "<h3>Motivation</h3>\n<p>Peter Deutsch asserted that programmers new to distributed applications invariably make a set of assumptions known as the Fallacies of Distributed Computing and that all of these assumptions ultimately prove false, resulting either in the failure of the system, a substantial reduction in system scope, or in large unplanned expenses required to redesign the system to meet its original goals.</p>\n<h3>Applicability</h3>\n<p>More often than not, we at Xebia work on distributed systems. In our industry, it is not uncommon to ignore the fallacies of distributed computing.</p>\n<ol>\n<li>The network is reliable.</li>\n<li>Latency is zero.</li>\n<li>Bandwidth is infinite.</li>\n<li>The network is secure.</li>\n<li>Topology doesn't change.</li>\n<li>There is one administrator.</li>\n<li>Transport cost is zero.</li>\n<li>The network is homogeneous.</li>\n</ol>\n<p>Ignoring these properties will lead to brittle systems. We don't want to create brittle systems; we want to create robust systems. Systems that survive network failure. Systems that do not need he constant presence of a network administrator in order to survive. Systems that are resilient to changes to the network topology.</p>\n<h3>Application</h3>\n<p>First of all, you need to be aware of the existence of this list and understand that there is no such thing as a free ride. When the network is getting involved, you need to be be aware of the consequences, and design for it.</p>\n<p>In addition to that: Many attempts have been made to hide the complexity of coping with the characteristics of a distributed system. Be careful with those solutions. Solutions that suggest that you should not worry about the network and allow you to create software as though the network wasn't there are suspicious.</p>\n<h3>Consequences</h3>\n<p>It is one thing to be aware of the consequences of your decisions when designing for a distributed solution. By carefully choosing from your options, you can most definitely increase the resilience of your system against network failures. However, increasing the robustness of your system might also increase the complexity of the programming model.</p>\n<p>Jini is an example of a technology that definitely took the 8 fallacies of distributed computing seriously, and I think it's fair to say it was much more resilient to networking issues than Java EE solutions coming about around that same time frame. However, it did put a burden to the developer. You had to write more code in order to be able to deal with whatever could go wrong.</p>\n<p>Now, question is if your solutions always need to have the same properties as Jini-based solutions, especially if there is a price you will have to pay for it. Probably not. In the end, it's just a balancing act, balancing factors such as the price business is willing to pay for ultimate availability, the characteristics of the data center(s) and the experience of the team you are working with.</p>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://en.wikipedia.org/wiki/Fallacies_of_Distributed_Computing\">Wikipedia</a></li>\n</ul>"
		},
		{
			"title": "Respect the zone",
			"url": "http://essentials.xebia.com/the-zone",
			"description": "",
			"category": {
				"id": "collaboration",
				"color": "#FC7A25",
				"backgroundColor": "#cd631e",
				"label": "Collaboration"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "collaboration"
				}
			],
			"id": "the-zone",
			"fullContent": "<h3>Also know as</h3>\n<p>Flow, as in in the Flow</p>\n<h3>Motivation</h3>\n<p>Have you ever experienced a feeling that time stood still, or perhaps that time passed without you noticing? This could have been when you were reading a book, playing as a child, while sporting, but it could also happen when you are working. This state of mind, which resembles the state of mind of people in trance or under hypnosis has been described abundantly in literature and has been the subject of scientific research. Apart from the fact that it is healthy and enjoyable to be in such a state of mind, it has also been associated with higher productivity.</p>\n<h3>Applicability</h3>\n<p>When we talk about hyperproductivity or enhancing the productivity of creative people in general we also should consider how to keep them in the zone as much as possible.</p>\n<h3>Application</h3>\n<p>One of the most common things to do is to avoid interruptions, but also adding appropriate visual elements in a room (art instead of clutter, plants instead of machines) can help reach a state of flow. Physical exercise, drinking enough water, a healthy diet are helpful to make the mind more likely to enter and stay in the zone. Interaction with other people immersed in the same problem space can help avoid interruptions and draw a whole team into the zone.\nTo increase this type of interaction you should ensure there is lots of physical communication equipment. Whiteboards, large papers (flip chart), markers, pencils, crayons.\nIt sometimes helps to add toys to draw developers out of their hiding places inside their screen and interact with each other\nThe most important thing is to let developers be in a bubble that is not often pierced by things that are not part of their zone.</p>\n<h3>Consequences</h3>\n<p>Team moral will go up when an atmosphere is created where zoning in is allowed and encouraged. Productivity will go up. When team zoning happens problems are much less often discarded as unsolvable.\nSymptoms that can be seen on the outside are:</p>\n<ul>\n<li>constant soft chatter between developers</li>\n<li>people moving around from desk to desk</li>\n<li>more joking and laughter</li>\n<li>increased use of non digital tooling (whiteboards, paper, gesturing, role play)</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"pair-programming\">Pair Programming</a></li>\n<li><a href=\"http://scholar.google.com/scholar?hl=en&amp;q=Cs%C3%ADkszentmih%C3%A1lyi+flow&amp;btnG=Search&amp;as_sdt=2000&amp;as_ylo=&amp;as_vis=0\">Google Scholar: Csíkszentmihályi flow</a></li>\n</ul>"
		},
		{
			"title": "Review code",
			"url": "http://essentials.xebia.com/code-review",
			"description": "",
			"category": {
				"id": "collaboration",
				"color": "#FC7A25",
				"backgroundColor": "#cd631e",
				"label": "Collaboration"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "collaboration"
				}
			],
			"id": "code-review",
			"fullContent": "<h3>Motivation</h3>\n<p>We care about quality. Since everyone makes mistakes we reduce the risk of mistakes escaping to production by reviewing all code. Together with <a href=\"pair-programming\">Pair Programming</a> this practice ensures that always two pairs of eyes have seen all production code.</p>\n<h3>Applicability</h3>\n<p>Reviewing code is a great way to get an overview of a code base; to learn the style and the domain. It is also a way to view the code from an unusual standpoint and see inconsistencies that would otherwise stay out of focus. The only way to truly know the internal quality of a code base is to read the code. Apply reviews when you're not sure about the code quality, or when you want to coach a team to better quality code through concrete feedback.</p>\n<h3>Application</h3>\n<p>Reviewing can be done in several ways. First there is the old fashioned way: just take a text editor (with highlighting if you can) and read the code file by file. It can be useful to load the code in an IDE, but since you're not here to check if it will compile this might just as well be an unneeded distraction. While reading the code write down concretely what you would change if you were refactoring. Share this with the developers through a simple text.</p>\n<p>Then there is the per commit reviewing style, that allows the reviewer to review changes rather than the end result. This is perfect for quick feedback on developer behaviour, rather than the result of the behaviour. It takes more time and discipline to review all commits.</p>\n<p>A great way of code reviewing is by using Pull Requests. Pull requests are a feature of most DVCS hosting tools. If your project is on a distributed version control system (DVCS) like Git or Mercurial, you can use such a system. It's basically a pending merge from one branch into another, accompanied by a commenting system. The great thing about pull requests is that they're asynchronous (you don't have to interrupt a colleague in their work), persistent (the reviewing comments are archived), up-to-date (the scope of the code review automatically updates as further commits are made on the development branch) and public (pull requests are visible to the entire team, anyone can chip in). At GitHub, it's not uncommon for a pull request to live for months before being merged. There's a great talk about how they use them: <a href=\"http://zachholman.com/talk/how-github-uses-github-to-build-github/\">How GitHub uses GitHub to build GitHub</a>.</p>\n<p>Note that Code Reviewing and <a href=\"pair-programming\">Pair Programming</a> are not interchangeable, because they serve different goals.</p>\n<h3>Consequences</h3>\n<p>Increased shared ownership is attained when reviewing is done by team members. When reviews are done it is important to invest time in dealing with the comments. Otherwise the (sometimes mundane) task of reviewing is not rewarded properly and will feel like a waste of time.</p>\n<h3>Samples</h3>\n<p>There are tools that help reviewing greatly, such as Crucible (commercial) and of free tools around the git vcs, like Gerrit and the GitHub review system. Especially when reviewing per commit, decent tooling is a must have.</p>"
		},
		{
			"title": "Run tests automatically",
			"url": "http://essentials.xebia.com/run-tests-automatically",
			"description": "",
			"category": {
				"id": "testing",
				"color": "#6DC726",
				"backgroundColor": "#378241",
				"label": "Testing"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "testing"
				}
			],
			"id": "run-tests-automatically",
			"fullContent": "<h3>Motivation</h3>\n<p>Modern computers are extremely fast. Utilise a little of that power to provide you with very fast feedback as you're doing your work. You don't even have to hit a <a href=\"master-your-tools\">keyboard shortcut</a> anymore.</p>\n<h3>Applicability</h3>\n<p>This is a useful tool if you're somewhat accustomed to test-driven development.</p>\n<h3>Application</h3>\n<p>This is a very simple addition to your day to day work as a software developer. When performed in a TDD cycle, you know exactly when you've written enough code, because then the test will turn green.</p>\n<h3>Consequences</h3>\n<p>As a side effect of running your tests this often, you might become aware of the actual time your tests take to run. Are all tests as still as valuable as when you wrote them?</p>\n<h3>Samples</h3>\n<p>Infinitest for Eclipse and IntelliJ.</p>\n<h3>References</h3>\n<ul>\n<li><a href=\"independent-tests\">Independent Tests</a></li>\n<li><a href=\"tdd-shapes-design\">TDD Shapes Design</a></li>\n<li><a href=\"automate-everything\">Automate Everything</a></li>\n</ul>"
		},
		{
			"title": "Separation of concerns",
			"url": "http://essentials.xebia.com/separation-of-concerns",
			"description": "",
			"category": {
				"id": "realisation",
				"color": "#107FD5",
				"backgroundColor": "#0e65a8",
				"label": "Realisation"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "realisation"
				}
			],
			"id": "separation-of-concerns",
			"fullContent": "<p>Separate a program into non-overlapping concerns. Edsger W. Dijkstra</p>\n<h3>Motivation</h3>\n<p>Clearly separated code has some advantages.</p>\n<p>Firstly, the programming units are small and are less dependent on each other. This eases testing.</p>\n<p>Secondly, when concerns are cleanly separated it's easier to reason about the application. This is a valuable asset during development as well as exploitation of the application.</p>\n<h1>See also</h1>\n<ul>\n<li><a href=\"tdd-shapes-design\">TDD Shapes Design</a></li>\n<li><a href=\"maximize-cohesion-minimize-coupling\">Maximize Cohesion, Minimize Coupling</a></li>\n<li>A <a href=\"http://en.wikipedia.org/wiki/List_of_pioneers_in_computer_science\">List of Pioneers in Computer Science</a> on Wikipedia.</li>\n</ul>"
		},
		{
			"title": "Share the design",
			"url": "http://essentials.xebia.com/shared-design-understanding",
			"description": "",
			"category": {
				"id": "realisation",
				"color": "#107FD5",
				"backgroundColor": "#0e65a8",
				"label": "Realisation"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "realisation"
				}
			],
			"id": "shared-design-understanding",
			"fullContent": "<h3>Motivation</h3>\n<p>Having no shared understanding of what you are jointly aiming for is a recipe for disaster:</p>\n<ul>\n<li>Conceptual integrity will be broken.</li>\n<li>The discussion will slide to your code base.</li>\n<li>Which will eventually turn your code base into a battle ground.</li>\n<li>It's not uncommon people will undo the changes of others, thinking it is not the right way - mind you, without a joined agreement on what constitutes 'the right way'.</li>\n</ul>\n<h3>Applicability</h3>\n<p>It applies on all levels of the IT organization, but most certainly to development teams.</p>\n<h3>Application</h3>\n<p>There are a couple of things you can do to increase a shared understanding of the design objectives.</p>\n<ul>\n<li>Pair programming helps: even though it synchronizes between two people only, if you switch pairs frequently, and if you prevent your team members from getting too attached to a particular area of the code base, you will eventually get a shared design understanding.</li>\n<li>Joint design discussion: as soon as you notice blank stares when discussing a particular area of the code base, you should step up and demand allocating some time to discuss that part of the codebase.</li>\n<li>Plaster the walls: any material coming out of the design discussions should be on the wall. And it should be updated if it no longer reflects the current understanding.</li>\n</ul>\n<h3>Consequences</h3>\n<p>A shared understanding of the design will help people understand the consequences of their actions. Not having a shared understanding of the design will quickly cause people to claim a certain portion of the code base they understand, which eventually will result in a fragmented code base without any conceptual integrity at all.</p>\n<p>Having design meetings of course is expensive. Having some preparation might help, but pictures drawn during the meeting normally have a longer lasting effect. And you should keep in mind that ideas captured during preparation might turn out to be invalid during the discussion.</p>\n<p>The advice is not to have design discussions during the stand-up, but perhaps right after it. Somebody should take the responsibility to make sure the results are captured on the wall.</p>"
		},
		{
			"title": "Sleep easy on a green build",
			"url": "http://essentials.xebia.com/no-broken-builds",
			"description": "",
			"category": {
				"id": "collaboration",
				"color": "#FC7A25",
				"backgroundColor": "#cd631e",
				"label": "Collaboration"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "collaboration"
				}
			],
			"id": "no-broken-builds",
			"fullContent": "<h3>Also known as</h3>\n<p>Nobody goes home until the build is fixed</p>\n<h3>Motivation</h3>\n<p>Your build state is your code's heartbeat. A broken build means you're not delivering value, and you certainly don't have production-ready software.</p>\n<h3>Applicability</h3>\n<p>If you're using a continuous build system (you are, aren't you?), you should have trouble sleeping if the build isn't green.</p>\n<h3>Application</h3>\n<p>Ensure you receive automatic alerts when your build breaks and also when it is fixed. If a build is broken it is the responsibility of the entire team to ensure the build is fixed. Of course, the person responsible for the check-in that broke the build is the most natural person to delegate this task to, but if s/he is only holiday that's not an excuse to ignore the problem!</p>\n<h3>Consequences</h3>\n<p>If you have a broken build (and certainly if you were responsible for it breaking!) you should feel bad if you're working on anything other than fixing it. If your team starts ignoring build failure notifications - or even starts setting up mail filters for them! - consider if the build setup is still relevant to your project's needs. For instance, there's no point in having a quality build that fails continuously because it is verifying style rules the team is no longer using.</p>\n<p>If your failing build(s) are still relevant to your project and the team is ignoring them anyway, raise the alarm.</p>\n<h3>References</h3>\n<p>There are also a number of \"build league tables\" and other plugins for many continuous build tools that can make keeping the build green a bit more fun and exciting.</p>"
		},
		{
			"title": "Split functionality into small units",
			"url": "http://essentials.xebia.com/thirty-minute-methods",
			"description": "",
			"category": {
				"id": "realisation",
				"color": "#107FD5",
				"backgroundColor": "#0e65a8",
				"label": "Realisation"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "realisation"
				}
			],
			"id": "thirty-minute-methods",
			"fullContent": "<h3>Motivation</h3>\n<p>When you're in the thick of it it is hard to see where you should split up a bit of work. Usually a couple of lines is perfect, but if you're doing something mundane like a switch statement the mental overhead might be higher if you split things up.</p>\n<p>One rule that is easy to apply and remember is that someone in your team needs to be comfortable to replace the method within a short span of time. 30 minutes is a number to stay below.</p>\n<h3>Applicability</h3>\n<p>Apply this when code is written.</p>\n<h3>Application</h3>\n<p>Question yourself before you leave a context if the methods/functions are not too complex or too scattered.</p>\n<h3>Consequences</h3>\n<p>You should see more consistent method sizes and more readable code after you've applied this as a team for a while.</p>"
		},
		{
			"title": "Start with acceptance criteria",
			"url": "http://essentials.xebia.com/acceptance-criteria",
			"description": "",
			"category": {
				"id": "testing",
				"color": "#6DC726",
				"backgroundColor": "#378241",
				"label": "Testing"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "testing"
				}
			],
			"id": "acceptance-criteria",
			"fullContent": "<h3>Also known as</h3>\n<p>Don't start without acceptance criteria.</p>\n<h3>Motivation</h3>\n<p>Make sure everyone has common understanding before building anything.\nAcceptance criteria should be part of your Definition of Ready.\nYou're not done when acceptance criteria isn't automated.</p>\n<p>All software built should be made for a reason. It's valuable to capture that reason. Normal (Word) documents are not enough to work from. They leave room for ambiguity.</p>\n<h3>Applicability</h3>\n<p>It's best to think about acceptance criteria for a feature/story, before the implementation starts. Preferably before the sprint starts, so the team has as much information about the feature as possible.</p>\n<h3>Application</h3>\n<p>When defining your acceptance criteria, think about the \"What\": What should it do? Not: how should it be done. The How is about implementing the feature. We're searching for What it should do in terms of business functionality.</p>\n<p>Before you start to work on a feature or user story it's good to know what the expectation of the business or product owner is about that particular feature. Make this as formal as possible. Preferably to the extend that it can be automated in a breeze.</p>\n<p>Think about examples of how a particular feature can be used. How are you going to demo it once it's built?</p>\n<h3>Consequences</h3>\n<p>As a consequence business and development team will have a much better understanding about what the application will do. Developers on the other hand have a better understanding about what the business is trying to achieve with a particular feature and can help the business find better ways to achieve their goal.</p>\n<h3>Samples</h3>\n<p>Specification by Example is one way to deal with acceptance criteria in terms of (usage) examples.</p>\n<h3>References</h3>\n<ul>\n<li><a href=\"tests-are-specs\">tests-are-specs</a></li>\n<li><a href=\"brutal-transparency\">brutal-transparency</a></li>\n</ul>"
		},
		{
			"title": "Take time to tackle tech debt",
			"url": "http://essentials.xebia.com/time-for-tech-debt",
			"description": "",
			"category": {
				"id": "craftsmanship",
				"color": "#F80068",
				"backgroundColor": "#be0351",
				"label": "Craftsmanship"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "craftsmanship"
				}
			],
			"id": "time-for-tech-debt",
			"fullContent": "<h3>Motivation</h3>\n<p>If you can't make time to tackle tech debt it will just keep on growing, and once the ball of mud is big enough, nobody can move anymore.</p>\n<h3>Applicability</h3>\n<p>Most teams have quite a good idea of how much tech debt they are accumulating in their code. But since it can be hard to convince some Product Owners of the need to work on such \"purely technical\" issues that do not deliver any features, and there is always one more workaround one can apply, it often accumulates.</p>\n<p>At a certain point, there is so much tech debt that tackling it would consume a significant percentage of development resources, at which point it becomes even harder to persuade the PO to invest that much time.</p>\n<h3>Application</h3>\n<p>Be prepared for the fact that some Product Owners, especially those with little technical experience, or those under a lot of pressure from stakeholders to deliver features, find it hard to understand the need for work that doesn't appear to \"deliver\" anything. Try to explain why keeping tech debt within manageable levels is a task that should have a reasonably high priority.</p>\n<p>If you are already facing a backlog of tech debt - and most projects will, because it is also not economical to do everything perfectly - don't hide that fact during estimation. Resist basing your estimates on ugly hacks or workarounds - if implementing a certain feature means that a certain item of tech debt needs to be tackled, include the tech debt work in the estimate.</p>\n<p>Otherwise, a Product Owner will never see the strangling influence of tech debt on the team's ability to deliver features.</p>\n<h3>Consequences</h3>\n<p>With luck, you should arrive at a situation where tech debt is monitored and kept within levels that are deemed manageable within the context of your project - levels that have been agreed by the team and the PO.</p>\n<h3>References</h3>\n<ul>\n<li><a href=\"dare-to-say-no\">Dare To Say No</a></li>\n</ul>"
		},
		{
			"title": "Test Driven Development shapes design",
			"url": "http://essentials.xebia.com/tdd-shapes-design",
			"description": "",
			"category": {
				"id": "testing",
				"color": "#6DC726",
				"backgroundColor": "#378241",
				"label": "Testing"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "testing"
				}
			],
			"id": "tdd-shapes-design",
			"fullContent": "<h3>Also known as</h3>\n<p>Red-Green-Refactor.</p>\n<h3>Motivation</h3>\n<p>There are many ways to start a software project. Why not start with requirements. No, we're not back in the 80's!</p>\n<p>Start with a basic requirement, craft it into a test and let those tests drive development.</p>\n<h3>Applicability</h3>\n<p>This is extremely useful when it comes to writing applications. By performing the red-green-refactor cycle you:</p>\n<ol>\n<li>Write down a feature in test code. Do not be concerned about compiler errors. It's the thought process that counts. What is it I want to achieve.</li>\n<li>Implement the actual (production) code. Only to the extend that the test passes. While writing code you might come up more cases to test. Write those down (e.g. on a piece of paper), we're focused on making the test at hand pass.</li>\n<li>Tidy up. Make sure your code is ready for the next cycle. Is the code self-descriptive?</li>\n</ol>\n<h3>Application</h3>\n<p>Whenever you're writing an application this approach is applicable.</p>\n<p>There are a few corner cases where this approach is less applicable: when you're learning yourself a new library, for example. In those cases you have no idea how the library behaves and you're basically just testing the library.</p>\n<h3>Consequences</h3>\n<p>You'll find out that you have to write less tests and code in general. Since all you're implementing are the features that you describe in your test cases, the code is as good as the test cases. Therefore it's important to have clear, readable tests. Nothing is more confusing than a test whose intention is unclear.</p>\n<h3>References</h3>\n<p><a href=\"http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/\">Freeman, Price: Growing Object-Oriented Software, Guided by Tests</a></p>"
		},
		{
			"title": "Testing is a shared responsibility",
			"url": "http://essentials.xebia.com/testing-is-shared-responsibility",
			"description": "",
			"category": {
				"id": "testing",
				"color": "#6DC726",
				"backgroundColor": "#378241",
				"label": "Testing"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "testing"
				}
			],
			"id": "testing-is-shared-responsibility",
			"fullContent": "<p>Testing is not just the domain of the tester, but a core value for the development team. Every developer is a tester first.</p>"
		},
		{
			"title": "Tests are Specifications",
			"url": "http://essentials.xebia.com/tests-are-specs",
			"description": "",
			"category": {
				"id": "testing",
				"color": "#6DC726",
				"backgroundColor": "#378241",
				"label": "Testing"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "testing"
				}
			],
			"id": "tests-are-specs",
			"fullContent": "<h3>Motivation</h3>\n<p>A good test describes a certain aspect of your system on a functional level. In this sense, a test is not much different from a specification. While traditionally specifications have been written up-front and tests afterwards, this trend has changed.</p>\n<p>A <a href=\"acceptance-criteria\">specification written at the beginning of a project</a> needs to be continuously maintained to stay relevant in rapidly-changing environments - and today, all environments change rapidly. As such, the specification has become a living part of the product, just like production code and tests.</p>\n<p>Conversely, with software being developed and deployed iteratively, tests are written earlier in the process, sometimes <a href=\"definition-of-ready\">before the actual features are implemented</a>. This is a good thing.</p>\n<p>Due to these trends the distinction between functional tests and specifications is quickly disappearing: it often helps to think of tests as specifications and specifications as tests.</p>\n<h3>Applicability</h3>\n<p>Tests that don't look like specifications are not very good tests: often they test how a feature is implemented, not that.</p>\n<p>Specifications that don't look like tests are not very good specifications: often they are too vague, sometimes giving a <a href=\"shared-design-understanding\">false sense of consensus</a> on the feature.</p>\n<h3>Consequences</h3>\n<p>Your process probably no longer has separate 'waterfall' phases for specification (up-front) and testing (afterwards). However, in many organizations, specification and testing are still the responsibilities of disparate roles or even teams. When you consider tests are specifications, the consequence is that specification and testing should be the <a href=\"testing-is-shared-responsibility\">joint responsibility of a multidisciplinary team</a> consisting of both people with a background in specification/requirements engineering and people with a background in testing/test automation.</p>\n<h3>References</h3>\n<p>http://www.specificationbyexample.com</p>"
		},
		{
			"title": "Tests should be fast, reliable and independent",
			"url": "http://essentials.xebia.com/independent-tests",
			"description": "",
			"category": {
				"id": "testing",
				"color": "#6DC726",
				"backgroundColor": "#378241",
				"label": "Testing"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "testing"
				}
			],
			"id": "independent-tests",
			"fullContent": "<h3>Also known as</h3>\n<p>Listen to your tests.</p>\n<h3>Motivation</h3>\n<p>Make sure tests run independent and do not rely on external factors in order to succeed. In doing so, tests can be executed in isolation (for example with a debugger) as well as in sets. You're also relying less on the execution engine, which can be considered a good thing.</p>\n<p>By isolating tests it's easier to track down issues.</p>\n<p>In the end, it's all about feedback.</p>\n<h3>Applicability</h3>\n<p>This approach is applicable throughout the application delivery process.</p>\n<h1>Don't share objects between tests.</h1>\n<p>Sharing objects (or more commonly state) between tests makes it hard to find an issue in a test. You're always relying on some other \"thing\" to prepare the test state for your test. Note that state can be object state as well as state in external systems (see also next point).</p>\n<p>Minimize external dependencies, use mocks.</p>\n<p>Mocks give you the ability to tailor the behaviour of the \"external\" dependencies.</p>\n<h1>Give each test the smallest possible scope.</h1>\n<p>Make one test per feature. Even if the second test is building on the first test, make a new test.</p>\n<p>Keep your tests functional (what is the observable behaviour?).</p>\n<h1>Optimize slow tests to make them not slow.</h1>\n<p>Listen to your tests.</p>\n<p>Why is your test slow? It's worth investigating.</p>\n<h1>Optimize flaky tests to make them reliable.</h1>\n<p>Why is a test flaky? Are there multiple concerns to the object under test? Are you mixing application layers?</p>\n<h3>Application</h3>\n<p>Start with this when writing your code. Start with a test, TDD style: describe what an entity should do. Implement it and describe the next feature. Keep a piece of paper next to you to write down notes while implementing. In doing so, you drive the code through tests. Tests are the most concrete way to describe a piece of functionality: since they're written in a programming language, they can only be interpreted in one way. No ambiguity.</p>\n<h3>Consequences</h3>\n<p>You wouldn't believe what proper tests can do to code.</p>\n<h3>References</h3>\n<ul>\n<li><a href=\"tdd-shapes-design\">TDD Shapes Design</a></li>\n</ul>"
		},
		{
			"title": "Think of code and test as one",
			"url": "http://essentials.xebia.com/test-code-one",
			"description": "",
			"category": {
				"id": "testing",
				"color": "#6DC726",
				"backgroundColor": "#378241",
				"label": "Testing"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "testing"
				}
			],
			"id": "test-code-one",
			"fullContent": "<h3>Motivation</h3>\n<p>The card actually says it all. Writing the code while keeping in mind how you're going to test it will change the way you write your code. There is a fair chance you want to test your module in isolation. That imposes some restrictions on the design of your module: it forces you to minimize coupling as much as possible. And as it turns out, that's a desirable property of software any way.</p>\n<p>The reverse effect obviously also occurs when you are writing the test. You don't just write random test code. You carefully consider the different states in which your module might end up being in, and you adjust your way of testing around that.</p>\n<h3>Applicability</h3>\n<p>Always. This is one of the reasons why having accepting test criteria associated with your user stories is important.</p>\n<h3>Application</h3>\n<p>There are two ways of writing your code. You either start with your code, or you start with your test. Test driven development is about starting with your test, and never start writing code before you have a test that is failing. That way, your code basically flows from your tests. Consequently, your code is influence by the tests only, and not the other way around.</p>\n<p>My personal suggestion would be to go back and forth between your code and your tests.</p>\n<h3>Consequences</h3>\n<p>Circling around between test and code might make it harder to define a stop criterion. And 80% test coverage rule might help. Getting up to 100% test coverage will be hard or (in many cases) impossible. Using assertions inside your code will definitely help to make up for the remaining 20%. Testing your code forces you to take some design decision consciously; adding assertions will have the same effect.</p>\n<h3>References</h3>\n<p>The Way of Testivus - Unit Testing Wisdom From An Ancient Software Start-up, Albert Savoia, <a href=\"http://www.agitar.com/downloads/TheWayOfTestivus.pdf\">http://www.agitar.com/downloads/TheWayOfTestivus.pdf</a>, 2007</p>"
		},
		{
			"title": "Three strikes and you automate",
			"url": "http://essentials.xebia.com/three-strikes",
			"description": "",
			"category": {
				"id": "craftsmanship",
				"color": "#F80068",
				"backgroundColor": "#be0351",
				"label": "Craftsmanship"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "craftsmanship"
				}
			],
			"id": "three-strikes",
			"fullContent": "<ul>\n<li>The first time you do something, just do it by hand.</li>\n<li>The second time you do something similar, wince at the repetition and do it anyway.</li>\n<li>The third time you do something similar, you automate.</li>\n</ul>\n<h3>Motivation</h3>\n<p>We're not in the software business to perform repetitive work. If we can automate business processes we can just as well automate the dull work in our daily job.</p>\n<h3>See also</h3>\n<ul>\n<li><a href=\"run-tests-automatically\">Run Tests Automatically</a></li>\n</ul>"
		},
		{
			"title": "Timebox the unknown",
			"url": "http://essentials.xebia.com/timebox",
			"description": "",
			"category": {
				"id": "collaboration",
				"color": "#FC7A25",
				"backgroundColor": "#cd631e",
				"label": "Collaboration"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "collaboration"
				}
			],
			"id": "timebox",
			"fullContent": "<h3>Also known as</h3>\n<p>Spike</p>\n<h3>Motivation</h3>\n<p>When you cannot estimate the time it would take to finish a job because you have no clue of the complexity of the problem, or the solution is dependant upon various intermediary results, then it pays to put a time limit on the amount of effort being invested in solving the problem.</p>\n<h3>Applicability</h3>\n<p>When you cannot reasonably estimate the time it would take to finish a job.</p>\n<h3>Application</h3>\n<p>Identify the first step towards the solution to the problem. Put a fixed amount of time to be invested for the first step. At the end of that time frame, revisit the problem with the experience you have gained and decide the next step.</p>\n<p>The fixed amount of time should not be too large. Try not to have it longer than two weeks.</p>\n<h3>Consequences</h3>\n<p>This kind of approach helps you to get started with tasks whose solutions are not known upfront. It prevents us from shooting in the dark for large periods of time. It is one of the approaches to fail-fast.</p>"
		},
		{
			"title": "When you don't have time to test everything, you're building too much",
			"url": "http://essentials.xebia.com/test-everything",
			"description": "",
			"category": {
				"id": "testing",
				"color": "#6DC726",
				"backgroundColor": "#378241",
				"label": "Testing"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "testing"
				}
			],
			"id": "test-everything",
			"fullContent": "<h3>Motivation</h3>\n<p>The definition of done for a user story contains the acceptance criteria. Testing these acceptance criteria assures actual business value is delivered and guarantees that a user story is actually done. This makes testing an essential part of any functionality delivered. Any functionality which is created without being tested is waste as its business value has not been determined.</p>\n<h3>Applicability</h3>\n<p>Whenever software is developed the focus must lie on creating fully tested functionality, if the goal is to deliver business value.</p>\n<h3>Application</h3>\n<p>The simplest way to track if tests are executed, is by creating a test-task for every user story. Testing should be done by, or in cooperation with, people who focus on functionality. They can either be functional testers or domain experts, such as the product owners or business analysts.</p>\n<p>To ensure that testing doesn't become a bottleneck in your process, testing should have focus throughout the sprint.</p>\n<p>In order to prevent testing results in a mini-waterfall (with testing right at the end of every sprint), testing must be done in advance, as part of the definition of ready for a user story. When modeling the acceptance criteria in executable specifications, these can be referenced by the developers and used for Acceptance Test Driven Development. The modeling of the test automation should be done in collaboration between testers and developers. This collaboration results in shared understanding of the functionality and it ensures user stories get extra attention on testability and completeness, before development starts. During the development phase the initial tests (that have been created upfront) can be extended with variations and corner cases. This approach results in the shortest possible feedback cycle and as an additional advantage it boosts communication between team members and stakeholders, but most important it results in fully tested user stories, within the sprint.</p>"
		},
		{
			"title": "Work in small increments",
			"url": "http://essentials.xebia.com/small-increments",
			"description": "",
			"category": {
				"id": "craftsmanship",
				"color": "#F80068",
				"backgroundColor": "#be0351",
				"label": "Craftsmanship"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "craftsmanship"
				}
			],
			"id": "small-increments",
			"fullContent": "<h3>Motivation</h3>\n<p>The natural tendency of developers is to fix the world as they move through it. This is a good habit, but each small fix there should isolated. Stop the world refactorings are doomed to fail, so you should strive to avoid them.</p>\n<h3>Applicability</h3>\n<p>In any situation where you are changing a working system. Usually we apply this to software, but it works equally well in teams, cars and households.</p>\n<h3>Application</h3>\n<p>Learn to limit the amount of work you do between commits. This forces you to break your work into small, coherent changes, often a number of changes that preserve existing functionality while paving the way for the new features, followed by one more more changes that enable the new behaviour.</p>\n<p>Run your test suite before every commit.</p>\n<h3>Consequences</h3>\n<p>Easier integration: fewer merge conflicts occur and when they do they're much easier to resolve.\nHigher quality: you can't break your work into small, coherent changes without a clear understanding of your goal and how to get there. The small, coherent changes are easier to keep in your head at once. These factors combined tend to improve the quality of your code and reduce the number of defects.\nAll changes are optional. If you decide to keep the new feature, but not to deprecate the old API you can revert the deprecation in isolation. This is also useful to limit impact if you need to cut your losses and back out of a bad idea.\nReordering of changes becomes possible. When changes depend on each other this becomes a non trivial exercise, but it is usually possible to change the order of changes in retrospect.</p>\n<h3>References</h3>\n<ul>\n<li><a href=\"one-change-at-a-time\">one-change-at-a-time</a></li>\n<li><a href=\"thirty-minute-methods\">thirty-minute-methods</a></li>\n</ul>"
		},
		{
			"title": "Work on stories when they're ready.",
			"url": "http://essentials.xebia.com/definition-of-ready",
			"description": "",
			"category": {
				"id": "collaboration",
				"color": "#FC7A25",
				"backgroundColor": "#cd631e",
				"label": "Collaboration"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "collaboration"
				}
			],
			"id": "definition-of-ready",
			"fullContent": "<h3>Motivation</h3>\n<p>Definition of Ready aims to define an acceptance criteria that a User Story must pass in order to become eligible to be considered for inclusion in Ready sprint backlog.</p>\n<h3>Applicability</h3>\n<p>Definition of Ready is an important tool that can be used by a scrum team to judge whether a user story is ready to be taken up for discussion in a sprint planning.</p>\n<h3>Application</h3>\n<p>While planning a sprint, a User Story must pass the following criteria in order to become eligible for inclusion in a sprint.</p>\n<ul>\n<li>A User Story must define an acceptance criteria which is testable.</li>\n<li>A User Story must also share information on why is it required, giving the team a bigger context on the importance of the story.</li>\n<li>Team should be able to estimate it; In other words there should be a loose implementation strategy associated with it.</li>\n</ul>\n<h3>Consequences</h3>\n<p>By including a story in the sprint that is not READY, the team risks building something that is not fully defined; This may lead to re-work. Another consequence could be expanding/shrinking scope of the problem of the story while the sprint is in progress.</p>\n<h3>References</h3>\n<ul>\n<li>Serge's Blog: <a href=\"http://blog.xebia.com/2009/06/19/the-definition-of-ready/\">http://blog.xebia.com/2009/06/19/the-definition-of-ready/</a></li>\n<li><a href=\"http://www.nomad8.com/files/0787c369f92e9581d8ccf145ec62181b-15.php\">Another Interesting Blog From a Scrum Coach on DOR</a></li>\n</ul>"
		},
		{
			"title": "Write code that humans can easily understand",
			"url": "http://essentials.xebia.com/readable-code",
			"description": "",
			"category": {
				"id": "craftsmanship",
				"color": "#F80068",
				"backgroundColor": "#be0351",
				"label": "Craftsmanship"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "craftsmanship"
				}
			],
			"id": "readable-code",
			"fullContent": "<h3>Also known as</h3>\n<p>Beautiful code is simple code that humans can understand easily.</p>\n<h3>Motivation</h3>\n<p>We want to keep our systems maintainable over time, with clean, simple, testable code, keeping the speed of development high throughout the lifetime of the system.</p>\n<p>You'll only get good code if you actually care about good code.</p>\n<h3>Applicability</h3>\n<p>Any time you touch a piece of code you strive to leave it better than you found it (either better structured, better tested, more understandable...).</p>\n<h3>Application</h3>\n<p>Find some open source code written by some well known acknowledged experts and see how the code is written. Compare it with the way you write code.</p>\n<p>Start reading some of your oldest code and work. Reading your own old code can also be an enlightening experience. You will probably find that it is not at all as easy to read as when you wrote it. Look at how you have developed your skills over the years — it can be truly motivating. Observe what areas of the code are hard to read, and consider whether you are still writing code in the same way today.</p>\n<p>For the person trying to understand your code, well written test cases are of great help. Hence pay great attention to the readability of the test that you write for your code. Test cases should report errors in helpful and meaningful way.</p>\n<p>Write code as if you had to support it for the rest of your life. If you keep this point in mind, you would gradually improve towards becoming an expert programmer.</p>\n<h3>Consequences</h3>\n<p>Writing a simple readable code forces you to think straight in terms of overall design and the flow of the code.</p>\n<p>People will form opinions about you based on the code that they see. If those opinions are constantly negative, you will get less from your career than you hoped. Take care of your career, of your clients, and of your users with every line of code.</p>\n<p>The overall speed of the development of the project gradually increases if everyone starts caring about the code.</p>\n<h3>References</h3>\n<p>Any fool can write code that a computer can understand. Good programmers write code that humans can understand.\n- <a href=\"http://www.softwarequotes.com/showquotes.aspx?id=573&amp;name=Fowler,Martin\">Martin Fowler</a>, Refactoring: Improving the Design of Existing Code by Martin Fowler, Kent Beck (Contributor), John Brant (Contributor), William Opdyke, don Roberts, ISBN: 0201485672</p>\n<p>Beauty of style and harmony and grace and good rhythm depends on simplicity. — Plato</p>\n<p><a href=\"http://www.informit.com/title/0321413091\">Implementation Patterns</a> by Kent Beck</p>"
		},
		{
			"title": "Write small and focused interfaces",
			"url": "http://essentials.xebia.com/focused-interfaces",
			"description": "",
			"category": {
				"id": "realisation",
				"color": "#107FD5",
				"backgroundColor": "#0e65a8",
				"label": "Realisation"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "realisation"
				}
			],
			"id": "focused-interfaces",
			"fullContent": "<h3>Also known as</h3>\n<p>Interface Segregation Principle: Clients should not be forced to depend upon interfaces that they don't use.</p>\n<p>Alternate Definition: The dependency of one class to another one should depend on the smallest possible interface</p>\n<h3>Motivation</h3>\n<p>How do I design a interface?</p>\n<h3>Applicability</h3>\n<p>As we define our interfaces, it becomes important that we clearly understand the role the interface plays within the context of our application, when defining the operation on an interface, we should do so in a manner that doesn't accommodate multiple roles. Therefore, an interface should be responsible for allowing an object to assume a SINGLE ROLE, assuming the class of which that object is an instance implements that interface.</p>\n<h3>Application</h3>\n<p>Like every principle, Interface Segregation Principle requires additional time and effort spent to apply it during the design time and increase the complexity of code. But it produces a flexible design. If we are going to apply it more than necessary, it will result in a code containing a lot of interfaces with single methods, so applying should be done based on experience and common sense in identifying the areas where extension of code are more likely to happen in the future.</p>\n<h3>Consequences</h3>\n<p>This principle is important because it encourages two very important ingredients of a good software design:</p>\n<ul>\n<li>High cohesion - Keep all related methods together</li>\n<li>Low coupling - Keep dependence of one another to the bare minimum</li>\n</ul>\n<p>Changes to fat interfaces tend to cause a ripple affect to classes who shouldn't have been affected in the first place.</p>\n<h3>Samples</h3>\n<p>Java Collection API is a good example on interface segregation. Classes can depend on Collection, List, Set, SortedSet etc. depending on what type of collection they want to use. If everything was bundled in a single interface then any change to that interface would mean a ripple effect in all collection classes. All types of Lists maintain a high cohesion. Client code is dependent on minimal interface required.</p>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://www.objectmentor.com/resources/articles/isp.pdf\">http://www.objectmentor.com/resources/articles/isp.pdf</a></li>\n<li>The <a href=\"http://www.sonarsource.org/clean-up-design-at-class-level-with-sonar/\">LCOM4 metric in Sonar</a> can help reveal violations of this principle in an existing code base.</li>\n</ul>"
		},
		{
			"title": "You build it, you run it!",
			"url": "http://essentials.xebia.com/build-it-run-it",
			"description": "",
			"category": {
				"id": "collaboration",
				"color": "#FC7A25",
				"backgroundColor": "#cd631e",
				"label": "Collaboration"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "collaboration"
				}
			],
			"id": "build-it-run-it",
			"fullContent": "<h3>Motivation</h3>\n<p>Often development teams are totally unaware on how their software behaves in production and what the effect is on the end users. All problems are experienced by the operations department and any complaints are handled by first and second line support. The pain of low quality software is not felt by the developers.</p>\n<h3>Application</h3>\n<p>Create autonomous systems and build multidisciplinary teams around them that are responsible for the system in production.</p>\n<h3>References</h3>\n<p>The principle \"you build it, you run it\". was used by Werner Vogels to explain the organisation of the development teams at Amazon.</p>"
		},
		{
			"title": "You get what you measure",
			"url": "http://essentials.xebia.com/what-you-measure",
			"description": "",
			"category": {
				"id": "collaboration",
				"color": "#FC7A25",
				"backgroundColor": "#cd631e",
				"label": "Collaboration"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "collaboration"
				}
			],
			"id": "what-you-measure",
			"fullContent": "<p>Whenever you introduce some sort of <a href=\"make-it-visible\">visible metric</a>, like Code Coverage Analysis or a <a href=\"http://sonarqube.org/\">Sonar</a> violations count, you introduce a pressure to improve that metric. You can multiply the effect by setting a goal or KPI or cash bonus on achieving some sort of target value. Worse still, you can set a penalty on not reaching that target value. Goals and target values are pretty arbitrary anyway. Sure, 80% coverage is better than 78%, but why not aim for 82?</p>\n<p>The greater you make this pressure, the more you run the risk of (a) people gaming the system and (b) people over-optimizing to the detriment of aspects unmeasured. Your metric may end up doing more harm than good.</p>\n<p>All this notwithstanding, metrics and measurement are generally good things. They're a useful tool for <a href=\"improve-continuously\">improving</a> your software development practice, or indeed any other. To avoid these pitfalls:</p>\n<ul>\n<li>pick a range of complementary metrics, to avoid too narrow a focus</li>\n<li>be honest about whether any metrics improvement is of actual benefit or just window-dressing</li>\n<li>periodically reevaluate whether you're still measuring the right things</li>\n<li>aim for an improving trend in all metrics, rather than specific threshold values.</li>\n</ul>"
		},
		{
			"title": "Your solution should not be more complicated than the problem",
			"url": "http://essentials.xebia.com/kiss",
			"description": "",
			"category": {
				"id": "realisation",
				"color": "#107FD5",
				"backgroundColor": "#0e65a8",
				"label": "Realisation"
			},
			"sponsors": [],
			"ulinks": [],
			"tags": [
				{
					"id": "realisation"
				}
			],
			"id": "kiss",
			"fullContent": "<h3>Also known as</h3>\n<ul>\n<li>The simplest thing that could possibly work</li>\n<li>Keep It Simple, Stupid (KISS)</li>\n<li>Less is more</li>\n<li>You Ain't Gonna Need It (YAGNI)</li>\n</ul>\n<h3>Motivation</h3>\n<p>When designing systems or finding solutions for problems in software development, we go for the simplest possible solution. We make things more complicated when we have concrete requirements for them no sooner. The core idea behind this is that it is a waste to spend time on things you may not need in the future.</p>\n<h3>Applicability</h3>\n<p>This applies to all the engineering that we do. This does not mean that there should have no design, on the contrary design is often a very important activity. We state that design has to be based on real and current requirements.</p>\n<h3>Application</h3>\n<p>On the topic of software development it means that we do not design our objects for possible future needs and architectures. Instead we design them for the current need that we have right now, and refactor once we come up against a new requirement or challenge.</p>\n<h3>Consequences</h3>\n<p>When we do this right we achieve three things:</p>\n<ol>\n<li>We avoid unnecessary work, since many of the things we might need in the future will prove to be useless</li>\n<li>We avoid unnecessary complexity, since we only have to deal with our current actual requirements, and the dead code of point 1 will not get in the way</li>\n<li>We follow the agile principle of deciding at the last responsible moment. By only implementing what is actually necessary we implement things at the time when we know most about them, not sooner, leading to better design</li>\n</ol>\n<h3>Samples</h3>\n<p>Every project has examples of overcomplicating matters. It often starts with the technology and infrastructure choices we make. Does this client indeed require webframework X and database Y and workflowengine Z? It goes down to code we write.</p>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://en.wikipedia.org/wiki/KISS_principle\">http://en.wikipedia.org/wiki/KISS_principle</a></li>\n<li><a href=\"http://people.apache.org/~fhanik/kiss.html\">http://people.apache.org/~fhanik/kiss.html</a></li>\n</ul>"
		}
	],
	"title": "Second Printed Deck - 2014"
}