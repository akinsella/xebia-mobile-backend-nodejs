{
  "category": {
    "id": "architecture-design",
    "label": "Architecture and Design",
    "color": "#ED7738",
    "backgroundColor": "#E36E30"
  },
  "cards": [
    {
      "id": "composition-over-inheritance",
      "sponsors": [
        {
          "id": "akalia"
        },
        {
          "id": "rrawat"
        }
      ],
      "tags": [
        {
          "id": "design"
        },
        {
          "id": "oop"
        },
        {
          "id": "principle"
        }
      ],
      "category": {
        "id": "architecture-design",
        "label": "Architecture and Design",
        "color": "#ED7738",
        "backgroundColor": "#E36E30"
      },
      "title": "Favor composition over inheritance",
      "description": "<p>Also known as the 'composite reuse principle'. Favor composition over inheritance to achieve polymorphism.</p>",
      "ulinks": [],
      "url": "http://essentials.xebia.com/composition-over-inheritance",
      "fullContent": "<h3>\n<a name=\"composition-over-inheritance-Alsoknownas\"></a>Also known as</h3>\n<p>Composite Reuse Principle</p>\n<h3>\n<a name=\"composition-over-inheritance-Motivation\"></a>Motivation</h3>\n<p>When some behavior of a domain object can change with other features remaining the same.</p>\n<h3>\n<a name=\"composition-over-inheritance-Applicability\"></a>Applicability</h3>\n<p>Whenever class hierarchies are being created to specialize behavior then behavior could be extracted in an interface. The primary object would delegate the behavior to interface implementations.</p>\n<p>This approach avoids the number of classes to be created. Same set of classes composed differently give different run-time behavior.</p>\n<h3>\n<a name=\"composition-over-inheritance-Application\"></a>Application</h3>\n<p>Design classes to use interfaces for variable behavior and delegate the behavior to a concrete class.</p>\n<h3>\n<a name=\"composition-over-inheritance-Consequences\"></a>Consequences</h3>\n<p>Lesser number of classes and multiple behavior with composition.</p>\n<p>Extensibility&nbsp;</p>\n<h3>\n<a name=\"composition-over-inheritance-Samples\"></a>Samples</h3>\n<p>If you have different devices that use the same software and only differ in the display hardware. Then you could use two approaches.</p>\n<p>\n<strong>Template Method</strong>\n</p>\n<p>\n<strong>Using Composition (Strategy Pattern)</strong>\n</p>\n<h3>\n<a name=\"composition-over-inheritance-References\"></a>References</h3>\n<p>\n<a href=\"http://www.kirkk.com/adobe/crp.pdf\">http://www.kirkk.com/adobe/crp.pdf</a>\n</p>\n<p>\n<a href=\"http://www.kirkk.com/adobe/crp.pdf\">http://www.kirkk.com/adobe/crp.pdf</a><a href=\"http://www.cs.sjsu.edu/~pearce/cs251b/principles/crp.htm\">http://www.cs.sjsu.edu/~pearce/cs251b/principles/crp.htm</a>\n</p>"
    },
    {
      "id": "focused-interfaces",
      "sponsors": [
        {
          "id": "akalia"
        },
        {
          "id": "rrawat"
        }
      ],
      "tags": [
        {
          "id": "design"
        },
        {
          "id": "oop"
        },
        {
          "id": "principle"
        }
      ],
      "category": {
        "id": "architecture-design",
        "label": "Architecture and Design",
        "color": "#ED7738",
        "backgroundColor": "#E36E30"
      },
      "title": "Write small and focused interfaces",
      "description": "<p>Also known as the 'interface segregation principle'. Many specific interfaces are better than one combined general interface.</p>",
      "ulinks": [],
      "url": "http://essentials.xebia.com/focused-interfaces",
      "fullContent": "<h3>\n<a name=\"focused-interfaces-Alsoknownas\"></a>Also known as</h3>\n<p>Interface Segregation Principle: Clients should not be forced to depend upon interfaces that they don't use.</p>\n<p>Alternate Definition: The dependency of one class to another one should depend on the smallest possible interface</p>\n<h3>\n<a name=\"focused-interfaces-Motivation\"></a>Motivation</h3>\n<p>How do I design a interface?</p>\n<h3>\n<a name=\"focused-interfaces-Applicability\"></a>Applicability</h3>\n<p>As we define our interfaces, it becomes important that we clearly understand the role the interface plays within the context of our application, when defining the operation on an interface, we should do so in a manner that doesn't accommodate multiple roles. Therefore, an interface should be responsible for allowing an object to assume a SINGLE ROLE, assuming the class of which that object is an instance implements that interface.</p>\n<h3>\n<a name=\"focused-interfaces-Application\"></a>Application</h3>\n<p>Like every principle Interface Segregation Principle is one principle which require additional time and effort spent to apply it during the design time and increase the complexity of code. But it produce a flexible design. If we are going to apply it more than is necessary it will result a code containing a lot of interfaces with single methods, so applying should be done based on experience and common sense in identifying the areas where extension of code are more likely to happens in the future..</p>\n<h3>\n<a name=\"focused-interfaces-Consequences\"></a>Consequences</h3>\n<p>This principle is important because it encourages two very important ingredients of a good software design</p>\n<p>High cohesion - Keep all related methods together</p>\n<p>Low coupling&nbsp; - Keep dependence of one another to the bare minimum</p>\n<p>Changes to fat interfaces tend to cause a ripple affect to classes who shouldn't have been affected in the first place.</p>\n<h3>\n<a name=\"focused-interfaces-Samples\"></a>Samples</h3>\n<p>Java Collection API is a good example on interface segregation. Classes can depend on Collection, List , Set, SortedSet etc depending on what type of collection they want to use. If eveything was bundled in a single interface then any change to that interface would mean a ripple effect in all collection classes. All types of Lists maintain a high cohesion. Client code is dependent on minimal interface required.</p>\n<h3>\n<a name=\"focused-interfaces-References\"></a>References</h3>\n<ul>\n<li>\n<a href=\"http://www.objectmentor.com/resources/articles/isp.pdf\">http://www.objectmentor.com/resources/articles/isp.pdf</a>\n</li>\n<li>The <a href=\"http://www.sonarsource.org/clean-up-design-at-class-level-with-sonar/\">LCOM4 metric in Sonar</a> can help reveal violations of this principle in an existing code base.</li>\n</ul>"
    },
    {
      "id": "kiss",
      "sponsors": [
        {
          "id": "ragrawal"
        },
        {
          "id": "gschoonheim"
        }
      ],
      "tags": [
        {
          "id": "design"
        }
      ],
      "category": {
        "id": "architecture-design",
        "label": "Architecture and Design",
        "color": "#ED7738",
        "backgroundColor": "#E36E30"
      },
      "title": "Your solution should not be more complicated than the problem",
      "description": "<p> Also known as: </p><ul><li>The simplest thing that could possibly work</li><li>Keep It Simple Stupid (KISS)</li><li>Less is more</li><li>You Ain't Gonna Need It (YAGNI)</li></ul>",
      "ulinks": [],
      "url": "http://essentials.xebia.com/kiss",
      "fullContent": "<h3>\n<a name=\"kiss-Alsoknownas\"></a>Also known as</h3>\n<ul>\n<li>The simplest thing that could possibly work</li>\n<li>Keep It Simple Stupid (KISS)</li>\n<li>Less is more</li>\n<li>You Ain't Gonna Need It (YAGNI)</li>\n</ul>\n<h3>\n<a name=\"kiss-Motivation\"></a>Motivation</h3>\n<p>When designing systems or finding solutions for problems in software development we go for the simplest possible solution. We make things more complicated when we have concrete requirements for them no sooner. The core idea behind this is that it is waste to spend time on things that you are not sure that you will need in the future.&nbsp;</p>\n<p>\nApplicability\n</p>\n<p>This applies to all the engineering that we do.&nbsp;This does not mean that there can should no design, on the contrary design is often a very important activity. We state that design has to be based on real and current requirements.&nbsp;</p>\n<p>\nApplication\n</p>\n<p>On the topic of software development it means that we do not design our objects for possible future needs and architectures. Instead we design them for the current need that we have right now, and refactor once we come up against a new requirement or challenge.</p>\n<h3>\n<a name=\"kiss-Consequences\"></a>Consequences</h3>\n<p>\nWhen we do this right we achieve three things:\n</p>\n<ol>\n<li>We avoid unnecessary work, since many of the things we might need in the future will prove to be useless</li>\n<li>We avoid unnecessary complexity, since we only have to deal with our current actual requirements, and the dead code of point 1 will not get in the way</li>\n<li>We follow the agile principle of deciding at the last responsible moment. By only implementing what is actually necessary we implement things at the time when we know most about them, not sooner, leading to better design</li>\n</ol>\n<p>\nSamples\n</p>\n<p>Every project has examples of overcomplicating matters. It often starts with the technology and infrastructure choices we make. Does this client indeed require webframework X and database Y and workflowengine Z? It goes down to code we write.</p>\n<h3>\n<a name=\"kiss-References\"></a>References</h3>\n<p>\n<a href=\"http://en.wikipedia.org/wiki/KISS_principle\">http://en.wikipedia.org/wiki/KISS_principle</a>\n</p>\n<p>\n<a href=\"http://people.apache.org/~fhanik/kiss.html\">http://people.apache.org/~fhanik/kiss.html</a>\n</p>"
    },
    {
      "sponsors": [
        {
          "id": "ifuld"
        }
      ],
      "id": "no-anemic-domain-model",
      "tags": [
        {
          "id": "design"
        }
      ],
      "category": {
        "id": "architecture-design",
        "label": "Architecture and Design",
        "color": "#ED7738",
        "backgroundColor": "#E36E30"
      },
      "note": "This is an anti-pattern: should be rephrased into something like 'vibrant' domain models.",
      "title": "Beware of anemic domain models",
      "description": "Anemic domain models are data structures without any behaviour. Domain-Driven Design (Eric Evans) is an alternative that improves code maintainability.",
      "ulinks": [
        {
          "url": "http://www.domaindrivendesign.org/resources/what_is_ddd"
        }
      ],
      "url": "http://essentials.xebia.com/no-anemic-domain-model",
      "fullContent": "<p>Anemic domain models are data structures without any behaviour.</p>\n<p>Domain-Driven Design (Eric Evans) is an alternative that improves maintainability.</p>\n<h3 id=\"no-anemic-domain-model-Seealso\">See also</h3>\n<ul>\n<li>\n<a href=\"http://www.martinfowler.com/bliki/AnemicDomainModel.html\">AnemicDomainModel</a> (MartinFowler.com)</li>\n</ul>"
    },
    {
      "id": "fallacies-distributed-computing",
      "tags": [
        {
          "id": "integration"
        },
        {
          "id": "architecture"
        }
      ],
      "sponsors": [
        {
          "id": "wspringer"
        }
      ],
      "category": {
        "id": "architecture-design",
        "label": "Architecture and Design",
        "color": "#ED7738",
        "backgroundColor": "#E36E30"
      },
      "title": "Remember the fallacies of distributed computing",
      "description": "<ul><li>The network is reliable</li><li>Latency is zero</li><li>Bandwidth is infinite</li><li>The network is secure</li><li>Topology doesn't change</li><li>There is one administrator</li><li>Transport cost is zero</li><li>The network is homogeneous</li></ul>",
      "ulinks": [
        {
          "url": "http://en.wikipedia.org/wiki/Fallacies_of_Distributed_Computing"
        }
      ],
      "url": "http://essentials.xebia.com/fallacies-distributed-computing",
      "fullContent": "<h3>\n<a name=\"fallacies-distributed-computing-Motivation\"></a>Motivation</h3>\n<p>Peter Deutsch asserted that programmers new to distributed applications invariably make a set of assumptions known as the Fallacies of Distributed Computing and that all of these assumptions ultimately prove false, resulting either in the failure of the system, a substantial reduction in system scope, or in large unplanned expenses required to redesign the system to meet its original goals.</p>\n<h3>\n<a name=\"fallacies-distributed-computing-Applicability\"></a>Applicability</h3>\n<p>More often than not, we at Xebia work on distributed systems. In our industry, it is not uncommon to ignore the fallacies of distributed computing.</p>\n<ol>\n<li>The network is reliable.</li>\n<li>Latency is zero.</li>\n<li>Bandwidth is infinite.</li>\n<li>The network is secure.</li>\n<li>Topology doesn't change.</li>\n<li>There is one administrator.</li>\n<li>Transport cost is zero.</li>\n<li>The network is homogeneous.</li>\n</ol>\n<p>Ignoring these properties will lead to brittle systems. We don't want to create brittle systems; we want to create robust systems. Systems that survive network failure. Systems that do not need he constant presence of a network administrator in order to survive. Systems that are resilient to changes to the network topology. </p>\n<h3>\n<a name=\"fallacies-distributed-computing-Application\"></a>Application</h3>\n<p>First of all, you need to be aware of the existence of this list and understand that there is no such thing as a free ride. When the network is getting involved, <em>you need to be be aware of the consequences</em>, and design for it.</p>\n<p>In addition to that: Many attempts have been made to hide the complexity of coping with the characteristics of a distributed system. Be careful with those solutions. Solutions that suggest that you should not worry about the network and allow you to create software as though the network wasn't there are suspicious. </p>\n<h3>\n<a name=\"fallacies-distributed-computing-Consequences\"></a>Consequences</h3>\n<p>It is one thing to be <em>aware of the consequences</em> of your decisions when designing for a distributed solution. By carefully choosing from your options, you <em>can</em> most definitely increase the resilience of your system against network failures. However, increasing the robustness of your system might also increase the complexity of the programming model. </p>\n<p>Jini is an example of a technology that definitely took the 8 fallacies of distributed computing seriously, and I think it's fair to say it was much more resilient to networking issues than Java EE solutions coming about around that same timeframe. However, it <em>did</em> put a burden to the developer. You had to write more code in order to be able to deal with whatever could go wrong. </p>\n<p>Now, question is if your solutions <em>always</em> need to have the same properties as Jini-based solutions, especially if there is a price you will have to pay for it. Probably not. In the end, it's just a balancing act, balancing factors such as the price business is willing to pay for ultimate availability, the characteristics of the data center(s) and the experience of the team you are working with.</p>\n<h3>\n<a name=\"fallacies-distributed-computing-References\"></a>References</h3>\n<ul>\n<li>\n<a href=\"http://en.wikipedia.org/wiki/Fallacies_of_Distributed_Computing\">Wikipedia</a>\n</li>\n</ul>"
    },
    {
      "id": "shared-design-understanding",
      "tags": [
        {
          "id": "process"
        },
        {
          "id": "architecture"
        },
        {
          "id": "conceptual-integrity"
        }
      ],
      "sponsors": [
        {
          "id": "wspringer"
        }
      ],
      "category": {
        "id": "architecture-design",
        "label": "Architecture and Design",
        "color": "#ED7738",
        "backgroundColor": "#E36E30"
      },
      "title": "Shared understanding of the design",
      "description": "<p>Everyone in the team should be aware of the core design ideas that have given shape and structure to the software so far, and understand the underlying intent.</p>",
      "ulinks": [],
      "url": "http://essentials.xebia.com/shared-design-understanding",
      "fullContent": "<h3 id=\"shared-design-understanding-Motivation\">Motivation</h3>\n<p>Having no shared understanding of what you are jointly aiming for is a recipe for disaster:</p>\n<ul>\n<li>Conceptual integrity will be broken.</li>\n<li>The discussion will slide to your code base.</li>\n<li>Which will eventually turn your code base into a battle ground.</li>\n<li>It's not uncommon people will undo the changes of others, thinking it is not the <em>right</em> way - mind you, without a joined agreement on what constitutes 'the right way'.</li>\n</ul>\n<h3 id=\"shared-design-understanding-Applicability\">Applicability</h3>\n<p>It applies on all levels of the IT organization, but most certainly to development teams. </p>\n<h3 id=\"shared-design-understanding-Application\">Application</h3>\n<p>There are a couple of things you can do to increase a shared understanding of the design objectives. </p>\n<ul>\n<li>\n<em>Pair programming helps</em>: even though it synchronizes between two people only, if you switch pairs <em>frequently</em>, and if you prevent your team members from getting too attached to a particular area of the code base, you will eventually get a shared design understanding.</li>\n<li>\n<em>Joint design discussion</em>: as soon as you notice blank stares when discussing a particular area of the code base, you should step up and demand allocating some time to discuss that part of the codebase.</li>\n<li>\n<em>Plaster the walls</em>: any material coming out of the design discussions should be on the wall. And it should be updated if it no longer reflects the current understanding.</li>\n</ul>\n<h3 id=\"shared-design-understanding-Consequences\">Consequences</h3>\n<p>A shared understanding of the design will help people understand the consequences of their actions. Not having a shared understanding of the design will quickly cause people to claim a certain portion of the code base they understand, which eventually will result in a fragmented code base without any conceptual integrity at all. </p>\n<p>Having design meetings of course is expensive. Having some preparation might help, but pictures drawn <em>during</em> the meeting normally have a longer lasting effect. And you should keep in mind that ideas captured during preparation might turn out to be invalid during the discussion. </p>\n<p>The advice is <em>not</em> to have design discussions during the stand-up, but perhaps right after it. Somebody should take the responsibility to make sure the results are captured on the wall. </p>\n<h3 id=\"shared-design-understanding-References\">References</h3>"
    },
    {
      "id": "non-functionals",
      "tags": [
        {
          "id": "process"
        },
        {
          "id": "architecture"
        }
      ],
      "sponsors": [
        {
          "id": "wspringer"
        }
      ],
      "category": {
        "id": "architecture-design",
        "label": "Architecture and Design",
        "color": "#ED7738",
        "backgroundColor": "#E36E30"
      },
      "title": "Deal with non-functionals",
      "description": "<p>Work all your non-functional requirements into goals on a clearly defined scale and put them on the backlog, either as part of the 'definition of done' or as separate user stories.</p>",
      "ulinks": [],
      "url": "http://essentials.xebia.com/non-functionals",
      "fullContent": "<h3>\n<a name=\"non-functionals-Motivation\"></a>Motivation</h3>\n<p>Product owners are normally more concerned about things you can <strong>do</strong> with the solution you are building than about the <em>quality</em> of what it can do. As a result, items turning up on the backlog are mostly related to a feature (as in, something the user can do) rather than overall quality. From the product owner's perspective, the team might be making good progress, whereas in reality what is getting produced will never be able to cope with what can be expected to happen when going live.</p>\n<h3>\n<a name=\"non-functionals-Applicability\"></a>Applicability</h3>\n<p>Every project should carefully consider the quality related attributes that need to be addressed. That does not necessarily mean that all projects need have the same non-functional requirements. In fact, in some cases, after short but conscious consideration, the decision might be to just ignore non-functional requirements altogether. (In case of a one-off script?)</p>\n<h3>\n<a name=\"non-functionals-Application\"></a>Application</h3>\n<p>Setting proper objectives for non-functionals is not easy. The problem is: your product owner (ideally the money owner) might have a hard time understanding what these quality attributes are all about. Yet, at the same time, you want to make sure that the product owner backs the plan to address a particular quality requirement, so you <em>do</em> want him to understand what he is essentially asking for.</p>\n<p>One way to address it is by avoiding scales that are (mostly) well understood by developers, but not by non-IT people. So, you just define your own scales that are meaningful in the minds of the product owners. In some cases, that means defining some higher-order quality requirements, from which you then derive the lower-level quality requirements with related measurable scales that can be translated in actual work to be done.</p>\n<p>One way or the other, the quality requirements eventually need to be translated into user stories, or be woven into the definition of done of other stories. You need the product owner's awareness of the fact that you are going to work on this, and you <em>do</em> want him to understand the relevance of it all.</p>\n<p>One of the best sources of working this way is probably Gilb's 'Competitive Engineering'. You might not need to adopt his language. In most cases, it will be fine to define your own, one that is based on terminology that is well understood by the team. Aim for the riskiest non-functional requirements first.</p>\n<h3>\n<a name=\"non-functionals-Consequences\"></a>Consequences</h3>\n<p>Spending time on working out the quality requirements with your product owner is going to take time. Plan for it. Start early, and refine the requirements iteratively.</p>\n<h3>\n<a name=\"non-functionals-References\"></a>References</h3>\n<ul>\n<li>\n<em><a href=\"http://books.google.nl/books?id=ejxQF60xVV0C&amp;dq=competitive+engineering&amp;printsec=frontcover&amp;source=bn&amp;hl=nl&amp;ei=UMSATPmeF4L_Ocq-rNIJ&amp;sa=X&amp;oi=book_result&amp;ct=result&amp;resnum=4&amp;ved=0CDAQ6AEwAw#v=onepage&amp;q&amp;f=false\">Competitive Engineering</a></em>, Tom Gilb, 2005</li>\n</ul>"
    },
    {
      "id": "maximize-cohesion-minimize-coupling",
      "category": {
        "id": "architecture-design",
        "label": "Architecture and Design",
        "color": "#ED7738",
        "backgroundColor": "#E36E30"
      },
      "sponsors": [
        {
          "id": "wspringer"
        }
      ],
      "tags": [],
      "title": "Maximize cohesion, Minimize coupling",
      "description": "<p>Maximizing cohesion and minimizing coupling reduces complexity and increases testability.</p>",
      "ulinks": [],
      "url": "http://essentials.xebia.com/maximize-cohesion-minimize-coupling",
      "fullContent": "<h3 id=\"maximize-cohesion-minimize-coupling-Motivation\">Motivation</h3>\n<p>\n<em>Coupling</em> is the degree to which each program module relies on each one of the other modules. So, coupling is all about the relation <em>between</em> modules. Tightly coupled systems have a number of undesirable properties:</p>\n<ul>\n<li>Changes in one module tend to have a ripple effect on other modules. (So it's hard to make isolated changes.)</li>\n<li>It will be hard to test a module in isolation.</li>\n<li>It will be hard to reuse a module in an alternative context.</li>\n</ul>\n<p>\n<em>Cohesion</em> is a measure of how strongly-related or focused the responsibilities of a single module are. Systems with minimal cohesion have a number of undesirable properties:</p>\n<ul>\n<li>(When applied to source code) code tends to be less readable.</li>\n<li>Code is likely to be less reusable in alternative contexts.</li>\n<li>Complexity is high. (It's hard to figure out what belongs where and why.)</li>\n</ul>\n<p>As a consequence, you should <em>minimize</em> coupling and <em>maximimze</em> cohesion when designing your modules.</p>\n<h3 id=\"maximize-cohesion-minimize-coupling-Applicability\">Applicability</h3>\n<p>\n<em>Minimal coupling, maximal cohesion</em> is applicable to many contexts. Traditionally, it's often associated to source code level design practices, but it is <em>by no means restricted</em> to that context. Many people have argued that it is equally applicable in enterprise scale problems <sup><a href=\"#maximize-cohesion-minimize-coupling-sessions\">2</a></sup>, and I have no problem considering it applicable to hardware design as well. The standardization of USB, PCI, memory modules - it all seems to be driven by a desire to minimize coupling (allowing us to use it in many contexts) as well a maximizing cohesion (this piece of hardware serves one function only).</p>\n<h3 id=\"maximize-cohesion-minimize-coupling-Application\">Application</h3>\n<p>In order to maximize cohesion, make sure you are <em>always</em> able to summarize the purpose of a single module in a single phrase. If it turns out to be impossible to capture the purpose of a module into a single discriminative phrase, then that's a smell. At the other hand, don't go totally overboard by making everything a separate module; it will have a dramatic effect on the number of dependencies between modules, and therefore hurt you in terms of coupling.</p>\n<p>One of the tools that might help you organizing your dependencies is the Dependency Structure Matrix.</p>\n<h3 id=\"maximize-cohesion-minimize-coupling-Consequences\">Consequences</h3>\n<p>Applying this principle makes it more likely that pieces of your software will survive over time.</p>\n<h3 id=\"maximize-cohesion-minimize-coupling-References\">References</h3>\n<ol>\n<li>\n<em>Structured Design</em>, W. Stevens, G. Myers, L. Constantine, IBM Systems Journal, 13 (2), 115-139, 1974.</li>\n<li>\n<span class=\"confluence-anchor-link\" id=\"maximize-cohesion-minimize-coupling-sessions\"></span><em>Simple Architectures for Complex Enterprises</em>, R. Sessions, Microsoft Press, 2008</li>\n</ol>"
    },
    {
      "id": "apis-are-forever",
      "category": {
        "id": "architecture-design",
        "label": "Architecture and Design",
        "color": "#ED7738",
        "backgroundColor": "#E36E30"
      },
      "sponsors": [
        {
          "id": "wspringer"
        }
      ],
      "tags": [],
      "title": "APIs, like diamonds, are forever",
      "description": "<p>So craft them carefully:</p><ul><li>APIs should be self-documenting</li><li>Obey the principle of least astonishment</li><li>Use consistent parameter ordering across methods</li><li>APIs should be easy to use, and hard to misuse</li></ul>",
      "ulinks": [],
      "url": "http://essentials.xebia.com/apis-are-forever",
      "fullContent": "<h3 id=\"apis-are-forever-Motivation\">Motivation</h3>\n<p>You want to be careful crafting your API. If you don't, then you might end up with something that hurt you forever. It's not hard to come up with examples of bad API design. Java's XML processing libraries are notoriously awkward to use. Things that should be simple require tons of boilerplate code.</p>\n<p>Joshua Bloch presented his ideas on API design in a talk named 'How to Design a Good API and Why it Matters' at OOPSLA 2006. It comprises a set of criteria that are fairly easy to remember, as they are all small enough to fit on a bumper sticker:</p>\n<ul>\n<li>All programmers are API designers</li>\n<li>APIs can be among your greatest assets or liabilities</li>\n<li>Public APIs, like diamonds, are forever</li>\n<li>APIs should be easy to use and hard to misuse</li>\n<li>APIs should be self-documenting</li>\n<li>When designing an API, first gather requirements - with a healthy degree of skepticism</li>\n<li>Structure requirements as use-cases</li>\n<li>Early drafts of APIs should be short</li>\n<li>Code the use-cases against your API before you implement it</li>\n<li>Maintain the code for use-cases as the API evolves</li>\n<li>Example code should be exemplary</li>\n<li>You can't please everyone so aim to displease everyone equally</li>\n<li>Expect API-design mistakes due to failures of your imagination</li>\n<li>API design is not a solitary activity</li>\n<li>Avoid fixed limites on input sizes</li>\n<li>Names matter</li>\n<li>If it's hard to find good names, go back to the drawing board</li>\n<li>When in doubt leave it out</li>\n<li>Keep APIs free of implementation details</li>\n<li>Minimize mutability</li>\n<li>Documentation matters</li>\n<li>Consider the performance of consequences of an API design decisions, but don't warp an API to achieve performance gains</li>\n<li>When in Rome, do as the Romans do</li>\n<li>Minimize accessibility</li>\n<li>Subclass only if you can say with a straight face that every instance of the subclass is an instance of the superclass</li>\n<li>Design and document for inheritance or else prohibit it</li>\n<li>Don't make the client do anything the library could do</li>\n<li>Obey the principle of the last astonishment</li>\n<li>Fail fast</li>\n<li>Provide programmatic access to all data available in string form</li>\n<li>Overload with care</li>\n<li>Use the right data type for the job</li>\n<li>Use consistent parameter ordering across methods</li>\n<li>Avoid long parameter names</li>\n<li>Avoid return values that demand exceptional processing</li>\n<li>Throw exceptions only to indicate exceptional conditions</li>\n<li>Throw unchecked exceptions unless clients can realistically recover from the failure</li>\n<li>API design is an art, not a science</li>\n</ul>\n<h3 id=\"apis-are-forever-Applicability\">Applicability</h3>\n<p>Always.</p>\n<h3 id=\"apis-are-forever-Application\">Application</h3>\n<ul>\n<li>Use it while designing the API</li>\n<li>Use it while coding</li>\n<li>Use it while reviewing code</li>\n<li>Use it while pair programming</li>\n</ul>\n<p>It might be good idea to read the list before you go off to design something significant, or always have a printed version of the list close to where you are.</p>\n<h3 id=\"apis-are-forever-Consequences\">Consequences</h3>\n<p>The only negative consequence I can imagine related to trying to follow the guidelines given by Josh are - perhaps - analysis paralysis. Pair programming will prevent that. In fact, just by pair programming and have your buddy remind you of API design bumper stickers, you might have all the benefits without the chance of analysis paralysis.</p>\n<p>Now, some people might argue that following these standards doesn't address a particular business value for the customer, but then I disagree. It is your responsibility as a programmer to create good code. Don't be tempted to create something messy just because you are in a hurry. Chances are that - if you work like that - it will bite back and result in major head aches when you need to overhaul your code later on.</p>\n<p>In order to avoid any discussions on taking the time to work according the guidelines given above, consider making it part of your definition of done, and make sure everybody agrees on that.</p>\n<h3 id=\"apis-are-forever-Samples\">Samples</h3>\n<p>Less than great API design samples, often serving in examples in Joshua Bloch's talk: JAXP</p>\n<h3 id=\"apis-are-forever-References\">References</h3>\n<ul>\n<li>\n<a href=\"http://www.infoq.com/articles/API-Design-Joshua-Bloch\">InfoQ Article</a>\n</li>\n<li>\n<a href=\"http://www.infoq.com/presentations/effective-api-design\">Video recorded at JavaPolis</a>\n</li>\n</ul>"
    }
  ]
}