// Generated by CoffeeScript 1.6.3
/*
Module dependencies.
*/

var db, oauth2orize, passport, security, server, utils;

oauth2orize = require("oauth2orize");

passport = require("passport");

db = require("./db");

utils = require("./lib/utils");

security = require("./lib/security");

server = oauth2orize.createServer();

server.serializeClient(function(client, done) {
  return done(null, client.id);
});

server.deserializeClient(function(id, done) {
  return db.clients.find(id, function(err, client) {
    if (err) {
      return done(err);
    }
    return done(null, client);
  });
});

server.grant(oauth2orize.grant.code(function(client, redirectURI, user, ares, done) {
  var code;
  code = utils.uid(16);
  return db.authorizationCodes.save(code, client.id, redirectURI, user.id, function(err) {
    if (err) {
      return done(err);
    }
    return done(null, code);
  });
}));

server.exchange(oauth2orize.exchange.code(function(client, code, redirectURI, done) {
  return db.authorizationCodes.find(code, function(err, authCode) {
    var token;
    if (err) {
      return done(err);
    }
    if (client.id !== authCode.clientID) {
      return done(null, false);
    }
    if (redirectURI !== authCode.redirectURI) {
      return done(null, false);
    }
    token = utils.uid(256);
    return db.accessTokens.save(token, authCode.userID, authCode.clientID, function(err) {
      if (err) {
        return done(err);
      }
      return done(null, token);
    });
  });
}));

exports.authorization = [
  security.ensureAuthenticated, server.authorization(function(clientID, redirectURI, done) {
    return db.clients.findByClientId(clientID, function(err, client) {
      if (err) {
        return done(err);
      }
      return done(null, client, redirectURI);
    });
  }), function(req, res) {
    return res.render("dialog", {
      transactionID: req.oauth2.transactionID,
      user: req.user,
      client: req.oauth2.client
    });
  }
];

exports.decision = [security.ensureAuthenticated, server.decision()];

exports.token = [
  passport.authenticate(["basic", "oauth2-client-password"], {
    session: false
  }), server.token(), server.errorHandler()
];

/*
//@ sourceMappingURL=oauth2.map
*/
