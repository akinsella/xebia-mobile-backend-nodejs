// Generated by CoffeeScript 1.6.3
var ROLE_ADMIN, ROLE_AGENT, ROLE_ANONYMOUS, ROLE_SUPER_AGENT, User, authenticateUser, checkRoleAdmin, checkRoleAgent, checkRoleAnonymous, checkRoleSuperAgent, db, deserializeUser, failureHandler, serializeUser, utils, _,
  _this = this;

utils = require('../lib/utils');

_ = require('underscore')._;

User = require("../model/user");

db = require("../db");

ROLE_AGENT = "ROLE_AGENT";

ROLE_SUPER_AGENT = "ROLE_SUPER_AGENT";

ROLE_ADMIN = "ROLE_ADMIN";

ROLE_ANONYMOUS = "ROLE_ANONYMOUS";

checkRoleAnonymous = function(req, action) {
  console.log("User is authenticated: " + req.user.isAuthenticated);
  if (!req.user.isAuthenticated) {
    return action === ROLE_ANONYMOUS;
  }
};

checkRoleAgent = function(req, action) {
  if (req.user.role === ROLE_AGENT) {
    return true;
  }
};

checkRoleSuperAgent = function(req, action) {
  if (req.user.role === ROLE_SUPER_AGENT) {
    return true;
  }
};

checkRoleAdmin = function(req, action) {
  if (req.user.role === ROLE_ADMIN) {
    return true;
  }
};

authenticateUser = function(email, password, done) {
  return db.users.findByEmail(email, function(err, user) {
    if (err) {
      return done(err);
    }
    if (!user) {
      return done(null, false);
    }
    if (user.password !== password) {
      return done(null, false);
    }
    return done(null, user);
  });
};

failureHandler = function(req, res, action) {
  if (req.isAuthenticated()) {
    res.status(401);
    return res.send("Unauthorized");
  } else {
    res.status(403);
    return res.send("Forbidden");
  }
};

serializeUser = function(user, done) {
  var googleId;
  googleId = utils.getParameterByName(user.identifier, "id");
  return done(null, googleId);
};

deserializeUser = function(id, done) {
  return User.find({
    googleId: id
  }, function(err, user) {
    return done(err, user);
  });
};

module.exports = {
  authenticateUser: authenticateUser,
  serializeUser: serializeUser,
  deserializeUser: deserializeUser,
  checkRoleAnonymous: checkRoleAnonymous,
  checkRoleAdmin: checkRoleAdmin,
  checkRoleSuperAgent: checkRoleSuperAgent,
  checkRoleAgent: checkRoleAgent,
  failureHandler: failureHandler,
  ROLE_AGENT: ROLE_AGENT,
  ROLE_SUPER_AGENT: ROLE_SUPER_AGENT,
  ROLE_ADMIN: ROLE_ADMIN,
  ROLE_ANONYMOUS: ROLE_ANONYMOUS
};

/*
//@ sourceMappingURL=authService.map
*/
