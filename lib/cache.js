// Generated by CoffeeScript 1.6.2
var CacheEntry, clear, get, moment, remove, set;

CacheEntry = require('../model/cacheEntry');

moment = require('moment');

get = function(key, callback) {
  return CacheEntry.findOne({
    key: key
  }, function(err, cacheEntry) {
    var lastModified, lastModifiedWithTtl, now;

    if (err || !cacheEntry) {
      if (callback) {
        return callback(err, void 0);
      }
    } else {
      now = moment();
      lastModified = moment(cacheEntry.lastModified);
      lastModifiedWithTtl = lastModified.add('seconds', cacheEntry.ttl);
      if (now.isAfter(lastModifiedWithTtl)) {
        cacheEntry.remove();
        if (callback) {
          return callback(err, void 0);
        }
      } else {
        if (callback) {
          return callback(err, cacheEntry.data);
        }
      }
    }
  });
};

set = function(key, data, ttl, callback) {
  var cacheEntry;

  cacheEntry = new CacheEntry({
    key: key,
    data: data,
    ttl: ttl
  });
  return cacheEntry.save(function(err) {
    if (callback) {
      return callback(err, cacheEntry ? cacheEntry.data : void 0);
    }
  });
};

remove = function(key, callback) {
  return CacheEntry.findOneAndRemove({
    key: key
  }, function(err, cacheEntry) {
    if (callback) {
      return callback(err, cacheEntry);
    }
  });
};

clear = function(callback) {
  return CacheEntry.findAndRemove({}, function(err) {
    if (callback) {
      return callback(err);
    }
  });
};

module.exports = {
  get: get,
  set: set,
  remove: remove,
  clear: clear
};
